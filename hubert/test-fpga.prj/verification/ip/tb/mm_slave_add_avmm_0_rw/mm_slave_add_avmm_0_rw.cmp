	component mm_slave_add_avmm_0_rw is
		generic (
			AV_ADDRESS_W               : integer := 64;
			AV_SYMBOL_W                : integer := 8;
			AV_NUMSYMBOLS              : integer := 8;
			AV_BURSTCOUNT_W            : integer := 3;
			AV_READRESPONSE_W          : integer := 8;
			AV_WRITERESPONSE_W         : integer := 8;
			USE_READ                   : integer := 1;
			USE_WRITE                  : integer := 1;
			USE_ADDRESS                : integer := 1;
			USE_BYTE_ENABLE            : integer := 1;
			USE_BURSTCOUNT             : integer := 0;
			USE_READ_DATA              : integer := 1;
			USE_READ_DATA_VALID        : integer := 0;
			USE_WRITE_DATA             : integer := 1;
			USE_BEGIN_TRANSFER         : integer := 0;
			USE_BEGIN_BURST_TRANSFER   : integer := 0;
			USE_WAIT_REQUEST           : integer := 0;
			USE_CLKEN                  : integer := 0;
			AV_BURST_LINEWRAP          : integer := 1;
			AV_BURST_BNDR_ONLY         : integer := 1;
			AV_MAX_PENDING_READS       : integer := 0;
			AV_MAX_PENDING_WRITES      : integer := 0;
			AV_FIX_READ_LATENCY        : integer := 1;
			AV_READ_WAIT_TIME          : integer := 0;
			AV_WRITE_WAIT_TIME         : integer := 0;
			REGISTER_WAITREQUEST       : integer := 0;
			AV_REGISTERINCOMINGSIGNALS : integer := 0;
			COMPONENT_NAME             : string  := "add";
			INTERFACE_ID               : integer := 0
		);
		port (
			do_bind        : in  std_logic                     := 'X';             -- conduit
			enable         : in  std_logic                     := 'X';             -- conduit
			clock          : in  std_logic                     := 'X';             -- clk
			reset_n        : in  std_logic                     := 'X';             -- reset_n
			avs_writedata  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- writedata
			avs_readdata   : out std_logic_vector(63 downto 0);                    -- readdata
			avs_address    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- address
			avs_write      : in  std_logic                     := 'X';             -- write
			avs_read       : in  std_logic                     := 'X';             -- read
			avs_byteenable : in  std_logic_vector(7 downto 0)  := (others => 'X')  -- byteenable
		);
	end component mm_slave_add_avmm_0_rw;

