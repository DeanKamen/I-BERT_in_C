// ------------------------------------------------------------------------- 
// High Level Design Compiler for Intel(R) FPGAs Version 21.1 (Release Build #173.3)
// 
// Legal Notice: Copyright 2021 Intel Corporation.  All rights reserved.
// Your use of  Intel Corporation's design tools,  logic functions and other
// software and  tools, and its AMPP partner logic functions, and any output
// files any  of the foregoing (including  device programming  or simulation
// files), and  any associated  documentation  or information  are expressly
// subject  to the terms and  conditions of the  Intel FPGA Software License
// Agreement, Intel MegaCore Function License Agreement, or other applicable
// license agreement,  including,  without limitation,  that your use is for
// the  sole  purpose of  programming  logic devices  manufactured by  Intel
// and  sold by Intel  or its authorized  distributors. Please refer  to the
// applicable agreement for further details.
// ---------------------------------------------------------------------------

// SystemVerilog created from add_bb_B8_stall_region
// SystemVerilog created on Tue Sep 14 09:53:57 2021


(* altera_attribute = "-name AUTO_SHIFT_REGISTER_RECOGNITION OFF; -name MESSAGE_DISABLE 10036; -name MESSAGE_DISABLE 10037; -name MESSAGE_DISABLE 14130; -name MESSAGE_DISABLE 14320; -name MESSAGE_DISABLE 15400; -name MESSAGE_DISABLE 14130; -name MESSAGE_DISABLE 10036; -name MESSAGE_DISABLE 12020; -name MESSAGE_DISABLE 12030; -name MESSAGE_DISABLE 12010; -name MESSAGE_DISABLE 12110; -name MESSAGE_DISABLE 14320; -name MESSAGE_DISABLE 13410; -name MESSAGE_DISABLE 113007; -name MESSAGE_DISABLE 10958" *)
module add_bb_B8_stall_region (
    input wire [63:0] in_lm12810_add_avm_readdata,
    input wire [0:0] in_lm12810_add_avm_writeack,
    input wire [0:0] in_lm12810_add_avm_waitrequest,
    input wire [0:0] in_lm12810_add_avm_readdatavalid,
    output wire [63:0] out_lm1269_add_avm_address,
    output wire [0:0] out_lm1269_add_avm_enable,
    output wire [0:0] out_lm1269_add_avm_read,
    output wire [0:0] out_lm1269_add_avm_write,
    output wire [63:0] out_lm1269_add_avm_writedata,
    output wire [7:0] out_lm1269_add_avm_byteenable,
    output wire [0:0] out_lm1269_add_avm_burstcount,
    output wire [31:0] out_intel_reserved_ffwd_43_0,
    output wire [31:0] out_inc35145_push14,
    output wire [0:0] out_masked135,
    output wire [0:0] out_valid_out,
    input wire [63:0] in_ml358_add_avm_readdata,
    input wire [0:0] in_ml358_add_avm_writeack,
    input wire [0:0] in_ml358_add_avm_waitrequest,
    input wire [0:0] in_ml358_add_avm_readdatavalid,
    output wire [63:0] out_lm12810_add_avm_address,
    output wire [0:0] out_lm12810_add_avm_enable,
    output wire [0:0] out_lm12810_add_avm_read,
    output wire [0:0] out_lm12810_add_avm_write,
    output wire [63:0] out_lm12810_add_avm_writedata,
    output wire [7:0] out_lm12810_add_avm_byteenable,
    output wire [0:0] out_lm12810_add_avm_burstcount,
    input wire [63:0] in_ml3211_add_avm_readdata,
    input wire [0:0] in_ml3211_add_avm_writeack,
    input wire [0:0] in_ml3211_add_avm_waitrequest,
    input wire [0:0] in_ml3211_add_avm_readdatavalid,
    output wire [63:0] out_ml358_add_avm_address,
    output wire [0:0] out_ml358_add_avm_enable,
    output wire [0:0] out_ml358_add_avm_read,
    output wire [0:0] out_ml358_add_avm_write,
    output wire [63:0] out_ml358_add_avm_writedata,
    output wire [7:0] out_ml358_add_avm_byteenable,
    output wire [0:0] out_ml358_add_avm_burstcount,
    input wire [63:0] in_memdep_16_add_avm_readdata,
    input wire [0:0] in_memdep_16_add_avm_writeack,
    input wire [0:0] in_memdep_16_add_avm_waitrequest,
    input wire [0:0] in_memdep_16_add_avm_readdatavalid,
    output wire [63:0] out_ml3211_add_avm_address,
    output wire [0:0] out_ml3211_add_avm_enable,
    output wire [0:0] out_ml3211_add_avm_read,
    output wire [0:0] out_ml3211_add_avm_write,
    output wire [63:0] out_ml3211_add_avm_writedata,
    output wire [7:0] out_ml3211_add_avm_byteenable,
    output wire [0:0] out_ml3211_add_avm_burstcount,
    input wire [63:0] in_lm13212_add_avm_readdata,
    input wire [0:0] in_lm13212_add_avm_writeack,
    input wire [0:0] in_lm13212_add_avm_waitrequest,
    input wire [0:0] in_lm13212_add_avm_readdatavalid,
    output wire [63:0] out_memdep_16_add_avm_address,
    output wire [0:0] out_memdep_16_add_avm_enable,
    output wire [0:0] out_memdep_16_add_avm_read,
    output wire [0:0] out_memdep_16_add_avm_write,
    output wire [63:0] out_memdep_16_add_avm_writedata,
    output wire [7:0] out_memdep_16_add_avm_byteenable,
    output wire [0:0] out_memdep_16_add_avm_burstcount,
    input wire [63:0] in_lm13413_add_avm_readdata,
    input wire [0:0] in_lm13413_add_avm_writeack,
    input wire [0:0] in_lm13413_add_avm_waitrequest,
    input wire [0:0] in_lm13413_add_avm_readdatavalid,
    output wire [0:0] out_lsu_memdep_16_o_active,
    output wire [63:0] out_lm13212_add_avm_address,
    output wire [0:0] out_lm13212_add_avm_enable,
    output wire [0:0] out_lm13212_add_avm_read,
    output wire [0:0] out_lm13212_add_avm_write,
    output wire [63:0] out_lm13212_add_avm_writedata,
    output wire [7:0] out_lm13212_add_avm_byteenable,
    output wire [0:0] out_lm13212_add_avm_burstcount,
    output wire [63:0] out_lm13413_add_avm_address,
    output wire [0:0] out_lm13413_add_avm_enable,
    output wire [0:0] out_lm13413_add_avm_read,
    output wire [0:0] out_lm13413_add_avm_write,
    output wire [63:0] out_lm13413_add_avm_writedata,
    output wire [7:0] out_lm13413_add_avm_byteenable,
    output wire [0:0] out_lm13413_add_avm_burstcount,
    input wire [63:0] in_lm1269_add_avm_readdata,
    input wire [0:0] in_lm1269_add_avm_writeack,
    input wire [0:0] in_lm1269_add_avm_waitrequest,
    input wire [0:0] in_lm1269_add_avm_readdatavalid,
    output wire [0:0] out_aclp_to_limiter_i_llvm_fpga_pipeline_keep_going126_add45_exiting_valid_out,
    output wire [0:0] out_aclp_to_limiter_i_llvm_fpga_pipeline_keep_going126_add45_exiting_stall_out,
    input wire [0:0] in_pipeline_stall_in,
    output wire [0:0] out_pipeline_valid_out,
    input wire [0:0] in_flush,
    input wire [63:0] in_intel_reserved_ffwd_0_0,
    input wire [63:0] in_intel_reserved_ffwd_10_0,
    input wire [31:0] in_intel_reserved_ffwd_12_0,
    input wire [0:0] in_intel_reserved_ffwd_15_0,
    input wire [31:0] in_intel_reserved_ffwd_16_0,
    input wire [31:0] in_intel_reserved_ffwd_17_0,
    input wire [63:0] in_intel_reserved_ffwd_1_0,
    input wire [63:0] in_intel_reserved_ffwd_2_0,
    input wire [31:0] in_intel_reserved_ffwd_32_0,
    input wire [31:0] in_intel_reserved_ffwd_33_0,
    input wire [31:0] in_intel_reserved_ffwd_34_0,
    input wire [0:0] in_intel_reserved_ffwd_35_0,
    input wire [63:0] in_intel_reserved_ffwd_36_0,
    input wire [31:0] in_intel_reserved_ffwd_37_0,
    input wire [63:0] in_intel_reserved_ffwd_38_0,
    input wire [0:0] in_intel_reserved_ffwd_39_0,
    input wire [0:0] in_intel_reserved_ffwd_3_0,
    input wire [0:0] in_intel_reserved_ffwd_40_0,
    input wire [63:0] in_intel_reserved_ffwd_4_0,
    input wire [63:0] in_intel_reserved_ffwd_6_0,
    input wire [0:0] in_intel_reserved_ffwd_8_0,
    input wire [63:0] in_intel_reserved_ffwd_9_0,
    output wire [31:0] out_intel_reserved_ffwd_42_0,
    input wire [0:0] in_stall_in,
    output wire [0:0] out_stall_out,
    input wire [0:0] in_forked95,
    input wire [31:0] in_inc35149,
    input wire [0:0] in_valid_in,
    input wire clock,
    input wire resetn
    );

    wire [0:0] GND_q;
    wire [0:0] VCC_q;
    wire [0:0] add_B8_merge_reg_aunroll_x_out_data_out_0_tpl;
    wire [31:0] add_B8_merge_reg_aunroll_x_out_data_out_1_tpl;
    wire [0:0] add_B8_merge_reg_aunroll_x_out_stall_out;
    wire [0:0] add_B8_merge_reg_aunroll_x_out_valid_out;
    wire [31:0] bgTrunc_i_inc_add222_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_10_i63_add114_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_11_i69_add119_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_12_i75_add124_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_13_i81_add129_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_14_i87_add134_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_15_i93_add139_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_16_i99_add144_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_17_i105_add149_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_18_i111_add154_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_19_i117_add159_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_1_i9_add69_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_20_i123_add164_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_21_i129_add169_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_22_i135_add174_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_23_i141_add179_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_24_i147_add184_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_25_i153_add189_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_26_i159_add194_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_27_i165_add199_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_28_i171_add204_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_29_i177_add209_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_2_i15_add74_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_30_i183_add214_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_31_i189_add219_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_3_i21_add79_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_4_i27_add84_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_5_i33_add89_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_6_i39_add94_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_7_i45_add99_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_8_i51_add104_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_9_i57_add109_sel_x_b;
    wire [31:0] bgTrunc_i_sub4_i_i3_add63_sel_x_b;
    wire [63:0] i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b;
    wire [63:0] i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b;
    wire [63:0] i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_b;
    wire [64:0] i_arrayidx17_i104_add0_dupName_0_add_x_a;
    wire [64:0] i_arrayidx17_i104_add0_dupName_0_add_x_b;
    logic [64:0] i_arrayidx17_i104_add0_dupName_0_add_x_o;
    wire [64:0] i_arrayidx17_i104_add0_dupName_0_add_x_q;
    wire [64:0] i_arrayidx17_i104_add0_dupName_1_add_x_a;
    wire [64:0] i_arrayidx17_i104_add0_dupName_1_add_x_b;
    logic [64:0] i_arrayidx17_i104_add0_dupName_1_add_x_o;
    wire [64:0] i_arrayidx17_i104_add0_dupName_1_add_x_q;
    wire [127:0] i_arrayidx17_i104_add0_mult_extender_x_q;
    wire [49:0] i_arrayidx17_i104_add0_mult_multconst_x_q;
    wire [63:0] i_arrayidx17_i104_add0_trunc_sel_x_b;
    wire [64:0] i_arrayidx17_i104_add0_add_x_a;
    wire [64:0] i_arrayidx17_i104_add0_add_x_b;
    logic [64:0] i_arrayidx17_i104_add0_add_x_o;
    wire [64:0] i_arrayidx17_i104_add0_add_x_q;
    wire [1:0] i_arrayidx17_i104_add0_c_i2_02_x_q;
    wire [63:0] i_arrayidx17_i104_add0_c_i64_123_x_q;
    wire [61:0] i_arrayidx17_i104_add0_narrow_x_b;
    wire [63:0] i_arrayidx17_i104_add0_shift_join_x_q;
    wire [63:0] i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b;
    wire [63:0] i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b;
    wire [63:0] i_arrayidx17_i159_add0_dupName_3_trunc_sel_x_b;
    wire [64:0] i_arrayidx17_i159_add0_dupName_0_add_x_a;
    wire [64:0] i_arrayidx17_i159_add0_dupName_0_add_x_b;
    logic [64:0] i_arrayidx17_i159_add0_dupName_0_add_x_o;
    wire [64:0] i_arrayidx17_i159_add0_dupName_0_add_x_q;
    wire [64:0] i_arrayidx17_i159_add0_dupName_1_add_x_a;
    wire [64:0] i_arrayidx17_i159_add0_dupName_1_add_x_b;
    logic [64:0] i_arrayidx17_i159_add0_dupName_1_add_x_o;
    wire [64:0] i_arrayidx17_i159_add0_dupName_1_add_x_q;
    wire [127:0] i_arrayidx17_i159_add0_mult_extender_x_q;
    wire [63:0] i_arrayidx17_i159_add0_trunc_sel_x_b;
    wire [64:0] i_arrayidx17_i159_add0_add_x_a;
    wire [64:0] i_arrayidx17_i159_add0_add_x_b;
    logic [64:0] i_arrayidx17_i159_add0_add_x_o;
    wire [64:0] i_arrayidx17_i159_add0_add_x_q;
    wire [61:0] i_arrayidx17_i159_add0_narrow_x_b;
    wire [63:0] i_arrayidx17_i159_add0_shift_join_x_q;
    wire [63:0] i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b;
    wire [63:0] i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b;
    wire [63:0] i_arrayidx17_i_add0_dupName_3_trunc_sel_x_b;
    wire [64:0] i_arrayidx17_i_add0_dupName_0_add_x_a;
    wire [64:0] i_arrayidx17_i_add0_dupName_0_add_x_b;
    logic [64:0] i_arrayidx17_i_add0_dupName_0_add_x_o;
    wire [64:0] i_arrayidx17_i_add0_dupName_0_add_x_q;
    wire [64:0] i_arrayidx17_i_add0_dupName_1_add_x_a;
    wire [64:0] i_arrayidx17_i_add0_dupName_1_add_x_b;
    logic [64:0] i_arrayidx17_i_add0_dupName_1_add_x_o;
    wire [64:0] i_arrayidx17_i_add0_dupName_1_add_x_q;
    wire [127:0] i_arrayidx17_i_add0_mult_extender_x_q;
    wire [63:0] i_arrayidx17_i_add0_trunc_sel_x_b;
    wire [64:0] i_arrayidx17_i_add0_add_x_a;
    wire [64:0] i_arrayidx17_i_add0_add_x_b;
    logic [64:0] i_arrayidx17_i_add0_add_x_o;
    wire [64:0] i_arrayidx17_i_add0_add_x_q;
    wire [63:0] i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b;
    wire [63:0] i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b;
    wire [63:0] i_arrayidx5_i132_add0_dupName_3_trunc_sel_x_b;
    wire [64:0] i_arrayidx5_i132_add0_dupName_0_add_x_a;
    wire [64:0] i_arrayidx5_i132_add0_dupName_0_add_x_b;
    logic [64:0] i_arrayidx5_i132_add0_dupName_0_add_x_o;
    wire [64:0] i_arrayidx5_i132_add0_dupName_0_add_x_q;
    wire [64:0] i_arrayidx5_i132_add0_dupName_1_add_x_a;
    wire [64:0] i_arrayidx5_i132_add0_dupName_1_add_x_b;
    logic [64:0] i_arrayidx5_i132_add0_dupName_1_add_x_o;
    wire [64:0] i_arrayidx5_i132_add0_dupName_1_add_x_q;
    wire [127:0] i_arrayidx5_i132_add0_mult_extender_x_q;
    wire [63:0] i_arrayidx5_i132_add0_trunc_sel_x_b;
    wire [64:0] i_arrayidx5_i132_add0_add_x_a;
    wire [64:0] i_arrayidx5_i132_add0_add_x_b;
    logic [64:0] i_arrayidx5_i132_add0_add_x_o;
    wire [64:0] i_arrayidx5_i132_add0_add_x_q;
    wire [61:0] i_arrayidx5_i132_add0_narrow_x_b;
    wire [63:0] i_arrayidx5_i132_add0_shift_join_x_q;
    wire [63:0] i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b;
    wire [63:0] i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b;
    wire [63:0] i_arrayidx5_i93_add0_dupName_3_trunc_sel_x_b;
    wire [64:0] i_arrayidx5_i93_add0_dupName_0_add_x_a;
    wire [64:0] i_arrayidx5_i93_add0_dupName_0_add_x_b;
    logic [64:0] i_arrayidx5_i93_add0_dupName_0_add_x_o;
    wire [64:0] i_arrayidx5_i93_add0_dupName_0_add_x_q;
    wire [64:0] i_arrayidx5_i93_add0_dupName_1_add_x_a;
    wire [64:0] i_arrayidx5_i93_add0_dupName_1_add_x_b;
    logic [64:0] i_arrayidx5_i93_add0_dupName_1_add_x_o;
    wire [64:0] i_arrayidx5_i93_add0_dupName_1_add_x_q;
    wire [127:0] i_arrayidx5_i93_add0_mult_extender_x_q;
    wire [63:0] i_arrayidx5_i93_add0_trunc_sel_x_b;
    wire [64:0] i_arrayidx5_i93_add0_add_x_a;
    wire [64:0] i_arrayidx5_i93_add0_add_x_b;
    logic [64:0] i_arrayidx5_i93_add0_add_x_o;
    wire [64:0] i_arrayidx5_i93_add0_add_x_q;
    wire [61:0] i_arrayidx5_i93_add0_narrow_x_b;
    wire [63:0] i_arrayidx5_i93_add0_shift_join_x_q;
    wire [63:0] i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b;
    wire [63:0] i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b;
    wire [63:0] i_arrayidx5_i_add0_dupName_3_trunc_sel_x_b;
    wire [64:0] i_arrayidx5_i_add0_dupName_0_add_x_a;
    wire [64:0] i_arrayidx5_i_add0_dupName_0_add_x_b;
    logic [64:0] i_arrayidx5_i_add0_dupName_0_add_x_o;
    wire [64:0] i_arrayidx5_i_add0_dupName_0_add_x_q;
    wire [64:0] i_arrayidx5_i_add0_dupName_1_add_x_a;
    wire [64:0] i_arrayidx5_i_add0_dupName_1_add_x_b;
    logic [64:0] i_arrayidx5_i_add0_dupName_1_add_x_o;
    wire [64:0] i_arrayidx5_i_add0_dupName_1_add_x_q;
    wire [127:0] i_arrayidx5_i_add0_mult_extender_x_q;
    wire [63:0] i_arrayidx5_i_add0_trunc_sel_x_b;
    wire [64:0] i_arrayidx5_i_add0_add_x_a;
    wire [64:0] i_arrayidx5_i_add0_add_x_b;
    logic [64:0] i_arrayidx5_i_add0_add_x_o;
    wire [64:0] i_arrayidx5_i_add0_add_x_q;
    wire [61:0] i_arrayidx5_i_add0_narrow_x_b;
    wire [63:0] i_arrayidx5_i_add0_shift_join_x_q;
    wire [0:0] i_first_cleanup131_add54_sel_x_b;
    wire [63:0] i_idxprom_i129_add59_sel_x_b;
    wire [63:0] i_idxprom_i90_add237_sel_x_b;
    wire [0:0] i_last_initeration127_add229_sel_x_b;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a;
    wire [31:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q;
    wire [71:0] i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_dsdk_ip_adapt_bitjoin1_x_q;
    wire [0:0] i_lm13212_toi1_intcast_add278_sel_x_b;
    wire [0:0] i_lm13413_toi1_intcast_add281_sel_x_b;
    wire [31:0] i_sfc_s_c0_in_for_body28_adds_c0_enter1594_add271_aunroll_x_out_c0_exit163_1_tpl;
    wire [0:0] i_sfc_s_c0_in_for_body28_adds_c0_enter1594_add271_aunroll_x_out_o_stall;
    wire [0:0] i_sfc_s_c0_in_for_body28_adds_c0_enter1594_add271_aunroll_x_out_o_valid;
    wire [31:0] c_float_0_000000e_00304_q;
    wire [16:0] c_i17_65535294_q;
    wire [31:0] c_i32_0297_q;
    wire [31:0] c_i32_1302_q;
    wire [7:0] c_i8_265_q;
    wire [0:0] i_acl_10_add268_s;
    reg [31:0] i_acl_10_add268_q;
    wire [0:0] i_acl_14_add269_s;
    reg [31:0] i_acl_14_add269_q;
    wire [0:0] i_acl_15_add257_q;
    wire [0:0] i_acl_20_add260_qi;
    reg [0:0] i_acl_20_add260_q;
    wire [0:0] i_acl_26_add248_qi;
    reg [0:0] i_acl_26_add248_q;
    wire [0:0] i_acl_31_v_add264_s;
    reg [63:0] i_acl_31_v_add264_q;
    wire [0:0] i_acl_34_v_add262_s;
    reg [63:0] i_acl_34_v_add262_q;
    wire [0:0] i_addr_add253_s;
    reg [63:0] i_addr_add253_q;
    wire [16:0] i_cleanups_shl130_add55_vt_join_q;
    wire [15:0] i_cleanups_shl130_add55_vt_select_16_b;
    wire [33:0] i_cmp11_i153_add230_a;
    wire [33:0] i_cmp11_i153_add230_b;
    logic [33:0] i_cmp11_i153_add230_o;
    wire [0:0] i_cmp11_i153_add230_c;
    wire [33:0] i_cmp11_i98_add241_a;
    wire [33:0] i_cmp11_i98_add241_b;
    logic [33:0] i_cmp11_i98_add241_o;
    wire [0:0] i_cmp11_i98_add241_c;
    wire [33:0] i_cmp11_i_add221_a;
    wire [33:0] i_cmp11_i_add221_b;
    logic [33:0] i_cmp11_i_add221_o;
    wire [0:0] i_cmp11_i_add221_c;
    wire [33:0] i_cmp27_add286_a;
    wire [33:0] i_cmp27_add286_b;
    logic [33:0] i_cmp27_add286_o;
    wire [0:0] i_cmp27_add286_c;
    wire [33:0] i_cmp2_i126_add232_a;
    wire [33:0] i_cmp2_i126_add232_b;
    logic [33:0] i_cmp2_i126_add232_o;
    wire [0:0] i_cmp2_i126_add232_c;
    wire [33:0] i_cmp2_i88_add243_a;
    wire [33:0] i_cmp2_i88_add243_b;
    logic [33:0] i_cmp2_i88_add243_o;
    wire [0:0] i_cmp2_i88_add243_c;
    wire [33:0] i_cmp2_i_add220_a;
    wire [33:0] i_cmp2_i_add220_b;
    logic [33:0] i_cmp2_i_add220_o;
    wire [0:0] i_cmp2_i_add220_c;
    wire [33:0] i_cmp3_i_10_i62_add112_a;
    wire [33:0] i_cmp3_i_10_i62_add112_b;
    logic [33:0] i_cmp3_i_10_i62_add112_o;
    wire [0:0] i_cmp3_i_10_i62_add112_c;
    wire [33:0] i_cmp3_i_11_i68_add117_a;
    wire [33:0] i_cmp3_i_11_i68_add117_b;
    logic [33:0] i_cmp3_i_11_i68_add117_o;
    wire [0:0] i_cmp3_i_11_i68_add117_c;
    wire [33:0] i_cmp3_i_12_i74_add122_a;
    wire [33:0] i_cmp3_i_12_i74_add122_b;
    logic [33:0] i_cmp3_i_12_i74_add122_o;
    wire [0:0] i_cmp3_i_12_i74_add122_c;
    wire [33:0] i_cmp3_i_13_i80_add127_a;
    wire [33:0] i_cmp3_i_13_i80_add127_b;
    logic [33:0] i_cmp3_i_13_i80_add127_o;
    wire [0:0] i_cmp3_i_13_i80_add127_c;
    wire [33:0] i_cmp3_i_14_i86_add132_a;
    wire [33:0] i_cmp3_i_14_i86_add132_b;
    logic [33:0] i_cmp3_i_14_i86_add132_o;
    wire [0:0] i_cmp3_i_14_i86_add132_c;
    wire [33:0] i_cmp3_i_15_i92_add137_a;
    wire [33:0] i_cmp3_i_15_i92_add137_b;
    logic [33:0] i_cmp3_i_15_i92_add137_o;
    wire [0:0] i_cmp3_i_15_i92_add137_c;
    wire [33:0] i_cmp3_i_16_i98_add142_a;
    wire [33:0] i_cmp3_i_16_i98_add142_b;
    logic [33:0] i_cmp3_i_16_i98_add142_o;
    wire [0:0] i_cmp3_i_16_i98_add142_c;
    wire [33:0] i_cmp3_i_17_i104_add147_a;
    wire [33:0] i_cmp3_i_17_i104_add147_b;
    logic [33:0] i_cmp3_i_17_i104_add147_o;
    wire [0:0] i_cmp3_i_17_i104_add147_c;
    wire [33:0] i_cmp3_i_18_i110_add152_a;
    wire [33:0] i_cmp3_i_18_i110_add152_b;
    logic [33:0] i_cmp3_i_18_i110_add152_o;
    wire [0:0] i_cmp3_i_18_i110_add152_c;
    wire [33:0] i_cmp3_i_19_i116_add157_a;
    wire [33:0] i_cmp3_i_19_i116_add157_b;
    logic [33:0] i_cmp3_i_19_i116_add157_o;
    wire [0:0] i_cmp3_i_19_i116_add157_c;
    wire [33:0] i_cmp3_i_1_i8_add67_a;
    wire [33:0] i_cmp3_i_1_i8_add67_b;
    logic [33:0] i_cmp3_i_1_i8_add67_o;
    wire [0:0] i_cmp3_i_1_i8_add67_c;
    wire [33:0] i_cmp3_i_20_i122_add162_a;
    wire [33:0] i_cmp3_i_20_i122_add162_b;
    logic [33:0] i_cmp3_i_20_i122_add162_o;
    wire [0:0] i_cmp3_i_20_i122_add162_c;
    wire [33:0] i_cmp3_i_21_i128_add167_a;
    wire [33:0] i_cmp3_i_21_i128_add167_b;
    logic [33:0] i_cmp3_i_21_i128_add167_o;
    wire [0:0] i_cmp3_i_21_i128_add167_c;
    wire [33:0] i_cmp3_i_22_i134_add172_a;
    wire [33:0] i_cmp3_i_22_i134_add172_b;
    logic [33:0] i_cmp3_i_22_i134_add172_o;
    wire [0:0] i_cmp3_i_22_i134_add172_c;
    wire [33:0] i_cmp3_i_23_i140_add177_a;
    wire [33:0] i_cmp3_i_23_i140_add177_b;
    logic [33:0] i_cmp3_i_23_i140_add177_o;
    wire [0:0] i_cmp3_i_23_i140_add177_c;
    wire [33:0] i_cmp3_i_24_i146_add182_a;
    wire [33:0] i_cmp3_i_24_i146_add182_b;
    logic [33:0] i_cmp3_i_24_i146_add182_o;
    wire [0:0] i_cmp3_i_24_i146_add182_c;
    wire [33:0] i_cmp3_i_25_i152_add187_a;
    wire [33:0] i_cmp3_i_25_i152_add187_b;
    logic [33:0] i_cmp3_i_25_i152_add187_o;
    wire [0:0] i_cmp3_i_25_i152_add187_c;
    wire [33:0] i_cmp3_i_26_i158_add192_a;
    wire [33:0] i_cmp3_i_26_i158_add192_b;
    logic [33:0] i_cmp3_i_26_i158_add192_o;
    wire [0:0] i_cmp3_i_26_i158_add192_c;
    wire [33:0] i_cmp3_i_27_i164_add197_a;
    wire [33:0] i_cmp3_i_27_i164_add197_b;
    logic [33:0] i_cmp3_i_27_i164_add197_o;
    wire [0:0] i_cmp3_i_27_i164_add197_c;
    wire [33:0] i_cmp3_i_28_i170_add202_a;
    wire [33:0] i_cmp3_i_28_i170_add202_b;
    logic [33:0] i_cmp3_i_28_i170_add202_o;
    wire [0:0] i_cmp3_i_28_i170_add202_c;
    wire [33:0] i_cmp3_i_29_i176_add207_a;
    wire [33:0] i_cmp3_i_29_i176_add207_b;
    logic [33:0] i_cmp3_i_29_i176_add207_o;
    wire [0:0] i_cmp3_i_29_i176_add207_c;
    wire [33:0] i_cmp3_i_2_i14_add72_a;
    wire [33:0] i_cmp3_i_2_i14_add72_b;
    logic [33:0] i_cmp3_i_2_i14_add72_o;
    wire [0:0] i_cmp3_i_2_i14_add72_c;
    wire [33:0] i_cmp3_i_30_i182_add212_a;
    wire [33:0] i_cmp3_i_30_i182_add212_b;
    logic [33:0] i_cmp3_i_30_i182_add212_o;
    wire [0:0] i_cmp3_i_30_i182_add212_c;
    wire [33:0] i_cmp3_i_31_i188_add217_a;
    wire [33:0] i_cmp3_i_31_i188_add217_b;
    logic [33:0] i_cmp3_i_31_i188_add217_o;
    wire [0:0] i_cmp3_i_31_i188_add217_c;
    wire [33:0] i_cmp3_i_3_i20_add77_a;
    wire [33:0] i_cmp3_i_3_i20_add77_b;
    logic [33:0] i_cmp3_i_3_i20_add77_o;
    wire [0:0] i_cmp3_i_3_i20_add77_c;
    wire [33:0] i_cmp3_i_4_i26_add82_a;
    wire [33:0] i_cmp3_i_4_i26_add82_b;
    logic [33:0] i_cmp3_i_4_i26_add82_o;
    wire [0:0] i_cmp3_i_4_i26_add82_c;
    wire [33:0] i_cmp3_i_5_i32_add87_a;
    wire [33:0] i_cmp3_i_5_i32_add87_b;
    logic [33:0] i_cmp3_i_5_i32_add87_o;
    wire [0:0] i_cmp3_i_5_i32_add87_c;
    wire [33:0] i_cmp3_i_6_i38_add92_a;
    wire [33:0] i_cmp3_i_6_i38_add92_b;
    logic [33:0] i_cmp3_i_6_i38_add92_o;
    wire [0:0] i_cmp3_i_6_i38_add92_c;
    wire [33:0] i_cmp3_i_7_i44_add97_a;
    wire [33:0] i_cmp3_i_7_i44_add97_b;
    logic [33:0] i_cmp3_i_7_i44_add97_o;
    wire [0:0] i_cmp3_i_7_i44_add97_c;
    wire [33:0] i_cmp3_i_8_i50_add102_a;
    wire [33:0] i_cmp3_i_8_i50_add102_b;
    logic [33:0] i_cmp3_i_8_i50_add102_o;
    wire [0:0] i_cmp3_i_8_i50_add102_c;
    wire [33:0] i_cmp3_i_9_i56_add107_a;
    wire [33:0] i_cmp3_i_9_i56_add107_b;
    logic [33:0] i_cmp3_i_9_i56_add107_o;
    wire [0:0] i_cmp3_i_9_i56_add107_c;
    wire [33:0] i_cmp3_i_i2_add61_a;
    wire [33:0] i_cmp3_i_i2_add61_b;
    logic [33:0] i_cmp3_i_i2_add61_o;
    wire [0:0] i_cmp3_i_i2_add61_c;
    wire [33:0] i_cmp_i116_add245_a;
    wire [33:0] i_cmp_i116_add245_b;
    logic [33:0] i_cmp_i116_add245_o;
    wire [0:0] i_cmp_i116_add245_c;
    wire [33:0] i_cmp_i85_add250_a;
    wire [33:0] i_cmp_i85_add250_b;
    logic [33:0] i_cmp_i85_add250_o;
    wire [0:0] i_cmp_i85_add250_c;
    wire [0:0] i_first_cleanup_xor132_add227_q;
    wire [0:0] i_first_cleanup_xor132_or141_add266_q;
    wire [63:0] i_idxprom_i129_add59_vt_join_q;
    wire [31:0] i_idxprom_i129_add59_vt_select_31_b;
    wire [63:0] i_idxprom_i90_add237_vt_join_q;
    wire [31:0] i_idxprom_i90_add237_vt_select_31_b;
    wire [32:0] i_inc_add222_a;
    wire [32:0] i_inc_add222_b;
    logic [32:0] i_inc_add222_o;
    wire [32:0] i_inc_add222_q;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_cmp_i65108_add30_out_dest_data_out_39_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_cmp_i65108_add30_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_cmp_i65108_add30_out_valid_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_cmp_i65109_add28_out_dest_data_out_39_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_cmp_i65109_add28_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_cmp_i65109_add28_out_valid_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_out_dest_data_out_15_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_out_valid_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_out_dest_data_out_15_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_out_valid_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_out_dest_data_out_40_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_out_valid_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_out_dest_data_out_8_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_out_valid_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_out_valid_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_valid_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_valid_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_out_dest_data_out_3_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_out_valid_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_out_dest_data_out_3_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_out_valid_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_out_valid_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_valid_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_valid_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_out_valid_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_out_valid_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_out_valid_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_out_valid_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_valid_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_out_valid_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_out_valid_out;
    wire [31:0] i_llvm_fpga_ffwd_dest_i32_i_044393_add3_out_dest_data_out_32_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i32_i_044393_add3_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i32_i_044393_add3_out_valid_out;
    wire [31:0] i_llvm_fpga_ffwd_dest_i32_lm72267_add29_out_dest_data_out_16_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i32_lm72267_add29_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i32_lm72267_add29_out_valid_out;
    wire [31:0] i_llvm_fpga_ffwd_dest_i32_lm74369_add27_out_dest_data_out_17_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i32_lm74369_add27_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i32_lm74369_add27_out_valid_out;
    wire [31:0] i_llvm_fpga_ffwd_dest_i32_rem31105_add18_out_dest_data_out_37_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i32_rem31105_add18_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i32_rem31105_add18_out_valid_out;
    wire [31:0] i_llvm_fpga_ffwd_dest_i32_replace_phi100_add0_out_dest_data_out_34_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i32_replace_phi100_add0_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i32_replace_phi100_add0_out_valid_out;
    wire [31:0] i_llvm_fpga_ffwd_dest_i32_replace_phi5097_add1_out_dest_data_out_33_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i32_replace_phi5097_add1_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i32_replace_phi5097_add1_out_valid_out;
    wire [31:0] i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_valid_out;
    wire [63:0] i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_out_dest_data_out_38_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_out_valid_out;
    wire [63:0] i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_out_dest_data_out_38_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_out_valid_out;
    wire [63:0] i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_out_dest_data_out_36_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_out_valid_out;
    wire [63:0] i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_out_dest_data_out_36_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_out_valid_out;
    wire [63:0] i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_out_dest_data_out_36_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_out_valid_out;
    wire [63:0] i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_out_dest_data_out_36_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_out_valid_out;
    wire [63:0] i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_out_dest_data_out_9_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_out_valid_out;
    wire [63:0] i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_out_dest_data_out_4_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_out_valid_out;
    wire [63:0] i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_out_dest_data_out_10_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_out_valid_out;
    wire [63:0] i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_out_dest_data_out_6_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_out_valid_out;
    wire [63:0] i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_out_dest_data_out_0_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_out_valid_out;
    wire [63:0] i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_out_dest_data_out_0_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_out_valid_out;
    wire [63:0] i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_out_dest_data_out_1_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_out_valid_out;
    wire [63:0] i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_out_dest_data_out_1_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_out_valid_out;
    wire [63:0] i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_out_dest_data_out_2_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_out_valid_out;
    wire [63:0] i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_out_dest_data_out_2_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_out_valid_out;
    wire [31:0] i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_out_intel_reserved_ffwd_42_0;
    wire [0:0] i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_out_valid_out;
    wire [31:0] i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_out_intel_reserved_ffwd_43_0;
    wire [0:0] i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_out_stall_out;
    wire [0:0] i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_out_valid_out;
    wire [63:0] i_llvm_fpga_mem_lm1269_add223_out_lm1269_add_avm_address;
    wire [0:0] i_llvm_fpga_mem_lm1269_add223_out_lm1269_add_avm_burstcount;
    wire [7:0] i_llvm_fpga_mem_lm1269_add223_out_lm1269_add_avm_byteenable;
    wire [0:0] i_llvm_fpga_mem_lm1269_add223_out_lm1269_add_avm_enable;
    wire [0:0] i_llvm_fpga_mem_lm1269_add223_out_lm1269_add_avm_read;
    wire [0:0] i_llvm_fpga_mem_lm1269_add223_out_lm1269_add_avm_write;
    wire [63:0] i_llvm_fpga_mem_lm1269_add223_out_lm1269_add_avm_writedata;
    wire [31:0] i_llvm_fpga_mem_lm1269_add223_out_o_readdata;
    wire [0:0] i_llvm_fpga_mem_lm1269_add223_out_o_stall;
    wire [0:0] i_llvm_fpga_mem_lm1269_add223_out_o_valid;
    wire [63:0] i_llvm_fpga_mem_lm12810_add224_out_lm12810_add_avm_address;
    wire [0:0] i_llvm_fpga_mem_lm12810_add224_out_lm12810_add_avm_burstcount;
    wire [7:0] i_llvm_fpga_mem_lm12810_add224_out_lm12810_add_avm_byteenable;
    wire [0:0] i_llvm_fpga_mem_lm12810_add224_out_lm12810_add_avm_enable;
    wire [0:0] i_llvm_fpga_mem_lm12810_add224_out_lm12810_add_avm_read;
    wire [0:0] i_llvm_fpga_mem_lm12810_add224_out_lm12810_add_avm_write;
    wire [63:0] i_llvm_fpga_mem_lm12810_add224_out_lm12810_add_avm_writedata;
    wire [31:0] i_llvm_fpga_mem_lm12810_add224_out_o_readdata;
    wire [0:0] i_llvm_fpga_mem_lm12810_add224_out_o_stall;
    wire [0:0] i_llvm_fpga_mem_lm12810_add224_out_o_valid;
    wire [63:0] i_llvm_fpga_mem_lm13212_add275_out_lm13212_add_avm_address;
    wire [0:0] i_llvm_fpga_mem_lm13212_add275_out_lm13212_add_avm_burstcount;
    wire [7:0] i_llvm_fpga_mem_lm13212_add275_out_lm13212_add_avm_byteenable;
    wire [0:0] i_llvm_fpga_mem_lm13212_add275_out_lm13212_add_avm_enable;
    wire [0:0] i_llvm_fpga_mem_lm13212_add275_out_lm13212_add_avm_read;
    wire [0:0] i_llvm_fpga_mem_lm13212_add275_out_lm13212_add_avm_write;
    wire [63:0] i_llvm_fpga_mem_lm13212_add275_out_lm13212_add_avm_writedata;
    wire [31:0] i_llvm_fpga_mem_lm13212_add275_out_o_readdata;
    wire [0:0] i_llvm_fpga_mem_lm13212_add275_out_o_stall;
    wire [0:0] i_llvm_fpga_mem_lm13212_add275_out_o_valid;
    wire [63:0] i_llvm_fpga_mem_lm13413_add276_out_lm13413_add_avm_address;
    wire [0:0] i_llvm_fpga_mem_lm13413_add276_out_lm13413_add_avm_burstcount;
    wire [7:0] i_llvm_fpga_mem_lm13413_add276_out_lm13413_add_avm_byteenable;
    wire [0:0] i_llvm_fpga_mem_lm13413_add276_out_lm13413_add_avm_enable;
    wire [0:0] i_llvm_fpga_mem_lm13413_add276_out_lm13413_add_avm_read;
    wire [0:0] i_llvm_fpga_mem_lm13413_add276_out_lm13413_add_avm_write;
    wire [63:0] i_llvm_fpga_mem_lm13413_add276_out_lm13413_add_avm_writedata;
    wire [31:0] i_llvm_fpga_mem_lm13413_add276_out_o_readdata;
    wire [0:0] i_llvm_fpga_mem_lm13413_add276_out_o_stall;
    wire [0:0] i_llvm_fpga_mem_lm13413_add276_out_o_valid;
    wire [0:0] i_llvm_fpga_mem_memdep_16_add273_out_lsu_memdep_16_o_active;
    wire [63:0] i_llvm_fpga_mem_memdep_16_add273_out_memdep_16_add_avm_address;
    wire [0:0] i_llvm_fpga_mem_memdep_16_add273_out_memdep_16_add_avm_burstcount;
    wire [7:0] i_llvm_fpga_mem_memdep_16_add273_out_memdep_16_add_avm_byteenable;
    wire [0:0] i_llvm_fpga_mem_memdep_16_add273_out_memdep_16_add_avm_enable;
    wire [0:0] i_llvm_fpga_mem_memdep_16_add273_out_memdep_16_add_avm_read;
    wire [0:0] i_llvm_fpga_mem_memdep_16_add273_out_memdep_16_add_avm_write;
    wire [63:0] i_llvm_fpga_mem_memdep_16_add273_out_memdep_16_add_avm_writedata;
    wire [0:0] i_llvm_fpga_mem_memdep_16_add273_out_o_stall;
    wire [0:0] i_llvm_fpga_mem_memdep_16_add273_out_o_valid;
    wire [0:0] i_llvm_fpga_mem_memdep_16_add273_out_o_writeack;
    wire [63:0] i_llvm_fpga_mem_ml3211_add267_out_ml3211_add_avm_address;
    wire [0:0] i_llvm_fpga_mem_ml3211_add267_out_ml3211_add_avm_burstcount;
    wire [7:0] i_llvm_fpga_mem_ml3211_add267_out_ml3211_add_avm_byteenable;
    wire [0:0] i_llvm_fpga_mem_ml3211_add267_out_ml3211_add_avm_enable;
    wire [0:0] i_llvm_fpga_mem_ml3211_add267_out_ml3211_add_avm_read;
    wire [0:0] i_llvm_fpga_mem_ml3211_add267_out_ml3211_add_avm_write;
    wire [63:0] i_llvm_fpga_mem_ml3211_add267_out_ml3211_add_avm_writedata;
    wire [31:0] i_llvm_fpga_mem_ml3211_add267_out_o_readdata;
    wire [0:0] i_llvm_fpga_mem_ml3211_add267_out_o_stall;
    wire [0:0] i_llvm_fpga_mem_ml3211_add267_out_o_valid;
    wire [63:0] i_llvm_fpga_mem_ml358_add265_out_ml358_add_avm_address;
    wire [0:0] i_llvm_fpga_mem_ml358_add265_out_ml358_add_avm_burstcount;
    wire [7:0] i_llvm_fpga_mem_ml358_add265_out_ml358_add_avm_byteenable;
    wire [0:0] i_llvm_fpga_mem_ml358_add265_out_ml358_add_avm_enable;
    wire [0:0] i_llvm_fpga_mem_ml358_add265_out_ml358_add_avm_read;
    wire [0:0] i_llvm_fpga_mem_ml358_add265_out_ml358_add_avm_write;
    wire [63:0] i_llvm_fpga_mem_ml358_add265_out_ml358_add_avm_writedata;
    wire [31:0] i_llvm_fpga_mem_ml358_add265_out_o_readdata;
    wire [0:0] i_llvm_fpga_mem_ml358_add265_out_o_stall;
    wire [0:0] i_llvm_fpga_mem_ml358_add265_out_o_valid;
    wire [0:0] i_llvm_fpga_pipeline_keep_going126_add45_out_data_out;
    wire [0:0] i_llvm_fpga_pipeline_keep_going126_add45_out_exiting_stall_out;
    wire [0:0] i_llvm_fpga_pipeline_keep_going126_add45_out_exiting_valid_out;
    wire [0:0] i_llvm_fpga_pipeline_keep_going126_add45_out_initeration_stall_out;
    wire [0:0] i_llvm_fpga_pipeline_keep_going126_add45_out_not_exitcond_stall_out;
    wire [0:0] i_llvm_fpga_pipeline_keep_going126_add45_out_pipeline_valid_out;
    wire [0:0] i_llvm_fpga_pipeline_keep_going126_add45_out_stall_out;
    wire [0:0] i_llvm_fpga_pipeline_keep_going126_add45_out_valid_out;
    wire [16:0] i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out;
    wire [0:0] i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_feedback_stall_out_13;
    wire [0:0] i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_stall_out;
    wire [0:0] i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_valid_out;
    wire [16:0] i_llvm_fpga_pop_i17_initerations124_pop12_add46_out_data_out;
    wire [0:0] i_llvm_fpga_pop_i17_initerations124_pop12_add46_out_feedback_stall_out_12;
    wire [0:0] i_llvm_fpga_pop_i17_initerations124_pop12_add46_out_stall_out;
    wire [0:0] i_llvm_fpga_pop_i17_initerations124_pop12_add46_out_valid_out;
    wire [0:0] i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out;
    wire [0:0] i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_feedback_stall_out_9;
    wire [0:0] i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_stall_out;
    wire [0:0] i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_valid_out;
    wire [0:0] i_llvm_fpga_pop_i1_memdep_phi18_pop10_add51_out_data_out;
    wire [0:0] i_llvm_fpga_pop_i1_memdep_phi18_pop10_add51_out_feedback_stall_out_10;
    wire [0:0] i_llvm_fpga_pop_i1_memdep_phi18_pop10_add51_out_stall_out;
    wire [0:0] i_llvm_fpga_pop_i1_memdep_phi18_pop10_add51_out_valid_out;
    wire [0:0] i_llvm_fpga_pop_i1_memdep_phi19_pop11_add52_out_data_out;
    wire [0:0] i_llvm_fpga_pop_i1_memdep_phi19_pop11_add52_out_feedback_stall_out_11;
    wire [0:0] i_llvm_fpga_pop_i1_memdep_phi19_pop11_add52_out_stall_out;
    wire [0:0] i_llvm_fpga_pop_i1_memdep_phi19_pop11_add52_out_valid_out;
    wire [31:0] i_llvm_fpga_pop_i32_inc35145_pop14_add53_out_data_out;
    wire [0:0] i_llvm_fpga_pop_i32_inc35145_pop14_add53_out_feedback_stall_out_14;
    wire [0:0] i_llvm_fpga_pop_i32_inc35145_pop14_add53_out_stall_out;
    wire [0:0] i_llvm_fpga_pop_i32_inc35145_pop14_add53_out_valid_out;
    wire [31:0] i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out;
    wire [0:0] i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_feedback_stall_out_8;
    wire [0:0] i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_stall_out;
    wire [0:0] i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_valid_out;
    wire [31:0] i_llvm_fpga_pop_i32_pop6_add47_out_data_out;
    wire [0:0] i_llvm_fpga_pop_i32_pop6_add47_out_feedback_stall_out_6;
    wire [0:0] i_llvm_fpga_pop_i32_pop6_add47_out_stall_out;
    wire [0:0] i_llvm_fpga_pop_i32_pop6_add47_out_valid_out;
    wire [31:0] i_llvm_fpga_pop_i32_pop7_add48_out_data_out;
    wire [0:0] i_llvm_fpga_pop_i32_pop7_add48_out_feedback_stall_out_7;
    wire [0:0] i_llvm_fpga_pop_i32_pop7_add48_out_stall_out;
    wire [0:0] i_llvm_fpga_pop_i32_pop7_add48_out_valid_out;
    wire [31:0] i_llvm_fpga_push_i17_cleanups129_push13_add293_out_feedback_out_13;
    wire [0:0] i_llvm_fpga_push_i17_cleanups129_push13_add293_out_feedback_valid_out_13;
    wire [0:0] i_llvm_fpga_push_i17_cleanups129_push13_add293_out_stall_out;
    wire [0:0] i_llvm_fpga_push_i17_cleanups129_push13_add293_out_valid_out;
    wire [31:0] i_llvm_fpga_push_i17_initerations124_push12_add228_out_feedback_out_12;
    wire [0:0] i_llvm_fpga_push_i17_initerations124_push12_add228_out_feedback_valid_out_12;
    wire [0:0] i_llvm_fpga_push_i17_initerations124_push12_add228_out_stall_out;
    wire [0:0] i_llvm_fpga_push_i17_initerations124_push12_add228_out_valid_out;
    wire [0:0] i_llvm_fpga_push_i1_lastiniteration128_add244_out_feedback_out_4;
    wire [0:0] i_llvm_fpga_push_i1_lastiniteration128_add244_out_feedback_valid_out_4;
    wire [0:0] i_llvm_fpga_push_i1_lastiniteration128_add244_out_stall_out;
    wire [0:0] i_llvm_fpga_push_i1_lastiniteration128_add244_out_valid_out;
    wire [0:0] i_llvm_fpga_push_i1_memdep_phi17_push9_add274_out_feedback_out_9;
    wire [0:0] i_llvm_fpga_push_i1_memdep_phi17_push9_add274_out_feedback_valid_out_9;
    wire [0:0] i_llvm_fpga_push_i1_memdep_phi17_push9_add274_out_stall_out;
    wire [0:0] i_llvm_fpga_push_i1_memdep_phi17_push9_add274_out_valid_out;
    wire [0:0] i_llvm_fpga_push_i1_memdep_phi18_push10_add284_out_feedback_out_10;
    wire [0:0] i_llvm_fpga_push_i1_memdep_phi18_push10_add284_out_feedback_valid_out_10;
    wire [0:0] i_llvm_fpga_push_i1_memdep_phi18_push10_add284_out_stall_out;
    wire [0:0] i_llvm_fpga_push_i1_memdep_phi18_push10_add284_out_valid_out;
    wire [0:0] i_llvm_fpga_push_i1_memdep_phi19_push11_add285_out_feedback_out_11;
    wire [0:0] i_llvm_fpga_push_i1_memdep_phi19_push11_add285_out_feedback_valid_out_11;
    wire [0:0] i_llvm_fpga_push_i1_memdep_phi19_push11_add285_out_stall_out;
    wire [0:0] i_llvm_fpga_push_i1_memdep_phi19_push11_add285_out_valid_out;
    wire [0:0] i_llvm_fpga_push_i1_notexitcond136_add289_out_feedback_out_5;
    wire [0:0] i_llvm_fpga_push_i1_notexitcond136_add289_out_feedback_valid_out_5;
    wire [0:0] i_llvm_fpga_push_i1_notexitcond136_add289_out_stall_out;
    wire [0:0] i_llvm_fpga_push_i1_notexitcond136_add289_out_valid_out;
    wire [31:0] i_llvm_fpga_push_i32_inc35145_push14_add226_out_data_out;
    wire [31:0] i_llvm_fpga_push_i32_inc35145_push14_add226_out_feedback_out_14;
    wire [0:0] i_llvm_fpga_push_i32_inc35145_push14_add226_out_feedback_valid_out_14;
    wire [0:0] i_llvm_fpga_push_i32_inc35145_push14_add226_out_stall_out;
    wire [0:0] i_llvm_fpga_push_i32_inc35145_push14_add226_out_valid_out;
    wire [31:0] i_llvm_fpga_push_i32_j_0440_push8_add240_out_feedback_out_8;
    wire [0:0] i_llvm_fpga_push_i32_j_0440_push8_add240_out_feedback_valid_out_8;
    wire [0:0] i_llvm_fpga_push_i32_j_0440_push8_add240_out_stall_out;
    wire [0:0] i_llvm_fpga_push_i32_j_0440_push8_add240_out_valid_out;
    wire [31:0] i_llvm_fpga_push_i32_push6_add280_out_feedback_out_6;
    wire [0:0] i_llvm_fpga_push_i32_push6_add280_out_feedback_valid_out_6;
    wire [0:0] i_llvm_fpga_push_i32_push6_add280_out_stall_out;
    wire [0:0] i_llvm_fpga_push_i32_push6_add280_out_valid_out;
    wire [31:0] i_llvm_fpga_push_i32_push7_add277_out_feedback_out_7;
    wire [0:0] i_llvm_fpga_push_i32_push7_add277_out_feedback_valid_out_7;
    wire [0:0] i_llvm_fpga_push_i32_push7_add277_out_stall_out;
    wire [0:0] i_llvm_fpga_push_i32_push7_add277_out_valid_out;
    wire [0:0] i_masked135_add291_qi;
    reg [0:0] i_masked135_add291_q;
    wire [0:0] i_memdep_phi19_or_add225_q;
    wire [0:0] i_next_cleanups134_add292_s;
    reg [16:0] i_next_cleanups134_add292_q;
    wire [16:0] i_next_initerations125_add56_vt_join_q;
    wire [15:0] i_next_initerations125_add56_vt_select_15_b;
    wire [0:0] i_notcmp123_add288_q;
    wire [0:0] i_or133_add290_qi;
    reg [0:0] i_or133_add290_q;
    wire [0:0] i_or_cond432_add251_qi;
    reg [0:0] i_or_cond432_add251_q;
    wire [0:0] i_or_cond433_add252_qi;
    reg [0:0] i_or_cond433_add252_q;
    wire [0:0] i_or_cond434_add255_q;
    wire [0:0] i_or_cond435_add256_q;
    wire [0:0] i_or_cond436_add238_q;
    wire [0:0] i_or_cond437_add239_q;
    wire [0:0] i_or_cond437_not_add249_q;
    wire [0:0] i_pred_sel29_add259_q;
    wire [0:0] i_replace_phi96_add58_s;
    reg [31:0] i_replace_phi96_add58_q;
    wire [0:0] i_replace_phi99_add57_s;
    reg [31:0] i_replace_phi99_add57_q;
    wire [30:0] i_shr_i_i1_add60_vt_const_31_q;
    wire [31:0] i_shr_i_i1_add60_vt_join_q;
    wire [0:0] i_shr_i_i1_add60_vt_select_0_b;
    wire [32:0] i_sub4_i_10_i63_add114_a;
    wire [32:0] i_sub4_i_10_i63_add114_b;
    logic [32:0] i_sub4_i_10_i63_add114_o;
    wire [32:0] i_sub4_i_10_i63_add114_q;
    wire [32:0] i_sub4_i_11_i69_add119_a;
    wire [32:0] i_sub4_i_11_i69_add119_b;
    logic [32:0] i_sub4_i_11_i69_add119_o;
    wire [32:0] i_sub4_i_11_i69_add119_q;
    wire [32:0] i_sub4_i_12_i75_add124_a;
    wire [32:0] i_sub4_i_12_i75_add124_b;
    logic [32:0] i_sub4_i_12_i75_add124_o;
    wire [32:0] i_sub4_i_12_i75_add124_q;
    wire [32:0] i_sub4_i_13_i81_add129_a;
    wire [32:0] i_sub4_i_13_i81_add129_b;
    logic [32:0] i_sub4_i_13_i81_add129_o;
    wire [32:0] i_sub4_i_13_i81_add129_q;
    wire [32:0] i_sub4_i_14_i87_add134_a;
    wire [32:0] i_sub4_i_14_i87_add134_b;
    logic [32:0] i_sub4_i_14_i87_add134_o;
    wire [32:0] i_sub4_i_14_i87_add134_q;
    wire [32:0] i_sub4_i_15_i93_add139_a;
    wire [32:0] i_sub4_i_15_i93_add139_b;
    logic [32:0] i_sub4_i_15_i93_add139_o;
    wire [32:0] i_sub4_i_15_i93_add139_q;
    wire [32:0] i_sub4_i_16_i99_add144_a;
    wire [32:0] i_sub4_i_16_i99_add144_b;
    logic [32:0] i_sub4_i_16_i99_add144_o;
    wire [32:0] i_sub4_i_16_i99_add144_q;
    wire [32:0] i_sub4_i_17_i105_add149_a;
    wire [32:0] i_sub4_i_17_i105_add149_b;
    logic [32:0] i_sub4_i_17_i105_add149_o;
    wire [32:0] i_sub4_i_17_i105_add149_q;
    wire [32:0] i_sub4_i_18_i111_add154_a;
    wire [32:0] i_sub4_i_18_i111_add154_b;
    logic [32:0] i_sub4_i_18_i111_add154_o;
    wire [32:0] i_sub4_i_18_i111_add154_q;
    wire [32:0] i_sub4_i_19_i117_add159_a;
    wire [32:0] i_sub4_i_19_i117_add159_b;
    logic [32:0] i_sub4_i_19_i117_add159_o;
    wire [32:0] i_sub4_i_19_i117_add159_q;
    wire [32:0] i_sub4_i_1_i9_add69_a;
    wire [32:0] i_sub4_i_1_i9_add69_b;
    logic [32:0] i_sub4_i_1_i9_add69_o;
    wire [32:0] i_sub4_i_1_i9_add69_q;
    wire [32:0] i_sub4_i_20_i123_add164_a;
    wire [32:0] i_sub4_i_20_i123_add164_b;
    logic [32:0] i_sub4_i_20_i123_add164_o;
    wire [32:0] i_sub4_i_20_i123_add164_q;
    wire [32:0] i_sub4_i_21_i129_add169_a;
    wire [32:0] i_sub4_i_21_i129_add169_b;
    logic [32:0] i_sub4_i_21_i129_add169_o;
    wire [32:0] i_sub4_i_21_i129_add169_q;
    wire [32:0] i_sub4_i_22_i135_add174_a;
    wire [32:0] i_sub4_i_22_i135_add174_b;
    logic [32:0] i_sub4_i_22_i135_add174_o;
    wire [32:0] i_sub4_i_22_i135_add174_q;
    wire [32:0] i_sub4_i_23_i141_add179_a;
    wire [32:0] i_sub4_i_23_i141_add179_b;
    logic [32:0] i_sub4_i_23_i141_add179_o;
    wire [32:0] i_sub4_i_23_i141_add179_q;
    wire [32:0] i_sub4_i_24_i147_add184_a;
    wire [32:0] i_sub4_i_24_i147_add184_b;
    logic [32:0] i_sub4_i_24_i147_add184_o;
    wire [32:0] i_sub4_i_24_i147_add184_q;
    wire [32:0] i_sub4_i_25_i153_add189_a;
    wire [32:0] i_sub4_i_25_i153_add189_b;
    logic [32:0] i_sub4_i_25_i153_add189_o;
    wire [32:0] i_sub4_i_25_i153_add189_q;
    wire [32:0] i_sub4_i_26_i159_add194_a;
    wire [32:0] i_sub4_i_26_i159_add194_b;
    logic [32:0] i_sub4_i_26_i159_add194_o;
    wire [32:0] i_sub4_i_26_i159_add194_q;
    wire [32:0] i_sub4_i_27_i165_add199_a;
    wire [32:0] i_sub4_i_27_i165_add199_b;
    logic [32:0] i_sub4_i_27_i165_add199_o;
    wire [32:0] i_sub4_i_27_i165_add199_q;
    wire [32:0] i_sub4_i_28_i171_add204_a;
    wire [32:0] i_sub4_i_28_i171_add204_b;
    logic [32:0] i_sub4_i_28_i171_add204_o;
    wire [32:0] i_sub4_i_28_i171_add204_q;
    wire [32:0] i_sub4_i_29_i177_add209_a;
    wire [32:0] i_sub4_i_29_i177_add209_b;
    logic [32:0] i_sub4_i_29_i177_add209_o;
    wire [32:0] i_sub4_i_29_i177_add209_q;
    wire [32:0] i_sub4_i_2_i15_add74_a;
    wire [32:0] i_sub4_i_2_i15_add74_b;
    logic [32:0] i_sub4_i_2_i15_add74_o;
    wire [32:0] i_sub4_i_2_i15_add74_q;
    wire [32:0] i_sub4_i_30_i183_add214_a;
    wire [32:0] i_sub4_i_30_i183_add214_b;
    logic [32:0] i_sub4_i_30_i183_add214_o;
    wire [32:0] i_sub4_i_30_i183_add214_q;
    wire [32:0] i_sub4_i_31_i189_add219_a;
    wire [32:0] i_sub4_i_31_i189_add219_b;
    logic [32:0] i_sub4_i_31_i189_add219_o;
    wire [32:0] i_sub4_i_31_i189_add219_q;
    wire [32:0] i_sub4_i_3_i21_add79_a;
    wire [32:0] i_sub4_i_3_i21_add79_b;
    logic [32:0] i_sub4_i_3_i21_add79_o;
    wire [32:0] i_sub4_i_3_i21_add79_q;
    wire [32:0] i_sub4_i_4_i27_add84_a;
    wire [32:0] i_sub4_i_4_i27_add84_b;
    logic [32:0] i_sub4_i_4_i27_add84_o;
    wire [32:0] i_sub4_i_4_i27_add84_q;
    wire [32:0] i_sub4_i_5_i33_add89_a;
    wire [32:0] i_sub4_i_5_i33_add89_b;
    logic [32:0] i_sub4_i_5_i33_add89_o;
    wire [32:0] i_sub4_i_5_i33_add89_q;
    wire [32:0] i_sub4_i_6_i39_add94_a;
    wire [32:0] i_sub4_i_6_i39_add94_b;
    logic [32:0] i_sub4_i_6_i39_add94_o;
    wire [32:0] i_sub4_i_6_i39_add94_q;
    wire [32:0] i_sub4_i_7_i45_add99_a;
    wire [32:0] i_sub4_i_7_i45_add99_b;
    logic [32:0] i_sub4_i_7_i45_add99_o;
    wire [32:0] i_sub4_i_7_i45_add99_q;
    wire [32:0] i_sub4_i_8_i51_add104_a;
    wire [32:0] i_sub4_i_8_i51_add104_b;
    logic [32:0] i_sub4_i_8_i51_add104_o;
    wire [32:0] i_sub4_i_8_i51_add104_q;
    wire [32:0] i_sub4_i_9_i57_add109_a;
    wire [32:0] i_sub4_i_9_i57_add109_b;
    logic [32:0] i_sub4_i_9_i57_add109_o;
    wire [32:0] i_sub4_i_9_i57_add109_q;
    wire [32:0] i_sub4_i_i3_add63_a;
    wire [32:0] i_sub4_i_i3_add63_b;
    logic [32:0] i_sub4_i_i3_add63_o;
    wire [32:0] i_sub4_i_i3_add63_q;
    wire [0:0] i_unnamed_add103_s;
    reg [31:0] i_unnamed_add103_q;
    wire [0:0] i_unnamed_add108_s;
    reg [31:0] i_unnamed_add108_q;
    wire [0:0] i_unnamed_add113_s;
    reg [31:0] i_unnamed_add113_q;
    wire [0:0] i_unnamed_add118_s;
    reg [31:0] i_unnamed_add118_q;
    wire [0:0] i_unnamed_add123_s;
    reg [31:0] i_unnamed_add123_q;
    wire [0:0] i_unnamed_add128_s;
    reg [31:0] i_unnamed_add128_q;
    wire [0:0] i_unnamed_add133_s;
    reg [31:0] i_unnamed_add133_q;
    wire [0:0] i_unnamed_add138_s;
    reg [31:0] i_unnamed_add138_q;
    wire [0:0] i_unnamed_add143_s;
    reg [31:0] i_unnamed_add143_q;
    wire [0:0] i_unnamed_add148_s;
    reg [31:0] i_unnamed_add148_q;
    wire [0:0] i_unnamed_add153_s;
    reg [31:0] i_unnamed_add153_q;
    wire [0:0] i_unnamed_add158_s;
    reg [31:0] i_unnamed_add158_q;
    wire [0:0] i_unnamed_add163_s;
    reg [31:0] i_unnamed_add163_q;
    wire [0:0] i_unnamed_add168_s;
    reg [31:0] i_unnamed_add168_q;
    wire [0:0] i_unnamed_add173_s;
    reg [31:0] i_unnamed_add173_q;
    wire [0:0] i_unnamed_add178_s;
    reg [31:0] i_unnamed_add178_q;
    wire [0:0] i_unnamed_add183_s;
    reg [31:0] i_unnamed_add183_q;
    wire [0:0] i_unnamed_add188_s;
    reg [31:0] i_unnamed_add188_q;
    wire [0:0] i_unnamed_add193_s;
    reg [31:0] i_unnamed_add193_q;
    wire [0:0] i_unnamed_add198_s;
    reg [31:0] i_unnamed_add198_q;
    wire [0:0] i_unnamed_add203_s;
    reg [31:0] i_unnamed_add203_q;
    wire [0:0] i_unnamed_add208_s;
    reg [31:0] i_unnamed_add208_q;
    wire [0:0] i_unnamed_add213_s;
    reg [31:0] i_unnamed_add213_q;
    wire [0:0] i_unnamed_add218_s;
    reg [31:0] i_unnamed_add218_q;
    wire [0:0] i_unnamed_add231_s;
    reg [31:0] i_unnamed_add231_q;
    wire [0:0] i_unnamed_add242_s;
    reg [31:0] i_unnamed_add242_q;
    wire [0:0] i_unnamed_add254_qi;
    reg [0:0] i_unnamed_add254_q;
    wire [0:0] i_unnamed_add258_s;
    reg [0:0] i_unnamed_add258_q;
    wire [0:0] i_unnamed_add261_s;
    reg [0:0] i_unnamed_add261_q;
    wire [0:0] i_unnamed_add263_qi;
    reg [0:0] i_unnamed_add263_q;
    wire [0:0] i_unnamed_add282_s;
    reg [31:0] i_unnamed_add282_q;
    wire [0:0] i_unnamed_add287_q;
    wire [0:0] i_unnamed_add62_s;
    reg [31:0] i_unnamed_add62_q;
    wire [0:0] i_unnamed_add68_s;
    reg [31:0] i_unnamed_add68_q;
    wire [0:0] i_unnamed_add73_s;
    reg [31:0] i_unnamed_add73_q;
    wire [0:0] i_unnamed_add78_s;
    reg [31:0] i_unnamed_add78_q;
    wire [0:0] i_unnamed_add83_s;
    reg [31:0] i_unnamed_add83_q;
    wire [0:0] i_unnamed_add88_s;
    reg [31:0] i_unnamed_add88_q;
    wire [0:0] i_unnamed_add93_s;
    reg [31:0] i_unnamed_add93_q;
    wire [0:0] i_unnamed_add98_s;
    reg [31:0] i_unnamed_add98_q;
    wire [35:0] i_arrayidx17_i104_add0_mult_x_sums_align_0_q;
    wire [35:0] i_arrayidx17_i104_add0_mult_x_sums_align_0_qint;
    wire [67:0] i_arrayidx17_i104_add0_mult_x_sums_join_1_q;
    wire [49:0] i_arrayidx17_i104_add0_mult_x_sums_align_2_q;
    wire [49:0] i_arrayidx17_i104_add0_mult_x_sums_align_2_qint;
    wire [27:0] i_arrayidx17_i104_add0_mult_x_sums_align_3_q;
    wire [27:0] i_arrayidx17_i104_add0_mult_x_sums_align_3_qint;
    wire [77:0] i_arrayidx17_i104_add0_mult_x_sums_join_4_q;
    wire [78:0] i_arrayidx17_i104_add0_mult_x_sums_result_add_0_0_a;
    wire [78:0] i_arrayidx17_i104_add0_mult_x_sums_result_add_0_0_b;
    logic [78:0] i_arrayidx17_i104_add0_mult_x_sums_result_add_0_0_o;
    wire [78:0] i_arrayidx17_i104_add0_mult_x_sums_result_add_0_0_q;
    wire [35:0] i_arrayidx17_i159_add0_mult_x_sums_align_0_q;
    wire [35:0] i_arrayidx17_i159_add0_mult_x_sums_align_0_qint;
    wire [67:0] i_arrayidx17_i159_add0_mult_x_sums_join_1_q;
    wire [49:0] i_arrayidx17_i159_add0_mult_x_sums_align_2_q;
    wire [49:0] i_arrayidx17_i159_add0_mult_x_sums_align_2_qint;
    wire [27:0] i_arrayidx17_i159_add0_mult_x_sums_align_3_q;
    wire [27:0] i_arrayidx17_i159_add0_mult_x_sums_align_3_qint;
    wire [77:0] i_arrayidx17_i159_add0_mult_x_sums_join_4_q;
    wire [78:0] i_arrayidx17_i159_add0_mult_x_sums_result_add_0_0_a;
    wire [78:0] i_arrayidx17_i159_add0_mult_x_sums_result_add_0_0_b;
    logic [78:0] i_arrayidx17_i159_add0_mult_x_sums_result_add_0_0_o;
    wire [78:0] i_arrayidx17_i159_add0_mult_x_sums_result_add_0_0_q;
    wire [35:0] i_arrayidx17_i_add0_mult_x_sums_align_0_q;
    wire [35:0] i_arrayidx17_i_add0_mult_x_sums_align_0_qint;
    wire [67:0] i_arrayidx17_i_add0_mult_x_sums_join_1_q;
    wire [49:0] i_arrayidx17_i_add0_mult_x_sums_align_2_q;
    wire [49:0] i_arrayidx17_i_add0_mult_x_sums_align_2_qint;
    wire [27:0] i_arrayidx17_i_add0_mult_x_sums_align_3_q;
    wire [27:0] i_arrayidx17_i_add0_mult_x_sums_align_3_qint;
    wire [77:0] i_arrayidx17_i_add0_mult_x_sums_join_4_q;
    wire [78:0] i_arrayidx17_i_add0_mult_x_sums_result_add_0_0_a;
    wire [78:0] i_arrayidx17_i_add0_mult_x_sums_result_add_0_0_b;
    logic [78:0] i_arrayidx17_i_add0_mult_x_sums_result_add_0_0_o;
    wire [78:0] i_arrayidx17_i_add0_mult_x_sums_result_add_0_0_q;
    wire [17:0] i_arrayidx5_i132_add0_mult_x_bs1_in;
    wire [17:0] i_arrayidx5_i132_add0_mult_x_bs1_b;
    wire [35:0] i_arrayidx5_i132_add0_mult_x_bs4_in;
    wire [17:0] i_arrayidx5_i132_add0_mult_x_bs4_b;
    wire [53:0] i_arrayidx5_i132_add0_mult_x_bs7_in;
    wire [17:0] i_arrayidx5_i132_add0_mult_x_bs7_b;
    wire [9:0] i_arrayidx5_i132_add0_mult_x_bs10_b;
    wire [35:0] i_arrayidx5_i132_add0_mult_x_sums_align_0_q;
    wire [35:0] i_arrayidx5_i132_add0_mult_x_sums_align_0_qint;
    wire [67:0] i_arrayidx5_i132_add0_mult_x_sums_join_1_q;
    wire [49:0] i_arrayidx5_i132_add0_mult_x_sums_align_2_q;
    wire [49:0] i_arrayidx5_i132_add0_mult_x_sums_align_2_qint;
    wire [27:0] i_arrayidx5_i132_add0_mult_x_sums_align_3_q;
    wire [27:0] i_arrayidx5_i132_add0_mult_x_sums_align_3_qint;
    wire [77:0] i_arrayidx5_i132_add0_mult_x_sums_join_4_q;
    wire [78:0] i_arrayidx5_i132_add0_mult_x_sums_result_add_0_0_a;
    wire [78:0] i_arrayidx5_i132_add0_mult_x_sums_result_add_0_0_b;
    logic [78:0] i_arrayidx5_i132_add0_mult_x_sums_result_add_0_0_o;
    wire [78:0] i_arrayidx5_i132_add0_mult_x_sums_result_add_0_0_q;
    wire [17:0] i_arrayidx5_i93_add0_mult_x_bs1_in;
    wire [17:0] i_arrayidx5_i93_add0_mult_x_bs1_b;
    wire [35:0] i_arrayidx5_i93_add0_mult_x_bs4_in;
    wire [17:0] i_arrayidx5_i93_add0_mult_x_bs4_b;
    wire [53:0] i_arrayidx5_i93_add0_mult_x_bs7_in;
    wire [17:0] i_arrayidx5_i93_add0_mult_x_bs7_b;
    wire [9:0] i_arrayidx5_i93_add0_mult_x_bs10_b;
    wire [35:0] i_arrayidx5_i93_add0_mult_x_sums_align_0_q;
    wire [35:0] i_arrayidx5_i93_add0_mult_x_sums_align_0_qint;
    wire [67:0] i_arrayidx5_i93_add0_mult_x_sums_join_1_q;
    wire [49:0] i_arrayidx5_i93_add0_mult_x_sums_align_2_q;
    wire [49:0] i_arrayidx5_i93_add0_mult_x_sums_align_2_qint;
    wire [27:0] i_arrayidx5_i93_add0_mult_x_sums_align_3_q;
    wire [27:0] i_arrayidx5_i93_add0_mult_x_sums_align_3_qint;
    wire [77:0] i_arrayidx5_i93_add0_mult_x_sums_join_4_q;
    wire [78:0] i_arrayidx5_i93_add0_mult_x_sums_result_add_0_0_a;
    wire [78:0] i_arrayidx5_i93_add0_mult_x_sums_result_add_0_0_b;
    logic [78:0] i_arrayidx5_i93_add0_mult_x_sums_result_add_0_0_o;
    wire [78:0] i_arrayidx5_i93_add0_mult_x_sums_result_add_0_0_q;
    wire [35:0] i_arrayidx5_i_add0_mult_x_sums_align_0_q;
    wire [35:0] i_arrayidx5_i_add0_mult_x_sums_align_0_qint;
    wire [67:0] i_arrayidx5_i_add0_mult_x_sums_join_1_q;
    wire [49:0] i_arrayidx5_i_add0_mult_x_sums_align_2_q;
    wire [49:0] i_arrayidx5_i_add0_mult_x_sums_align_2_qint;
    wire [27:0] i_arrayidx5_i_add0_mult_x_sums_align_3_q;
    wire [27:0] i_arrayidx5_i_add0_mult_x_sums_align_3_qint;
    wire [77:0] i_arrayidx5_i_add0_mult_x_sums_join_4_q;
    wire [78:0] i_arrayidx5_i_add0_mult_x_sums_result_add_0_0_a;
    wire [78:0] i_arrayidx5_i_add0_mult_x_sums_result_add_0_0_b;
    logic [78:0] i_arrayidx5_i_add0_mult_x_sums_result_add_0_0_o;
    wire [78:0] i_arrayidx5_i_add0_mult_x_sums_result_add_0_0_q;
    wire [15:0] leftShiftStage0Idx1Rng1_uid902_i_cleanups_shl130_add0_shift_x_in;
    wire [15:0] leftShiftStage0Idx1Rng1_uid902_i_cleanups_shl130_add0_shift_x_b;
    wire [16:0] leftShiftStage0Idx1_uid903_i_cleanups_shl130_add0_shift_x_q;
    wire [0:0] leftShiftStage0_uid905_i_cleanups_shl130_add0_shift_x_s;
    reg [16:0] leftShiftStage0_uid905_i_cleanups_shl130_add0_shift_x_q;
    wire [15:0] rightShiftStage0Idx1Rng1_uid909_i_next_initerations125_add0_shift_x_b;
    wire [16:0] rightShiftStage0Idx1_uid911_i_next_initerations125_add0_shift_x_q;
    wire [0:0] rightShiftStage0_uid913_i_next_initerations125_add0_shift_x_s;
    reg [16:0] rightShiftStage0_uid913_i_next_initerations125_add0_shift_x_q;
    wire [30:0] rightShiftStage0Idx1Rng1_uid917_i_shr_i_i1_add0_shift_x_b;
    wire [31:0] rightShiftStage0Idx1_uid919_i_shr_i_i1_add0_shift_x_q;
    wire [0:0] rightShiftStage0_uid921_i_shr_i_i1_add0_shift_x_s;
    reg [31:0] rightShiftStage0_uid921_i_shr_i_i1_add0_shift_x_q;
    wire [29:0] rightShiftStage1Idx1Rng2_uid922_i_shr_i_i1_add0_shift_x_b;
    wire [31:0] rightShiftStage1Idx1_uid924_i_shr_i_i1_add0_shift_x_q;
    wire [0:0] rightShiftStage1_uid926_i_shr_i_i1_add0_shift_x_s;
    reg [31:0] rightShiftStage1_uid926_i_shr_i_i1_add0_shift_x_q;
    wire [27:0] rightShiftStage2Idx1Rng4_uid927_i_shr_i_i1_add0_shift_x_b;
    wire [3:0] rightShiftStage2Idx1Pad4_uid928_i_shr_i_i1_add0_shift_x_q;
    wire [31:0] rightShiftStage2Idx1_uid929_i_shr_i_i1_add0_shift_x_q;
    wire [0:0] rightShiftStage2_uid931_i_shr_i_i1_add0_shift_x_s;
    reg [31:0] rightShiftStage2_uid931_i_shr_i_i1_add0_shift_x_q;
    wire [23:0] rightShiftStage3Idx1Rng8_uid932_i_shr_i_i1_add0_shift_x_b;
    wire [7:0] rightShiftStage3Idx1Pad8_uid933_i_shr_i_i1_add0_shift_x_q;
    wire [31:0] rightShiftStage3Idx1_uid934_i_shr_i_i1_add0_shift_x_q;
    wire [0:0] rightShiftStage3_uid936_i_shr_i_i1_add0_shift_x_s;
    reg [31:0] rightShiftStage3_uid936_i_shr_i_i1_add0_shift_x_q;
    wire [15:0] rightShiftStage4Idx1Rng16_uid937_i_shr_i_i1_add0_shift_x_b;
    wire [15:0] rightShiftStage4Idx1Pad16_uid938_i_shr_i_i1_add0_shift_x_q;
    wire [31:0] rightShiftStage4Idx1_uid939_i_shr_i_i1_add0_shift_x_q;
    wire [0:0] rightShiftStage4_uid941_i_shr_i_i1_add0_shift_x_s;
    reg [31:0] rightShiftStage4_uid941_i_shr_i_i1_add0_shift_x_q;
    wire [18:0] lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_a;
    wire [18:0] lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_b;
    logic [18:0] lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_o;
    wire [18:0] lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_q;
    wire [19:0] lev1_a0_uid953_i_arrayidx17_i104_add0_mult_x_im0_q;
    wire [11:0] sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q;
    wire [31:0] sR_mergedSignalTM_uid958_i_arrayidx17_i104_add0_mult_x_im0_q;
    wire [18:0] lev1_a0sumAHighB_uid1014_i_arrayidx17_i104_add0_mult_x_im3_a;
    wire [18:0] lev1_a0sumAHighB_uid1014_i_arrayidx17_i104_add0_mult_x_im3_b;
    logic [18:0] lev1_a0sumAHighB_uid1014_i_arrayidx17_i104_add0_mult_x_im3_o;
    wire [18:0] lev1_a0sumAHighB_uid1014_i_arrayidx17_i104_add0_mult_x_im3_q;
    wire [19:0] lev1_a0_uid1015_i_arrayidx17_i104_add0_mult_x_im3_q;
    wire [31:0] sR_mergedSignalTM_uid1020_i_arrayidx17_i104_add0_mult_x_im3_q;
    wire [18:0] lev1_a0sumAHighB_uid1076_i_arrayidx17_i104_add0_mult_x_im6_a;
    wire [18:0] lev1_a0sumAHighB_uid1076_i_arrayidx17_i104_add0_mult_x_im6_b;
    logic [18:0] lev1_a0sumAHighB_uid1076_i_arrayidx17_i104_add0_mult_x_im6_o;
    wire [18:0] lev1_a0sumAHighB_uid1076_i_arrayidx17_i104_add0_mult_x_im6_q;
    wire [19:0] lev1_a0_uid1077_i_arrayidx17_i104_add0_mult_x_im6_q;
    wire [31:0] sR_mergedSignalTM_uid1082_i_arrayidx17_i104_add0_mult_x_im6_q;
    wire [10:0] lev1_a0sumAHighB_uid1138_i_arrayidx17_i104_add0_mult_x_im9_a;
    wire [10:0] lev1_a0sumAHighB_uid1138_i_arrayidx17_i104_add0_mult_x_im9_b;
    logic [10:0] lev1_a0sumAHighB_uid1138_i_arrayidx17_i104_add0_mult_x_im9_o;
    wire [10:0] lev1_a0sumAHighB_uid1138_i_arrayidx17_i104_add0_mult_x_im9_q;
    wire [11:0] lev1_a0_uid1139_i_arrayidx17_i104_add0_mult_x_im9_q;
    wire [23:0] sR_mergedSignalTM_uid1144_i_arrayidx17_i104_add0_mult_x_im9_q;
    wire [18:0] lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_a;
    wire [18:0] lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_b;
    logic [18:0] lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_o;
    wire [18:0] lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_q;
    wire [19:0] lev1_a0_uid1189_i_arrayidx17_i159_add0_mult_x_im0_q;
    wire [31:0] sR_mergedSignalTM_uid1194_i_arrayidx17_i159_add0_mult_x_im0_q;
    wire [18:0] lev1_a0sumAHighB_uid1250_i_arrayidx17_i159_add0_mult_x_im3_a;
    wire [18:0] lev1_a0sumAHighB_uid1250_i_arrayidx17_i159_add0_mult_x_im3_b;
    logic [18:0] lev1_a0sumAHighB_uid1250_i_arrayidx17_i159_add0_mult_x_im3_o;
    wire [18:0] lev1_a0sumAHighB_uid1250_i_arrayidx17_i159_add0_mult_x_im3_q;
    wire [19:0] lev1_a0_uid1251_i_arrayidx17_i159_add0_mult_x_im3_q;
    wire [31:0] sR_mergedSignalTM_uid1256_i_arrayidx17_i159_add0_mult_x_im3_q;
    wire [18:0] lev1_a0sumAHighB_uid1312_i_arrayidx17_i159_add0_mult_x_im6_a;
    wire [18:0] lev1_a0sumAHighB_uid1312_i_arrayidx17_i159_add0_mult_x_im6_b;
    logic [18:0] lev1_a0sumAHighB_uid1312_i_arrayidx17_i159_add0_mult_x_im6_o;
    wire [18:0] lev1_a0sumAHighB_uid1312_i_arrayidx17_i159_add0_mult_x_im6_q;
    wire [19:0] lev1_a0_uid1313_i_arrayidx17_i159_add0_mult_x_im6_q;
    wire [31:0] sR_mergedSignalTM_uid1318_i_arrayidx17_i159_add0_mult_x_im6_q;
    wire [10:0] lev1_a0sumAHighB_uid1374_i_arrayidx17_i159_add0_mult_x_im9_a;
    wire [10:0] lev1_a0sumAHighB_uid1374_i_arrayidx17_i159_add0_mult_x_im9_b;
    logic [10:0] lev1_a0sumAHighB_uid1374_i_arrayidx17_i159_add0_mult_x_im9_o;
    wire [10:0] lev1_a0sumAHighB_uid1374_i_arrayidx17_i159_add0_mult_x_im9_q;
    wire [11:0] lev1_a0_uid1375_i_arrayidx17_i159_add0_mult_x_im9_q;
    wire [23:0] sR_mergedSignalTM_uid1380_i_arrayidx17_i159_add0_mult_x_im9_q;
    wire [18:0] lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_a;
    wire [18:0] lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_b;
    logic [18:0] lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_o;
    wire [18:0] lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_q;
    wire [19:0] lev1_a0_uid1425_i_arrayidx17_i_add0_mult_x_im0_q;
    wire [31:0] sR_mergedSignalTM_uid1430_i_arrayidx17_i_add0_mult_x_im0_q;
    wire [18:0] lev1_a0sumAHighB_uid1486_i_arrayidx17_i_add0_mult_x_im3_a;
    wire [18:0] lev1_a0sumAHighB_uid1486_i_arrayidx17_i_add0_mult_x_im3_b;
    logic [18:0] lev1_a0sumAHighB_uid1486_i_arrayidx17_i_add0_mult_x_im3_o;
    wire [18:0] lev1_a0sumAHighB_uid1486_i_arrayidx17_i_add0_mult_x_im3_q;
    wire [19:0] lev1_a0_uid1487_i_arrayidx17_i_add0_mult_x_im3_q;
    wire [31:0] sR_mergedSignalTM_uid1492_i_arrayidx17_i_add0_mult_x_im3_q;
    wire [18:0] lev1_a0sumAHighB_uid1548_i_arrayidx17_i_add0_mult_x_im6_a;
    wire [18:0] lev1_a0sumAHighB_uid1548_i_arrayidx17_i_add0_mult_x_im6_b;
    logic [18:0] lev1_a0sumAHighB_uid1548_i_arrayidx17_i_add0_mult_x_im6_o;
    wire [18:0] lev1_a0sumAHighB_uid1548_i_arrayidx17_i_add0_mult_x_im6_q;
    wire [19:0] lev1_a0_uid1549_i_arrayidx17_i_add0_mult_x_im6_q;
    wire [31:0] sR_mergedSignalTM_uid1554_i_arrayidx17_i_add0_mult_x_im6_q;
    wire [10:0] lev1_a0sumAHighB_uid1610_i_arrayidx17_i_add0_mult_x_im9_a;
    wire [10:0] lev1_a0sumAHighB_uid1610_i_arrayidx17_i_add0_mult_x_im9_b;
    logic [10:0] lev1_a0sumAHighB_uid1610_i_arrayidx17_i_add0_mult_x_im9_o;
    wire [10:0] lev1_a0sumAHighB_uid1610_i_arrayidx17_i_add0_mult_x_im9_q;
    wire [11:0] lev1_a0_uid1611_i_arrayidx17_i_add0_mult_x_im9_q;
    wire [23:0] sR_mergedSignalTM_uid1616_i_arrayidx17_i_add0_mult_x_im9_q;
    wire [18:0] lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_a;
    wire [18:0] lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_b;
    logic [18:0] lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_o;
    wire [18:0] lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_q;
    wire [19:0] lev1_a0_uid1661_i_arrayidx5_i132_add0_mult_x_im0_q;
    wire [31:0] sR_mergedSignalTM_uid1666_i_arrayidx5_i132_add0_mult_x_im0_q;
    wire [18:0] lev1_a0sumAHighB_uid1722_i_arrayidx5_i132_add0_mult_x_im3_a;
    wire [18:0] lev1_a0sumAHighB_uid1722_i_arrayidx5_i132_add0_mult_x_im3_b;
    logic [18:0] lev1_a0sumAHighB_uid1722_i_arrayidx5_i132_add0_mult_x_im3_o;
    wire [18:0] lev1_a0sumAHighB_uid1722_i_arrayidx5_i132_add0_mult_x_im3_q;
    wire [19:0] lev1_a0_uid1723_i_arrayidx5_i132_add0_mult_x_im3_q;
    wire [31:0] sR_mergedSignalTM_uid1728_i_arrayidx5_i132_add0_mult_x_im3_q;
    wire [18:0] lev1_a0sumAHighB_uid1784_i_arrayidx5_i132_add0_mult_x_im6_a;
    wire [18:0] lev1_a0sumAHighB_uid1784_i_arrayidx5_i132_add0_mult_x_im6_b;
    logic [18:0] lev1_a0sumAHighB_uid1784_i_arrayidx5_i132_add0_mult_x_im6_o;
    wire [18:0] lev1_a0sumAHighB_uid1784_i_arrayidx5_i132_add0_mult_x_im6_q;
    wire [19:0] lev1_a0_uid1785_i_arrayidx5_i132_add0_mult_x_im6_q;
    wire [31:0] sR_mergedSignalTM_uid1790_i_arrayidx5_i132_add0_mult_x_im6_q;
    wire [10:0] lev1_a0sumAHighB_uid1846_i_arrayidx5_i132_add0_mult_x_im9_a;
    wire [10:0] lev1_a0sumAHighB_uid1846_i_arrayidx5_i132_add0_mult_x_im9_b;
    logic [10:0] lev1_a0sumAHighB_uid1846_i_arrayidx5_i132_add0_mult_x_im9_o;
    wire [10:0] lev1_a0sumAHighB_uid1846_i_arrayidx5_i132_add0_mult_x_im9_q;
    wire [11:0] lev1_a0_uid1847_i_arrayidx5_i132_add0_mult_x_im9_q;
    wire [23:0] sR_mergedSignalTM_uid1852_i_arrayidx5_i132_add0_mult_x_im9_q;
    wire [18:0] lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_a;
    wire [18:0] lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_b;
    logic [18:0] lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_o;
    wire [18:0] lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_q;
    wire [19:0] lev1_a0_uid1897_i_arrayidx5_i93_add0_mult_x_im0_q;
    wire [31:0] sR_mergedSignalTM_uid1902_i_arrayidx5_i93_add0_mult_x_im0_q;
    wire [18:0] lev1_a0sumAHighB_uid1958_i_arrayidx5_i93_add0_mult_x_im3_a;
    wire [18:0] lev1_a0sumAHighB_uid1958_i_arrayidx5_i93_add0_mult_x_im3_b;
    logic [18:0] lev1_a0sumAHighB_uid1958_i_arrayidx5_i93_add0_mult_x_im3_o;
    wire [18:0] lev1_a0sumAHighB_uid1958_i_arrayidx5_i93_add0_mult_x_im3_q;
    wire [19:0] lev1_a0_uid1959_i_arrayidx5_i93_add0_mult_x_im3_q;
    wire [31:0] sR_mergedSignalTM_uid1964_i_arrayidx5_i93_add0_mult_x_im3_q;
    wire [18:0] lev1_a0sumAHighB_uid2020_i_arrayidx5_i93_add0_mult_x_im6_a;
    wire [18:0] lev1_a0sumAHighB_uid2020_i_arrayidx5_i93_add0_mult_x_im6_b;
    logic [18:0] lev1_a0sumAHighB_uid2020_i_arrayidx5_i93_add0_mult_x_im6_o;
    wire [18:0] lev1_a0sumAHighB_uid2020_i_arrayidx5_i93_add0_mult_x_im6_q;
    wire [19:0] lev1_a0_uid2021_i_arrayidx5_i93_add0_mult_x_im6_q;
    wire [31:0] sR_mergedSignalTM_uid2026_i_arrayidx5_i93_add0_mult_x_im6_q;
    wire [10:0] lev1_a0sumAHighB_uid2082_i_arrayidx5_i93_add0_mult_x_im9_a;
    wire [10:0] lev1_a0sumAHighB_uid2082_i_arrayidx5_i93_add0_mult_x_im9_b;
    logic [10:0] lev1_a0sumAHighB_uid2082_i_arrayidx5_i93_add0_mult_x_im9_o;
    wire [10:0] lev1_a0sumAHighB_uid2082_i_arrayidx5_i93_add0_mult_x_im9_q;
    wire [11:0] lev1_a0_uid2083_i_arrayidx5_i93_add0_mult_x_im9_q;
    wire [23:0] sR_mergedSignalTM_uid2088_i_arrayidx5_i93_add0_mult_x_im9_q;
    wire [17:0] i_arrayidx17_i104_add0_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_arrayidx17_i104_add0_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_arrayidx17_i104_add0_mult_x_bs1_merged_bit_select_d;
    wire [9:0] i_arrayidx17_i104_add0_mult_x_bs1_merged_bit_select_e;
    wire [17:0] i_arrayidx17_i_add0_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_arrayidx17_i_add0_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_arrayidx17_i_add0_mult_x_bs1_merged_bit_select_d;
    wire [9:0] i_arrayidx17_i_add0_mult_x_bs1_merged_bit_select_e;
    wire [17:0] i_arrayidx17_i159_add0_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_arrayidx17_i159_add0_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_arrayidx17_i159_add0_mult_x_bs1_merged_bit_select_d;
    wire [9:0] i_arrayidx17_i159_add0_mult_x_bs1_merged_bit_select_e;
    wire [0:0] lowRangeB_uid1658_i_arrayidx5_i132_add0_mult_x_im0_merged_bit_select_b;
    wire [16:0] lowRangeB_uid1658_i_arrayidx5_i132_add0_mult_x_im0_merged_bit_select_c;
    wire [0:0] lowRangeB_uid1720_i_arrayidx5_i132_add0_mult_x_im3_merged_bit_select_b;
    wire [16:0] lowRangeB_uid1720_i_arrayidx5_i132_add0_mult_x_im3_merged_bit_select_c;
    wire [0:0] lowRangeB_uid1782_i_arrayidx5_i132_add0_mult_x_im6_merged_bit_select_b;
    wire [16:0] lowRangeB_uid1782_i_arrayidx5_i132_add0_mult_x_im6_merged_bit_select_c;
    wire [0:0] lowRangeB_uid1844_i_arrayidx5_i132_add0_mult_x_im9_merged_bit_select_b;
    wire [8:0] lowRangeB_uid1844_i_arrayidx5_i132_add0_mult_x_im9_merged_bit_select_c;
    wire [0:0] lowRangeB_uid1894_i_arrayidx5_i93_add0_mult_x_im0_merged_bit_select_b;
    wire [16:0] lowRangeB_uid1894_i_arrayidx5_i93_add0_mult_x_im0_merged_bit_select_c;
    wire [0:0] lowRangeB_uid1956_i_arrayidx5_i93_add0_mult_x_im3_merged_bit_select_b;
    wire [16:0] lowRangeB_uid1956_i_arrayidx5_i93_add0_mult_x_im3_merged_bit_select_c;
    wire [0:0] lowRangeB_uid2018_i_arrayidx5_i93_add0_mult_x_im6_merged_bit_select_b;
    wire [16:0] lowRangeB_uid2018_i_arrayidx5_i93_add0_mult_x_im6_merged_bit_select_c;
    wire [0:0] lowRangeB_uid2080_i_arrayidx5_i93_add0_mult_x_im9_merged_bit_select_b;
    wire [8:0] lowRangeB_uid2080_i_arrayidx5_i93_add0_mult_x_im9_merged_bit_select_c;
    wire [0:0] lowRangeB_uid950_i_arrayidx17_i104_add0_mult_x_im0_merged_bit_select_b;
    wire [16:0] lowRangeB_uid950_i_arrayidx17_i104_add0_mult_x_im0_merged_bit_select_c;
    wire [0:0] lowRangeB_uid1012_i_arrayidx17_i104_add0_mult_x_im3_merged_bit_select_b;
    wire [16:0] lowRangeB_uid1012_i_arrayidx17_i104_add0_mult_x_im3_merged_bit_select_c;
    wire [0:0] lowRangeB_uid1074_i_arrayidx17_i104_add0_mult_x_im6_merged_bit_select_b;
    wire [16:0] lowRangeB_uid1074_i_arrayidx17_i104_add0_mult_x_im6_merged_bit_select_c;
    wire [0:0] lowRangeB_uid1136_i_arrayidx17_i104_add0_mult_x_im9_merged_bit_select_b;
    wire [8:0] lowRangeB_uid1136_i_arrayidx17_i104_add0_mult_x_im9_merged_bit_select_c;
    wire [0:0] lowRangeB_uid1422_i_arrayidx17_i_add0_mult_x_im0_merged_bit_select_b;
    wire [16:0] lowRangeB_uid1422_i_arrayidx17_i_add0_mult_x_im0_merged_bit_select_c;
    wire [0:0] lowRangeB_uid1484_i_arrayidx17_i_add0_mult_x_im3_merged_bit_select_b;
    wire [16:0] lowRangeB_uid1484_i_arrayidx17_i_add0_mult_x_im3_merged_bit_select_c;
    wire [0:0] lowRangeB_uid1546_i_arrayidx17_i_add0_mult_x_im6_merged_bit_select_b;
    wire [16:0] lowRangeB_uid1546_i_arrayidx17_i_add0_mult_x_im6_merged_bit_select_c;
    wire [0:0] lowRangeB_uid1608_i_arrayidx17_i_add0_mult_x_im9_merged_bit_select_b;
    wire [8:0] lowRangeB_uid1608_i_arrayidx17_i_add0_mult_x_im9_merged_bit_select_c;
    wire [0:0] lowRangeB_uid1186_i_arrayidx17_i159_add0_mult_x_im0_merged_bit_select_b;
    wire [16:0] lowRangeB_uid1186_i_arrayidx17_i159_add0_mult_x_im0_merged_bit_select_c;
    wire [0:0] lowRangeB_uid1248_i_arrayidx17_i159_add0_mult_x_im3_merged_bit_select_b;
    wire [16:0] lowRangeB_uid1248_i_arrayidx17_i159_add0_mult_x_im3_merged_bit_select_c;
    wire [0:0] lowRangeB_uid1310_i_arrayidx17_i159_add0_mult_x_im6_merged_bit_select_b;
    wire [16:0] lowRangeB_uid1310_i_arrayidx17_i159_add0_mult_x_im6_merged_bit_select_c;
    wire [0:0] lowRangeB_uid1372_i_arrayidx17_i159_add0_mult_x_im9_merged_bit_select_b;
    wire [8:0] lowRangeB_uid1372_i_arrayidx17_i159_add0_mult_x_im9_merged_bit_select_c;
    reg [0:0] redist0_lowRangeB_uid1372_i_arrayidx17_i159_add0_mult_x_im9_merged_bit_select_b_1_0_q;
    reg [0:0] redist1_lowRangeB_uid1310_i_arrayidx17_i159_add0_mult_x_im6_merged_bit_select_b_1_0_q;
    reg [0:0] redist2_lowRangeB_uid1248_i_arrayidx17_i159_add0_mult_x_im3_merged_bit_select_b_1_0_q;
    reg [0:0] redist3_lowRangeB_uid1186_i_arrayidx17_i159_add0_mult_x_im0_merged_bit_select_b_1_0_q;
    reg [0:0] redist4_lowRangeB_uid1608_i_arrayidx17_i_add0_mult_x_im9_merged_bit_select_b_1_0_q;
    reg [0:0] redist5_lowRangeB_uid1546_i_arrayidx17_i_add0_mult_x_im6_merged_bit_select_b_1_0_q;
    reg [0:0] redist6_lowRangeB_uid1484_i_arrayidx17_i_add0_mult_x_im3_merged_bit_select_b_1_0_q;
    reg [0:0] redist7_lowRangeB_uid1422_i_arrayidx17_i_add0_mult_x_im0_merged_bit_select_b_1_0_q;
    reg [0:0] redist8_lowRangeB_uid1136_i_arrayidx17_i104_add0_mult_x_im9_merged_bit_select_b_1_0_q;
    reg [0:0] redist9_lowRangeB_uid1074_i_arrayidx17_i104_add0_mult_x_im6_merged_bit_select_b_1_0_q;
    reg [0:0] redist10_lowRangeB_uid1012_i_arrayidx17_i104_add0_mult_x_im3_merged_bit_select_b_1_0_q;
    reg [0:0] redist11_lowRangeB_uid950_i_arrayidx17_i104_add0_mult_x_im0_merged_bit_select_b_1_0_q;
    reg [0:0] redist12_lowRangeB_uid2080_i_arrayidx5_i93_add0_mult_x_im9_merged_bit_select_b_1_0_q;
    reg [0:0] redist13_lowRangeB_uid2018_i_arrayidx5_i93_add0_mult_x_im6_merged_bit_select_b_1_0_q;
    reg [0:0] redist14_lowRangeB_uid1956_i_arrayidx5_i93_add0_mult_x_im3_merged_bit_select_b_1_0_q;
    reg [0:0] redist15_lowRangeB_uid1894_i_arrayidx5_i93_add0_mult_x_im0_merged_bit_select_b_1_0_q;
    reg [0:0] redist16_lowRangeB_uid1844_i_arrayidx5_i132_add0_mult_x_im9_merged_bit_select_b_1_0_q;
    reg [0:0] redist17_lowRangeB_uid1782_i_arrayidx5_i132_add0_mult_x_im6_merged_bit_select_b_1_0_q;
    reg [0:0] redist18_lowRangeB_uid1720_i_arrayidx5_i132_add0_mult_x_im3_merged_bit_select_b_1_0_q;
    reg [0:0] redist19_lowRangeB_uid1658_i_arrayidx5_i132_add0_mult_x_im0_merged_bit_select_b_1_0_q;
    wire [0:0] redist20_i_unnamed_add263_q_89_fifo_valid_in;
    wire redist20_i_unnamed_add263_q_89_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist20_i_unnamed_add263_q_89_fifo_stall_in;
    wire redist20_i_unnamed_add263_q_89_fifo_stall_in_bitsignaltemp;
    wire [0:0] redist20_i_unnamed_add263_q_89_fifo_data_in;
    wire [0:0] redist20_i_unnamed_add263_q_89_fifo_valid_out;
    wire redist20_i_unnamed_add263_q_89_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist20_i_unnamed_add263_q_89_fifo_stall_out;
    wire redist20_i_unnamed_add263_q_89_fifo_stall_out_bitsignaltemp;
    wire [0:0] redist20_i_unnamed_add263_q_89_fifo_data_out;
    wire [0:0] redist21_i_unnamed_add261_q_33_fifo_valid_in;
    wire redist21_i_unnamed_add261_q_33_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist21_i_unnamed_add261_q_33_fifo_stall_in;
    wire redist21_i_unnamed_add261_q_33_fifo_stall_in_bitsignaltemp;
    wire [0:0] redist21_i_unnamed_add261_q_33_fifo_data_in;
    wire [0:0] redist21_i_unnamed_add261_q_33_fifo_valid_out;
    wire redist21_i_unnamed_add261_q_33_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist21_i_unnamed_add261_q_33_fifo_stall_out;
    wire redist21_i_unnamed_add261_q_33_fifo_stall_out_bitsignaltemp;
    wire [0:0] redist21_i_unnamed_add261_q_33_fifo_data_out;
    wire [0:0] redist22_i_unnamed_add258_q_32_fifo_valid_in;
    wire redist22_i_unnamed_add258_q_32_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist22_i_unnamed_add258_q_32_fifo_stall_in;
    wire redist22_i_unnamed_add258_q_32_fifo_stall_in_bitsignaltemp;
    wire [0:0] redist22_i_unnamed_add258_q_32_fifo_data_in;
    wire [0:0] redist22_i_unnamed_add258_q_32_fifo_valid_out;
    wire redist22_i_unnamed_add258_q_32_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist22_i_unnamed_add258_q_32_fifo_stall_out;
    wire redist22_i_unnamed_add258_q_32_fifo_stall_out_bitsignaltemp;
    wire [0:0] redist22_i_unnamed_add258_q_32_fifo_data_out;
    reg [31:0] redist23_i_shr_i_i1_add60_vt_join_q_1_0_q;
    reg [31:0] redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_0_q;
    reg [31:0] redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_q;
    reg [31:0] redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_q;
    reg [31:0] redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_q;
    reg [31:0] redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_q;
    reg [31:0] redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_q;
    reg [31:0] redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_q;
    reg [31:0] redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_q;
    reg [31:0] redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_q;
    reg [31:0] redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_q;
    reg [31:0] redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_q;
    reg [31:0] redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_q;
    reg [31:0] redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_q;
    reg [31:0] redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_q;
    reg [31:0] redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_q;
    reg [31:0] redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_q;
    reg [31:0] redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_q;
    reg [31:0] redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_q;
    reg [31:0] redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_q;
    reg [31:0] redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_q;
    reg [31:0] redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_q;
    reg [31:0] redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_q;
    reg [31:0] redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_q;
    reg [31:0] redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_q;
    reg [31:0] redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_q;
    reg [31:0] redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_q;
    reg [31:0] redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_q;
    reg [31:0] redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_q;
    reg [31:0] redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_q;
    reg [31:0] redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_q;
    reg [31:0] redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_q;
    reg [31:0] redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_q;
    reg [31:0] redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_q;
    reg [31:0] redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_q;
    reg [31:0] redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_q;
    reg [31:0] redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_q;
    reg [31:0] redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_q;
    reg [31:0] redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_q;
    reg [31:0] redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_q;
    reg [31:0] redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_q;
    reg [31:0] redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_q;
    reg [31:0] redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_q;
    reg [31:0] redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_q;
    reg [31:0] redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_q;
    reg [31:0] redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_q;
    reg [31:0] redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_q;
    reg [31:0] redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_q;
    reg [31:0] redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_q;
    reg [31:0] redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_0_q;
    reg [31:0] redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_q;
    reg [31:0] redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_q;
    wire [0:0] redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_valid_in;
    wire redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_stall_in;
    wire redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_stall_in_bitsignaltemp;
    wire [31:0] redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_data_in;
    wire [0:0] redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_valid_out;
    wire redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_stall_out;
    wire redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_stall_out_bitsignaltemp;
    wire [31:0] redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_data_out;
    wire [0:0] redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_valid_in;
    wire redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_stall_in;
    wire redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_stall_in_bitsignaltemp;
    wire [0:0] redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_data_in;
    wire [0:0] redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_valid_out;
    wire redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_stall_out;
    wire redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_stall_out_bitsignaltemp;
    wire [0:0] redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_data_out;
    wire [0:0] redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_valid_in;
    wire redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_stall_in;
    wire redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_stall_in_bitsignaltemp;
    wire [16:0] redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_data_in;
    wire [0:0] redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_valid_out;
    wire redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_stall_out;
    wire redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_stall_out_bitsignaltemp;
    wire [16:0] redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_data_out;
    wire [0:0] redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_valid_in;
    wire redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_stall_in;
    wire redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_stall_in_bitsignaltemp;
    wire [0:0] redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_data_in;
    wire [0:0] redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_valid_out;
    wire redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_stall_out;
    wire redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_stall_out_bitsignaltemp;
    wire [0:0] redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_data_out;
    wire [0:0] redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_valid_in;
    wire redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_stall_in;
    wire redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_stall_in_bitsignaltemp;
    wire [0:0] redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_data_in;
    wire [0:0] redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_valid_out;
    wire redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_stall_out;
    wire redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_stall_out_bitsignaltemp;
    wire [0:0] redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_data_out;
    reg [0:0] redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_q;
    reg [31:0] redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_q;
    reg [31:0] redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_q;
    reg [31:0] redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_q;
    reg [31:0] redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_q;
    reg [31:0] redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_q;
    reg [31:0] redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_q;
    reg [31:0] redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_q;
    reg [31:0] redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_q;
    reg [31:0] redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_q;
    reg [31:0] redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_q;
    reg [31:0] redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_q;
    reg [31:0] redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_q;
    reg [31:0] redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_q;
    reg [31:0] redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_q;
    reg [31:0] redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_q;
    reg [31:0] redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_q;
    reg [31:0] redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_q;
    reg [31:0] redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_q;
    reg [31:0] redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_q;
    reg [31:0] redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_q;
    reg [31:0] redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_q;
    reg [31:0] redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_q;
    reg [31:0] redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_q;
    reg [31:0] redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_q;
    reg [31:0] redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_q;
    reg [31:0] redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_q;
    reg [31:0] redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_q;
    reg [31:0] redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_q;
    reg [31:0] redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_q;
    reg [31:0] redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_q;
    reg [31:0] redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_q;
    reg [31:0] redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_q;
    reg [31:0] redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_q;
    reg [31:0] redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_q;
    reg [31:0] redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_q;
    reg [31:0] redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_q;
    reg [31:0] redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_q;
    reg [31:0] redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_q;
    reg [31:0] redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_q;
    reg [31:0] redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_q;
    reg [31:0] redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_q;
    reg [31:0] redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_q;
    reg [31:0] redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_q;
    reg [31:0] redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_q;
    reg [31:0] redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_q;
    reg [31:0] redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_q;
    reg [31:0] redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_q;
    reg [0:0] redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_q;
    wire [0:0] redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_valid_in;
    wire redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_stall_in;
    wire redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_stall_in_bitsignaltemp;
    wire [0:0] redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_data_in;
    wire [0:0] redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_valid_out;
    wire redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_stall_out;
    wire redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_stall_out_bitsignaltemp;
    wire [0:0] redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_data_out;
    wire [0:0] redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_valid_in;
    wire redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_stall_in;
    wire redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_stall_in_bitsignaltemp;
    wire [0:0] redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_data_in;
    wire [0:0] redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_valid_out;
    wire redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_stall_out;
    wire redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_stall_out_bitsignaltemp;
    wire [0:0] redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_data_out;
    wire [0:0] redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_valid_in;
    wire redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_stall_in;
    wire redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_stall_in_bitsignaltemp;
    wire [0:0] redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_data_in;
    wire [0:0] redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_valid_out;
    wire redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_stall_out;
    wire redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_stall_out_bitsignaltemp;
    wire [0:0] redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_data_out;
    wire [0:0] redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_valid_in;
    wire redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_stall_in;
    wire redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_stall_in_bitsignaltemp;
    wire [0:0] redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_data_in;
    wire [0:0] redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_valid_out;
    wire redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_stall_out;
    wire redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_stall_out_bitsignaltemp;
    wire [0:0] redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_data_out;
    wire [0:0] redist115_i_first_cleanup_xor132_add227_q_63_fifo_valid_in;
    wire redist115_i_first_cleanup_xor132_add227_q_63_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist115_i_first_cleanup_xor132_add227_q_63_fifo_stall_in;
    wire redist115_i_first_cleanup_xor132_add227_q_63_fifo_stall_in_bitsignaltemp;
    wire [0:0] redist115_i_first_cleanup_xor132_add227_q_63_fifo_data_in;
    wire [0:0] redist115_i_first_cleanup_xor132_add227_q_63_fifo_valid_out;
    wire redist115_i_first_cleanup_xor132_add227_q_63_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist115_i_first_cleanup_xor132_add227_q_63_fifo_stall_out;
    wire redist115_i_first_cleanup_xor132_add227_q_63_fifo_stall_out_bitsignaltemp;
    wire [0:0] redist115_i_first_cleanup_xor132_add227_q_63_fifo_data_out;
    wire [0:0] redist116_i_addr_add253_q_38_fifo_valid_in;
    wire redist116_i_addr_add253_q_38_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist116_i_addr_add253_q_38_fifo_stall_in;
    wire redist116_i_addr_add253_q_38_fifo_stall_in_bitsignaltemp;
    wire [63:0] redist116_i_addr_add253_q_38_fifo_data_in;
    wire [0:0] redist116_i_addr_add253_q_38_fifo_valid_out;
    wire redist116_i_addr_add253_q_38_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist116_i_addr_add253_q_38_fifo_stall_out;
    wire redist116_i_addr_add253_q_38_fifo_stall_out_bitsignaltemp;
    wire [63:0] redist116_i_addr_add253_q_38_fifo_data_out;
    wire [0:0] redist117_i_acl_26_add248_q_52_fifo_valid_in;
    wire redist117_i_acl_26_add248_q_52_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist117_i_acl_26_add248_q_52_fifo_stall_in;
    wire redist117_i_acl_26_add248_q_52_fifo_stall_in_bitsignaltemp;
    wire [0:0] redist117_i_acl_26_add248_q_52_fifo_data_in;
    wire [0:0] redist117_i_acl_26_add248_q_52_fifo_valid_out;
    wire redist117_i_acl_26_add248_q_52_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist117_i_acl_26_add248_q_52_fifo_stall_out;
    wire redist117_i_acl_26_add248_q_52_fifo_stall_out_bitsignaltemp;
    wire [0:0] redist117_i_acl_26_add248_q_52_fifo_data_out;
    reg [31:0] redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_q;
    reg [31:0] redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_q;
    reg [31:0] redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_q;
    reg [31:0] redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_q;
    reg [31:0] redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_q;
    reg [31:0] redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_q;
    reg [31:0] redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_q;
    reg [31:0] redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_q;
    reg [31:0] redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_q;
    reg [31:0] redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_q;
    reg [31:0] redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_q;
    reg [31:0] redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_q;
    reg [31:0] redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_q;
    reg [31:0] redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_q;
    reg [31:0] redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_q;
    reg [31:0] redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_q;
    wire [0:0] redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_valid_in;
    wire redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_stall_in;
    wire redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_stall_in_bitsignaltemp;
    wire [0:0] redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_data_in;
    wire [0:0] redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_valid_out;
    wire redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_stall_out;
    wire redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_stall_out_bitsignaltemp;
    wire [0:0] redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_data_out;
    reg [63:0] redist164_i_arrayidx5_i_add0_trunc_sel_x_b_1_0_q;
    reg [63:0] redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_q;
    reg [63:0] redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_q;
    reg [63:0] redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_q;
    reg [63:0] redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_q;
    reg [63:0] redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_q;
    reg [63:0] redist170_i_arrayidx5_i132_add0_trunc_sel_x_b_1_0_q;
    reg [63:0] redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_q;
    reg [63:0] redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_q;
    reg [63:0] redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_q;
    reg [63:0] redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_q;
    reg [63:0] redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_q;
    reg [61:0] redist176_i_arrayidx17_i159_add0_narrow_x_b_3_0_q;
    reg [61:0] redist176_i_arrayidx17_i159_add0_narrow_x_b_3_1_q;
    reg [61:0] redist176_i_arrayidx17_i159_add0_narrow_x_b_3_2_q;
    reg [63:0] redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_q;
    reg [63:0] redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_q;
    reg [63:0] redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_q;
    reg [61:0] redist180_i_arrayidx17_i104_add0_narrow_x_b_1_0_q;
    reg [63:0] redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_q;
    reg [63:0] redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_q;
    reg [63:0] redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_q;
    reg [63:0] redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_q;
    reg [63:0] redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_q;
    reg [31:0] redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_q;
    reg [31:0] redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_0_q;
    reg [31:0] redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_1_q;
    reg [31:0] redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_q;
    reg [31:0] redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_q;
    wire [0:0] redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_valid_in;
    wire redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_stall_in;
    wire redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_stall_in_bitsignaltemp;
    wire [31:0] redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_data_in;
    wire [0:0] redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_valid_out;
    wire redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_stall_out;
    wire redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_stall_out_bitsignaltemp;
    wire [31:0] redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_data_out;
    wire [0:0] redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_valid_in;
    wire redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_stall_in;
    wire redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_stall_in_bitsignaltemp;
    wire [0:0] redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_data_in;
    wire [0:0] redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_valid_out;
    wire redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_stall_out;
    wire redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_stall_out_bitsignaltemp;
    wire [0:0] redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_data_out;
    wire [0:0] redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_valid_in;
    wire redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_stall_in;
    wire redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_stall_in_bitsignaltemp;
    wire [0:0] redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_data_in;
    wire [0:0] redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_valid_out;
    wire redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_stall_out;
    wire redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_stall_out_bitsignaltemp;
    wire [0:0] redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_data_out;
    reg [0:0] redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_q;
    wire [0:0] redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_valid_in;
    wire redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_stall_in;
    wire redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_stall_in_bitsignaltemp;
    wire [0:0] redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_data_in;
    wire [0:0] redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_valid_out;
    wire redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_stall_out;
    wire redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_stall_out_bitsignaltemp;
    wire [0:0] redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_data_out;
    wire [0:0] redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_valid_in;
    wire redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_stall_in;
    wire redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_stall_in_bitsignaltemp;
    wire [0:0] redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_data_in;
    wire [0:0] redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_valid_out;
    wire redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_stall_out;
    wire redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_stall_out_bitsignaltemp;
    wire [0:0] redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_data_out;
    wire [0:0] redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_valid_in;
    wire redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_stall_in;
    wire redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_stall_in_bitsignaltemp;
    wire [0:0] redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_data_in;
    wire [0:0] redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_valid_out;
    wire redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_stall_out;
    wire redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_stall_out_bitsignaltemp;
    wire [0:0] redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_data_out;
    wire [0:0] redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_valid_in;
    wire redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_valid_in_bitsignaltemp;
    wire [0:0] redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_stall_in;
    wire redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_stall_in_bitsignaltemp;
    wire [31:0] redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_data_in;
    wire [0:0] redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_valid_out;
    wire redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_valid_out_bitsignaltemp;
    wire [0:0] redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_stall_out;
    wire redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_stall_out_bitsignaltemp;
    wire [31:0] redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_data_out;
    wire [32:0] bubble_join_add_B8_merge_reg_aunroll_x_q;
    wire [0:0] bubble_select_add_B8_merge_reg_aunroll_x_b;
    wire [31:0] bubble_select_add_B8_merge_reg_aunroll_x_c;
    wire [31:0] bubble_join_i_sfc_s_c0_in_for_body28_adds_c0_enter1594_add271_aunroll_x_q;
    wire [31:0] bubble_select_i_sfc_s_c0_in_for_body28_adds_c0_enter1594_add271_aunroll_x_b;
    wire [0:0] bubble_join_i_llvm_fpga_ffwd_dest_i1_cmp_i65108_add30_q;
    wire [0:0] bubble_select_i_llvm_fpga_ffwd_dest_i1_cmp_i65108_add30_b;
    wire [0:0] bubble_join_i_llvm_fpga_ffwd_dest_i1_cmp_i65109_add28_q;
    wire [0:0] bubble_select_i_llvm_fpga_ffwd_dest_i1_cmp_i65109_add28_b;
    wire [0:0] bubble_join_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_q;
    wire [0:0] bubble_select_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_b;
    wire [0:0] bubble_join_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_q;
    wire [0:0] bubble_select_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_b;
    wire [0:0] bubble_join_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_q;
    wire [0:0] bubble_select_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_b;
    wire [0:0] bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_q;
    wire [0:0] bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_b;
    wire [0:0] bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_q;
    wire [0:0] bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_b;
    wire [0:0] bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_q;
    wire [0:0] bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_b;
    wire [0:0] bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_q;
    wire [0:0] bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_b;
    wire [0:0] bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_q;
    wire [0:0] bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_b;
    wire [0:0] bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_q;
    wire [0:0] bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_b;
    wire [0:0] bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_q;
    wire [0:0] bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_b;
    wire [0:0] bubble_join_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_q;
    wire [0:0] bubble_select_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_b;
    wire [31:0] bubble_join_i_llvm_fpga_ffwd_dest_i32_i_044393_add3_q;
    wire [31:0] bubble_select_i_llvm_fpga_ffwd_dest_i32_i_044393_add3_b;
    wire [31:0] bubble_join_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_q;
    wire [31:0] bubble_select_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_b;
    wire [31:0] bubble_join_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_q;
    wire [31:0] bubble_select_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_b;
    wire [31:0] bubble_join_i_llvm_fpga_ffwd_dest_i32_rem31105_add18_q;
    wire [31:0] bubble_select_i_llvm_fpga_ffwd_dest_i32_rem31105_add18_b;
    wire [31:0] bubble_join_i_llvm_fpga_ffwd_dest_i32_replace_phi100_add0_q;
    wire [31:0] bubble_select_i_llvm_fpga_ffwd_dest_i32_replace_phi100_add0_b;
    wire [31:0] bubble_join_i_llvm_fpga_ffwd_dest_i32_replace_phi5097_add1_q;
    wire [31:0] bubble_select_i_llvm_fpga_ffwd_dest_i32_replace_phi5097_add1_b;
    wire [31:0] bubble_join_i_llvm_fpga_ffwd_dest_i32_select6359_add12_q;
    wire [31:0] bubble_select_i_llvm_fpga_ffwd_dest_i32_select6359_add12_b;
    wire [63:0] bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_q;
    wire [63:0] bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_b;
    wire [63:0] bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_q;
    wire [63:0] bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_b;
    wire [63:0] bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_q;
    wire [63:0] bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_b;
    wire [63:0] bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_q;
    wire [63:0] bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_b;
    wire [63:0] bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_q;
    wire [63:0] bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_b;
    wire [63:0] bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_q;
    wire [63:0] bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_b;
    wire [63:0] bubble_join_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_q;
    wire [63:0] bubble_select_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_b;
    wire [63:0] bubble_join_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_q;
    wire [63:0] bubble_select_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_b;
    wire [63:0] bubble_join_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_q;
    wire [63:0] bubble_select_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_b;
    wire [63:0] bubble_join_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_q;
    wire [63:0] bubble_select_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_b;
    wire [63:0] bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_q;
    wire [63:0] bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_b;
    wire [63:0] bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_q;
    wire [63:0] bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_b;
    wire [63:0] bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_q;
    wire [63:0] bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_b;
    wire [63:0] bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_q;
    wire [63:0] bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_b;
    wire [63:0] bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_q;
    wire [63:0] bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_b;
    wire [63:0] bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_q;
    wire [63:0] bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_b;
    wire [31:0] bubble_join_i_llvm_fpga_mem_lm1269_add223_q;
    wire [31:0] bubble_select_i_llvm_fpga_mem_lm1269_add223_b;
    wire [31:0] bubble_join_i_llvm_fpga_mem_lm12810_add224_q;
    wire [31:0] bubble_select_i_llvm_fpga_mem_lm12810_add224_b;
    wire [31:0] bubble_join_i_llvm_fpga_mem_lm13212_add275_q;
    wire [31:0] bubble_select_i_llvm_fpga_mem_lm13212_add275_b;
    wire [31:0] bubble_join_i_llvm_fpga_mem_lm13413_add276_q;
    wire [31:0] bubble_select_i_llvm_fpga_mem_lm13413_add276_b;
    wire [0:0] bubble_join_i_llvm_fpga_mem_memdep_16_add273_q;
    wire [0:0] bubble_select_i_llvm_fpga_mem_memdep_16_add273_b;
    wire [31:0] bubble_join_i_llvm_fpga_mem_ml3211_add267_q;
    wire [31:0] bubble_select_i_llvm_fpga_mem_ml3211_add267_b;
    wire [31:0] bubble_join_i_llvm_fpga_mem_ml358_add265_q;
    wire [31:0] bubble_select_i_llvm_fpga_mem_ml358_add265_b;
    wire [0:0] bubble_join_i_llvm_fpga_pipeline_keep_going126_add45_q;
    wire [0:0] bubble_select_i_llvm_fpga_pipeline_keep_going126_add45_b;
    wire [16:0] bubble_join_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_q;
    wire [16:0] bubble_select_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_b;
    wire [16:0] bubble_join_i_llvm_fpga_pop_i17_initerations124_pop12_add46_q;
    wire [16:0] bubble_select_i_llvm_fpga_pop_i17_initerations124_pop12_add46_b;
    wire [0:0] bubble_join_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_q;
    wire [0:0] bubble_select_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_b;
    wire [0:0] bubble_join_i_llvm_fpga_pop_i1_memdep_phi18_pop10_add51_q;
    wire [0:0] bubble_select_i_llvm_fpga_pop_i1_memdep_phi18_pop10_add51_b;
    wire [0:0] bubble_join_i_llvm_fpga_pop_i1_memdep_phi19_pop11_add52_q;
    wire [0:0] bubble_select_i_llvm_fpga_pop_i1_memdep_phi19_pop11_add52_b;
    wire [31:0] bubble_join_i_llvm_fpga_pop_i32_inc35145_pop14_add53_q;
    wire [31:0] bubble_select_i_llvm_fpga_pop_i32_inc35145_pop14_add53_b;
    wire [31:0] bubble_join_i_llvm_fpga_pop_i32_j_0440_pop8_add49_q;
    wire [31:0] bubble_select_i_llvm_fpga_pop_i32_j_0440_pop8_add49_b;
    wire [31:0] bubble_join_i_llvm_fpga_pop_i32_pop6_add47_q;
    wire [31:0] bubble_select_i_llvm_fpga_pop_i32_pop6_add47_b;
    wire [31:0] bubble_join_i_llvm_fpga_pop_i32_pop7_add48_q;
    wire [31:0] bubble_select_i_llvm_fpga_pop_i32_pop7_add48_b;
    wire [31:0] bubble_join_i_llvm_fpga_push_i32_inc35145_push14_add226_q;
    wire [31:0] bubble_select_i_llvm_fpga_push_i32_inc35145_push14_add226_b;
    wire [32:0] bubble_join_stall_entry_q;
    wire [0:0] bubble_select_stall_entry_b;
    wire [31:0] bubble_select_stall_entry_c;
    wire [0:0] bubble_join_redist20_i_unnamed_add263_q_89_fifo_q;
    wire [0:0] bubble_select_redist20_i_unnamed_add263_q_89_fifo_b;
    wire [0:0] bubble_join_redist21_i_unnamed_add261_q_33_fifo_q;
    wire [0:0] bubble_select_redist21_i_unnamed_add261_q_33_fifo_b;
    wire [0:0] bubble_join_redist22_i_unnamed_add258_q_32_fifo_q;
    wire [0:0] bubble_select_redist22_i_unnamed_add258_q_32_fifo_b;
    wire [31:0] bubble_join_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_q;
    wire [31:0] bubble_select_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_b;
    wire [0:0] bubble_join_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_q;
    wire [0:0] bubble_select_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_b;
    wire [16:0] bubble_join_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_q;
    wire [16:0] bubble_select_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_b;
    wire [0:0] bubble_join_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_q;
    wire [0:0] bubble_select_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_b;
    wire [0:0] bubble_join_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_q;
    wire [0:0] bubble_select_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_b;
    wire [0:0] bubble_join_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_q;
    wire [0:0] bubble_select_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_b;
    wire [0:0] bubble_join_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_q;
    wire [0:0] bubble_select_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_b;
    wire [0:0] bubble_join_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_q;
    wire [0:0] bubble_select_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_b;
    wire [0:0] bubble_join_redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_q;
    wire [0:0] bubble_select_redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_b;
    wire [0:0] bubble_join_redist115_i_first_cleanup_xor132_add227_q_63_fifo_q;
    wire [0:0] bubble_select_redist115_i_first_cleanup_xor132_add227_q_63_fifo_b;
    wire [63:0] bubble_join_redist116_i_addr_add253_q_38_fifo_q;
    wire [63:0] bubble_select_redist116_i_addr_add253_q_38_fifo_b;
    wire [0:0] bubble_join_redist117_i_acl_26_add248_q_52_fifo_q;
    wire [0:0] bubble_select_redist117_i_acl_26_add248_q_52_fifo_b;
    wire [0:0] bubble_join_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_q;
    wire [0:0] bubble_select_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_b;
    wire [31:0] bubble_join_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_q;
    wire [31:0] bubble_select_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_b;
    wire [0:0] bubble_join_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_q;
    wire [0:0] bubble_select_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_b;
    wire [0:0] bubble_join_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_q;
    wire [0:0] bubble_select_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_b;
    wire [0:0] bubble_join_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_q;
    wire [0:0] bubble_select_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_b;
    wire [0:0] bubble_join_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_q;
    wire [0:0] bubble_select_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_b;
    wire [0:0] bubble_join_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_q;
    wire [0:0] bubble_select_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_b;
    wire [31:0] bubble_join_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_q;
    wire [31:0] bubble_select_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_b;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_wireValid;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_wireStall;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_StallValid;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg0;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg0;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed0;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg1;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg1;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed1;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg2;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg2;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed2;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg3;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg3;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed3;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg4;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg4;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed4;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg5;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg5;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed5;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg6;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg6;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed6;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg7;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg7;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed7;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg8;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg8;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed8;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg9;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg9;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed9;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg10;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg10;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed10;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg11;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg11;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed11;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg12;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg12;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed12;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg13;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg13;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed13;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg14;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg14;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed14;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg15;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg15;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed15;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg16;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg16;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed16;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg17;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg17;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed17;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg18;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg18;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed18;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg19;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg19;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed19;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg20;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg20;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed20;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg21;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg21;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed21;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg22;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg22;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed22;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg23;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg23;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed23;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg24;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg24;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed24;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg25;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg25;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed25;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg26;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg26;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed26;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg27;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg27;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed27;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg28;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg28;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed28;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg29;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg29;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed29;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg30;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg30;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed30;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg31;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg31;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed31;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg32;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg32;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed32;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg33;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg33;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed33;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg34;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg34;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed34;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg35;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg35;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed35;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg36;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg36;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed36;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg37;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg37;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed37;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg38;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg38;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed38;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg39;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg39;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed39;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg40;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg40;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed40;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg41;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg41;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed41;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg42;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg42;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed42;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg43;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg43;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed43;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg44;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg44;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed44;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg45;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg45;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed45;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_toReg46;
    reg [0:0] SE_out_add_B8_merge_reg_aunroll_x_fromReg46;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_consumed46;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or0;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or1;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or2;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or3;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or4;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or5;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or6;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or7;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or8;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or9;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or10;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or11;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or12;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or13;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or14;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or15;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or16;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or17;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or18;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or19;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or20;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or21;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or22;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or23;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or24;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or25;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or26;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or27;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or28;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or29;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or30;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or31;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or32;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or33;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or34;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or35;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or36;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or37;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or38;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or39;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or40;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or41;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or42;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or43;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or44;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_or45;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_backStall;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V0;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V1;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V2;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V3;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V4;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V5;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V6;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V7;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V8;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V9;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V10;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V11;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V12;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V13;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V14;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V15;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V16;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V17;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V18;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V19;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V20;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V21;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V22;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V23;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V24;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V25;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V26;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V27;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V28;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V29;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V30;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V31;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V32;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V33;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V34;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V35;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V36;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V37;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V38;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V39;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V40;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V41;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V42;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V43;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V44;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V45;
    wire [0:0] SE_out_add_B8_merge_reg_aunroll_x_V46;
    wire [0:0] SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_wireValid;
    wire [0:0] SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_and0;
    wire [0:0] SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_and1;
    wire [0:0] SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_and2;
    wire [0:0] SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_backStall;
    wire [0:0] SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_V0;
    wire [0:0] SE_i_arrayidx17_i104_add0_dupName_0_add_x_wireValid;
    wire [0:0] SE_i_arrayidx17_i104_add0_dupName_0_add_x_and0;
    wire [0:0] SE_i_arrayidx17_i104_add0_dupName_0_add_x_backStall;
    wire [0:0] SE_i_arrayidx17_i104_add0_dupName_0_add_x_V0;
    wire [0:0] SE_i_arrayidx17_i159_add0_dupName_0_add_x_wireValid;
    wire [0:0] SE_i_arrayidx17_i159_add0_dupName_0_add_x_and0;
    wire [0:0] SE_i_arrayidx17_i159_add0_dupName_0_add_x_backStall;
    wire [0:0] SE_i_arrayidx17_i159_add0_dupName_0_add_x_V0;
    wire [0:0] SE_i_arrayidx17_i_add0_dupName_0_add_x_wireValid;
    wire [0:0] SE_i_arrayidx17_i_add0_dupName_0_add_x_and0;
    wire [0:0] SE_i_arrayidx17_i_add0_dupName_0_add_x_backStall;
    wire [0:0] SE_i_arrayidx17_i_add0_dupName_0_add_x_V0;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_wireValid;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_wireStall;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_StallValid;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_toReg0;
    reg [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_fromReg0;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_consumed0;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_toReg1;
    reg [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_fromReg1;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_consumed1;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_and0;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_or0;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_backStall;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_V0;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_V1;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_wireValid;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_wireStall;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_StallValid;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_toReg0;
    reg [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_fromReg0;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_consumed0;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_toReg1;
    reg [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_fromReg1;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_consumed1;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_and0;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_or0;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_backStall;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_V0;
    wire [0:0] SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_V1;
    wire [0:0] SE_i_lm13212_toi1_intcast_add278_sel_x_wireValid;
    wire [0:0] SE_i_lm13212_toi1_intcast_add278_sel_x_wireStall;
    wire [0:0] SE_i_lm13212_toi1_intcast_add278_sel_x_StallValid;
    wire [0:0] SE_i_lm13212_toi1_intcast_add278_sel_x_toReg0;
    reg [0:0] SE_i_lm13212_toi1_intcast_add278_sel_x_fromReg0;
    wire [0:0] SE_i_lm13212_toi1_intcast_add278_sel_x_consumed0;
    wire [0:0] SE_i_lm13212_toi1_intcast_add278_sel_x_toReg1;
    reg [0:0] SE_i_lm13212_toi1_intcast_add278_sel_x_fromReg1;
    wire [0:0] SE_i_lm13212_toi1_intcast_add278_sel_x_consumed1;
    wire [0:0] SE_i_lm13212_toi1_intcast_add278_sel_x_and0;
    wire [0:0] SE_i_lm13212_toi1_intcast_add278_sel_x_or0;
    wire [0:0] SE_i_lm13212_toi1_intcast_add278_sel_x_backStall;
    wire [0:0] SE_i_lm13212_toi1_intcast_add278_sel_x_V0;
    wire [0:0] SE_i_lm13212_toi1_intcast_add278_sel_x_V1;
    wire [0:0] SE_i_lm13413_toi1_intcast_add281_sel_x_wireValid;
    wire [0:0] SE_i_lm13413_toi1_intcast_add281_sel_x_wireStall;
    wire [0:0] SE_i_lm13413_toi1_intcast_add281_sel_x_StallValid;
    wire [0:0] SE_i_lm13413_toi1_intcast_add281_sel_x_toReg0;
    reg [0:0] SE_i_lm13413_toi1_intcast_add281_sel_x_fromReg0;
    wire [0:0] SE_i_lm13413_toi1_intcast_add281_sel_x_consumed0;
    wire [0:0] SE_i_lm13413_toi1_intcast_add281_sel_x_toReg1;
    reg [0:0] SE_i_lm13413_toi1_intcast_add281_sel_x_fromReg1;
    wire [0:0] SE_i_lm13413_toi1_intcast_add281_sel_x_consumed1;
    wire [0:0] SE_i_lm13413_toi1_intcast_add281_sel_x_and0;
    wire [0:0] SE_i_lm13413_toi1_intcast_add281_sel_x_or0;
    wire [0:0] SE_i_lm13413_toi1_intcast_add281_sel_x_backStall;
    wire [0:0] SE_i_lm13413_toi1_intcast_add281_sel_x_V0;
    wire [0:0] SE_i_lm13413_toi1_intcast_add281_sel_x_V1;
    reg [0:0] SE_i_acl_20_add260_R_v_0;
    wire [0:0] SE_i_acl_20_add260_v_s_0;
    wire [0:0] SE_i_acl_20_add260_s_tv_0;
    wire [0:0] SE_i_acl_20_add260_backEN;
    wire [0:0] SE_i_acl_20_add260_backStall;
    wire [0:0] SE_i_acl_20_add260_V0;
    reg [0:0] SE_i_acl_26_add248_R_v_0;
    reg [0:0] SE_i_acl_26_add248_R_v_1;
    wire [0:0] SE_i_acl_26_add248_v_s_0;
    wire [0:0] SE_i_acl_26_add248_s_tv_0;
    wire [0:0] SE_i_acl_26_add248_s_tv_1;
    wire [0:0] SE_i_acl_26_add248_backEN;
    wire [0:0] SE_i_acl_26_add248_and0;
    wire [0:0] SE_i_acl_26_add248_or0;
    wire [0:0] SE_i_acl_26_add248_backStall;
    wire [0:0] SE_i_acl_26_add248_V0;
    wire [0:0] SE_i_acl_26_add248_V1;
    reg [0:0] SE_i_addr_add253_R_v_0;
    wire [0:0] SE_i_addr_add253_v_s_0;
    wire [0:0] SE_i_addr_add253_s_tv_0;
    wire [0:0] SE_i_addr_add253_backEN;
    wire [0:0] SE_i_addr_add253_backStall;
    wire [0:0] SE_i_addr_add253_V0;
    wire [0:0] SE_i_cmp11_i153_add230_wireValid;
    wire [0:0] SE_i_cmp11_i153_add230_and0;
    wire [0:0] SE_i_cmp11_i153_add230_backStall;
    wire [0:0] SE_i_cmp11_i153_add230_V0;
    wire [0:0] SE_i_cmp11_i98_add241_wireValid;
    wire [0:0] SE_i_cmp11_i98_add241_and0;
    wire [0:0] SE_i_cmp11_i98_add241_and1;
    wire [0:0] SE_i_cmp11_i98_add241_backStall;
    wire [0:0] SE_i_cmp11_i98_add241_V0;
    wire [0:0] SE_i_cmp2_i126_add232_wireValid;
    wire [0:0] SE_i_cmp2_i126_add232_and0;
    wire [0:0] SE_i_cmp2_i126_add232_backStall;
    wire [0:0] SE_i_cmp2_i126_add232_V0;
    wire [0:0] SE_i_cmp2_i88_add243_wireValid;
    wire [0:0] SE_i_cmp2_i88_add243_wireStall;
    wire [0:0] SE_i_cmp2_i88_add243_StallValid;
    wire [0:0] SE_i_cmp2_i88_add243_toReg0;
    reg [0:0] SE_i_cmp2_i88_add243_fromReg0;
    wire [0:0] SE_i_cmp2_i88_add243_consumed0;
    wire [0:0] SE_i_cmp2_i88_add243_toReg1;
    reg [0:0] SE_i_cmp2_i88_add243_fromReg1;
    wire [0:0] SE_i_cmp2_i88_add243_consumed1;
    wire [0:0] SE_i_cmp2_i88_add243_and0;
    wire [0:0] SE_i_cmp2_i88_add243_and1;
    wire [0:0] SE_i_cmp2_i88_add243_or0;
    wire [0:0] SE_i_cmp2_i88_add243_backStall;
    wire [0:0] SE_i_cmp2_i88_add243_V0;
    wire [0:0] SE_i_cmp2_i88_add243_V1;
    reg [0:0] SE_i_cmp3_i_10_i62_add112_R_v_0;
    wire [0:0] SE_i_cmp3_i_10_i62_add112_v_s_0;
    wire [0:0] SE_i_cmp3_i_10_i62_add112_s_tv_0;
    wire [0:0] SE_i_cmp3_i_10_i62_add112_backEN;
    wire [0:0] SE_i_cmp3_i_10_i62_add112_and0;
    wire [0:0] SE_i_cmp3_i_10_i62_add112_backStall;
    wire [0:0] SE_i_cmp3_i_10_i62_add112_V0;
    wire [0:0] SE_i_cmp3_i_11_i68_add117_wireValid;
    wire [0:0] SE_i_cmp3_i_11_i68_add117_and0;
    wire [0:0] SE_i_cmp3_i_11_i68_add117_backStall;
    wire [0:0] SE_i_cmp3_i_11_i68_add117_V0;
    reg [0:0] SE_i_cmp3_i_12_i74_add122_R_v_0;
    wire [0:0] SE_i_cmp3_i_12_i74_add122_v_s_0;
    wire [0:0] SE_i_cmp3_i_12_i74_add122_s_tv_0;
    wire [0:0] SE_i_cmp3_i_12_i74_add122_backEN;
    wire [0:0] SE_i_cmp3_i_12_i74_add122_backStall;
    wire [0:0] SE_i_cmp3_i_12_i74_add122_V0;
    wire [0:0] SE_i_cmp3_i_13_i80_add127_wireValid;
    wire [0:0] SE_i_cmp3_i_13_i80_add127_and0;
    wire [0:0] SE_i_cmp3_i_13_i80_add127_backStall;
    wire [0:0] SE_i_cmp3_i_13_i80_add127_V0;
    reg [0:0] SE_i_cmp3_i_14_i86_add132_R_v_0;
    wire [0:0] SE_i_cmp3_i_14_i86_add132_v_s_0;
    wire [0:0] SE_i_cmp3_i_14_i86_add132_s_tv_0;
    wire [0:0] SE_i_cmp3_i_14_i86_add132_backEN;
    wire [0:0] SE_i_cmp3_i_14_i86_add132_and0;
    wire [0:0] SE_i_cmp3_i_14_i86_add132_backStall;
    wire [0:0] SE_i_cmp3_i_14_i86_add132_V0;
    wire [0:0] SE_i_cmp3_i_15_i92_add137_wireValid;
    wire [0:0] SE_i_cmp3_i_15_i92_add137_and0;
    wire [0:0] SE_i_cmp3_i_15_i92_add137_backStall;
    wire [0:0] SE_i_cmp3_i_15_i92_add137_V0;
    reg [0:0] SE_i_cmp3_i_16_i98_add142_R_v_0;
    wire [0:0] SE_i_cmp3_i_16_i98_add142_v_s_0;
    wire [0:0] SE_i_cmp3_i_16_i98_add142_s_tv_0;
    wire [0:0] SE_i_cmp3_i_16_i98_add142_backEN;
    wire [0:0] SE_i_cmp3_i_16_i98_add142_backStall;
    wire [0:0] SE_i_cmp3_i_16_i98_add142_V0;
    wire [0:0] SE_i_cmp3_i_17_i104_add147_wireValid;
    wire [0:0] SE_i_cmp3_i_17_i104_add147_and0;
    wire [0:0] SE_i_cmp3_i_17_i104_add147_backStall;
    wire [0:0] SE_i_cmp3_i_17_i104_add147_V0;
    reg [0:0] SE_i_cmp3_i_18_i110_add152_R_v_0;
    wire [0:0] SE_i_cmp3_i_18_i110_add152_v_s_0;
    wire [0:0] SE_i_cmp3_i_18_i110_add152_s_tv_0;
    wire [0:0] SE_i_cmp3_i_18_i110_add152_backEN;
    wire [0:0] SE_i_cmp3_i_18_i110_add152_and0;
    wire [0:0] SE_i_cmp3_i_18_i110_add152_backStall;
    wire [0:0] SE_i_cmp3_i_18_i110_add152_V0;
    wire [0:0] SE_i_cmp3_i_19_i116_add157_wireValid;
    wire [0:0] SE_i_cmp3_i_19_i116_add157_and0;
    wire [0:0] SE_i_cmp3_i_19_i116_add157_backStall;
    wire [0:0] SE_i_cmp3_i_19_i116_add157_V0;
    wire [0:0] SE_i_cmp3_i_1_i8_add67_wireValid;
    wire [0:0] SE_i_cmp3_i_1_i8_add67_and0;
    wire [0:0] SE_i_cmp3_i_1_i8_add67_backStall;
    wire [0:0] SE_i_cmp3_i_1_i8_add67_V0;
    reg [0:0] SE_i_cmp3_i_20_i122_add162_R_v_0;
    wire [0:0] SE_i_cmp3_i_20_i122_add162_v_s_0;
    wire [0:0] SE_i_cmp3_i_20_i122_add162_s_tv_0;
    wire [0:0] SE_i_cmp3_i_20_i122_add162_backEN;
    wire [0:0] SE_i_cmp3_i_20_i122_add162_and0;
    wire [0:0] SE_i_cmp3_i_20_i122_add162_backStall;
    wire [0:0] SE_i_cmp3_i_20_i122_add162_V0;
    wire [0:0] SE_i_cmp3_i_21_i128_add167_wireValid;
    wire [0:0] SE_i_cmp3_i_21_i128_add167_and0;
    wire [0:0] SE_i_cmp3_i_21_i128_add167_backStall;
    wire [0:0] SE_i_cmp3_i_21_i128_add167_V0;
    reg [0:0] SE_i_cmp3_i_22_i134_add172_R_v_0;
    wire [0:0] SE_i_cmp3_i_22_i134_add172_v_s_0;
    wire [0:0] SE_i_cmp3_i_22_i134_add172_s_tv_0;
    wire [0:0] SE_i_cmp3_i_22_i134_add172_backEN;
    wire [0:0] SE_i_cmp3_i_22_i134_add172_backStall;
    wire [0:0] SE_i_cmp3_i_22_i134_add172_V0;
    wire [0:0] SE_i_cmp3_i_23_i140_add177_wireValid;
    wire [0:0] SE_i_cmp3_i_23_i140_add177_and0;
    wire [0:0] SE_i_cmp3_i_23_i140_add177_backStall;
    wire [0:0] SE_i_cmp3_i_23_i140_add177_V0;
    reg [0:0] SE_i_cmp3_i_24_i146_add182_R_v_0;
    wire [0:0] SE_i_cmp3_i_24_i146_add182_v_s_0;
    wire [0:0] SE_i_cmp3_i_24_i146_add182_s_tv_0;
    wire [0:0] SE_i_cmp3_i_24_i146_add182_backEN;
    wire [0:0] SE_i_cmp3_i_24_i146_add182_and0;
    wire [0:0] SE_i_cmp3_i_24_i146_add182_backStall;
    wire [0:0] SE_i_cmp3_i_24_i146_add182_V0;
    wire [0:0] SE_i_cmp3_i_25_i152_add187_wireValid;
    wire [0:0] SE_i_cmp3_i_25_i152_add187_and0;
    wire [0:0] SE_i_cmp3_i_25_i152_add187_backStall;
    wire [0:0] SE_i_cmp3_i_25_i152_add187_V0;
    reg [0:0] SE_i_cmp3_i_26_i158_add192_R_v_0;
    wire [0:0] SE_i_cmp3_i_26_i158_add192_v_s_0;
    wire [0:0] SE_i_cmp3_i_26_i158_add192_s_tv_0;
    wire [0:0] SE_i_cmp3_i_26_i158_add192_backEN;
    wire [0:0] SE_i_cmp3_i_26_i158_add192_backStall;
    wire [0:0] SE_i_cmp3_i_26_i158_add192_V0;
    wire [0:0] SE_i_cmp3_i_27_i164_add197_wireValid;
    wire [0:0] SE_i_cmp3_i_27_i164_add197_and0;
    wire [0:0] SE_i_cmp3_i_27_i164_add197_backStall;
    wire [0:0] SE_i_cmp3_i_27_i164_add197_V0;
    reg [0:0] SE_i_cmp3_i_28_i170_add202_R_v_0;
    wire [0:0] SE_i_cmp3_i_28_i170_add202_v_s_0;
    wire [0:0] SE_i_cmp3_i_28_i170_add202_s_tv_0;
    wire [0:0] SE_i_cmp3_i_28_i170_add202_backEN;
    wire [0:0] SE_i_cmp3_i_28_i170_add202_and0;
    wire [0:0] SE_i_cmp3_i_28_i170_add202_backStall;
    wire [0:0] SE_i_cmp3_i_28_i170_add202_V0;
    wire [0:0] SE_i_cmp3_i_29_i176_add207_wireValid;
    wire [0:0] SE_i_cmp3_i_29_i176_add207_and0;
    wire [0:0] SE_i_cmp3_i_29_i176_add207_backStall;
    wire [0:0] SE_i_cmp3_i_29_i176_add207_V0;
    reg [0:0] SE_i_cmp3_i_2_i14_add72_R_v_0;
    wire [0:0] SE_i_cmp3_i_2_i14_add72_v_s_0;
    wire [0:0] SE_i_cmp3_i_2_i14_add72_s_tv_0;
    wire [0:0] SE_i_cmp3_i_2_i14_add72_backEN;
    wire [0:0] SE_i_cmp3_i_2_i14_add72_backStall;
    wire [0:0] SE_i_cmp3_i_2_i14_add72_V0;
    reg [0:0] SE_i_cmp3_i_30_i182_add212_R_v_0;
    wire [0:0] SE_i_cmp3_i_30_i182_add212_v_s_0;
    wire [0:0] SE_i_cmp3_i_30_i182_add212_s_tv_0;
    wire [0:0] SE_i_cmp3_i_30_i182_add212_backEN;
    wire [0:0] SE_i_cmp3_i_30_i182_add212_and0;
    wire [0:0] SE_i_cmp3_i_30_i182_add212_backStall;
    wire [0:0] SE_i_cmp3_i_30_i182_add212_V0;
    wire [0:0] SE_i_cmp3_i_31_i188_add217_wireValid;
    wire [0:0] SE_i_cmp3_i_31_i188_add217_and0;
    wire [0:0] SE_i_cmp3_i_31_i188_add217_backStall;
    wire [0:0] SE_i_cmp3_i_31_i188_add217_V0;
    wire [0:0] SE_i_cmp3_i_3_i20_add77_wireValid;
    wire [0:0] SE_i_cmp3_i_3_i20_add77_and0;
    wire [0:0] SE_i_cmp3_i_3_i20_add77_backStall;
    wire [0:0] SE_i_cmp3_i_3_i20_add77_V0;
    reg [0:0] SE_i_cmp3_i_4_i26_add82_R_v_0;
    wire [0:0] SE_i_cmp3_i_4_i26_add82_v_s_0;
    wire [0:0] SE_i_cmp3_i_4_i26_add82_s_tv_0;
    wire [0:0] SE_i_cmp3_i_4_i26_add82_backEN;
    wire [0:0] SE_i_cmp3_i_4_i26_add82_and0;
    wire [0:0] SE_i_cmp3_i_4_i26_add82_backStall;
    wire [0:0] SE_i_cmp3_i_4_i26_add82_V0;
    wire [0:0] SE_i_cmp3_i_5_i32_add87_wireValid;
    wire [0:0] SE_i_cmp3_i_5_i32_add87_and0;
    wire [0:0] SE_i_cmp3_i_5_i32_add87_backStall;
    wire [0:0] SE_i_cmp3_i_5_i32_add87_V0;
    reg [0:0] SE_i_cmp3_i_6_i38_add92_R_v_0;
    wire [0:0] SE_i_cmp3_i_6_i38_add92_v_s_0;
    wire [0:0] SE_i_cmp3_i_6_i38_add92_s_tv_0;
    wire [0:0] SE_i_cmp3_i_6_i38_add92_backEN;
    wire [0:0] SE_i_cmp3_i_6_i38_add92_backStall;
    wire [0:0] SE_i_cmp3_i_6_i38_add92_V0;
    wire [0:0] SE_i_cmp3_i_7_i44_add97_wireValid;
    wire [0:0] SE_i_cmp3_i_7_i44_add97_and0;
    wire [0:0] SE_i_cmp3_i_7_i44_add97_backStall;
    wire [0:0] SE_i_cmp3_i_7_i44_add97_V0;
    reg [0:0] SE_i_cmp3_i_8_i50_add102_R_v_0;
    wire [0:0] SE_i_cmp3_i_8_i50_add102_v_s_0;
    wire [0:0] SE_i_cmp3_i_8_i50_add102_s_tv_0;
    wire [0:0] SE_i_cmp3_i_8_i50_add102_backEN;
    wire [0:0] SE_i_cmp3_i_8_i50_add102_and0;
    wire [0:0] SE_i_cmp3_i_8_i50_add102_backStall;
    wire [0:0] SE_i_cmp3_i_8_i50_add102_V0;
    wire [0:0] SE_i_cmp3_i_9_i56_add107_wireValid;
    wire [0:0] SE_i_cmp3_i_9_i56_add107_and0;
    wire [0:0] SE_i_cmp3_i_9_i56_add107_backStall;
    wire [0:0] SE_i_cmp3_i_9_i56_add107_V0;
    reg [0:0] SE_i_cmp3_i_i2_add61_R_v_0;
    wire [0:0] SE_i_cmp3_i_i2_add61_v_s_0;
    wire [0:0] SE_i_cmp3_i_i2_add61_s_tv_0;
    wire [0:0] SE_i_cmp3_i_i2_add61_backEN;
    wire [0:0] SE_i_cmp3_i_i2_add61_and0;
    wire [0:0] SE_i_cmp3_i_i2_add61_backStall;
    wire [0:0] SE_i_cmp3_i_i2_add61_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_wireStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_StallValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_toReg0;
    reg [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_fromReg0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_consumed0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_toReg1;
    reg [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_fromReg1;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_consumed1;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_or0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_V1;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_wireStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_StallValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_toReg0;
    reg [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_fromReg0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_consumed0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_toReg1;
    reg [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_fromReg1;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_consumed1;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_or0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_V1;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_and0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_and1;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_and0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_and1;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_wireStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_StallValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_toReg0;
    reg [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_fromReg0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_consumed0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_toReg1;
    reg [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_fromReg1;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_consumed1;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_or0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_V1;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_and0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_and0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_and0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_and0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_and0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_and0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_and0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_and0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_and0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_and0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_and0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_and0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_and0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_V0;
    wire [0:0] SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_wireValid;
    wire [0:0] SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_and0;
    wire [0:0] SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_backStall;
    wire [0:0] SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_V0;
    wire [0:0] SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_wireValid;
    wire [0:0] SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_and0;
    wire [0:0] SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_backStall;
    wire [0:0] SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_V0;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_backStall;
    wire [0:0] SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_V0;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm1269_add223_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm1269_add223_wireStall;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm1269_add223_StallValid;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm1269_add223_toReg0;
    reg [0:0] SE_out_i_llvm_fpga_mem_lm1269_add223_fromReg0;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm1269_add223_consumed0;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm1269_add223_toReg1;
    reg [0:0] SE_out_i_llvm_fpga_mem_lm1269_add223_fromReg1;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm1269_add223_consumed1;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm1269_add223_or0;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm1269_add223_backStall;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm1269_add223_V0;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm1269_add223_V1;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm12810_add224_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm12810_add224_wireStall;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm12810_add224_StallValid;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm12810_add224_toReg0;
    reg [0:0] SE_out_i_llvm_fpga_mem_lm12810_add224_fromReg0;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm12810_add224_consumed0;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm12810_add224_toReg1;
    reg [0:0] SE_out_i_llvm_fpga_mem_lm12810_add224_fromReg1;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm12810_add224_consumed1;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm12810_add224_or0;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm12810_add224_backStall;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm12810_add224_V0;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm12810_add224_V1;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13212_add275_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13212_add275_wireStall;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13212_add275_StallValid;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13212_add275_toReg0;
    reg [0:0] SE_out_i_llvm_fpga_mem_lm13212_add275_fromReg0;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13212_add275_consumed0;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13212_add275_toReg1;
    reg [0:0] SE_out_i_llvm_fpga_mem_lm13212_add275_fromReg1;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13212_add275_consumed1;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13212_add275_toReg2;
    reg [0:0] SE_out_i_llvm_fpga_mem_lm13212_add275_fromReg2;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13212_add275_consumed2;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13212_add275_or0;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13212_add275_or1;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13212_add275_backStall;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13212_add275_V0;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13212_add275_V1;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13212_add275_V2;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13413_add276_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13413_add276_wireStall;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13413_add276_StallValid;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13413_add276_toReg0;
    reg [0:0] SE_out_i_llvm_fpga_mem_lm13413_add276_fromReg0;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13413_add276_consumed0;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13413_add276_toReg1;
    reg [0:0] SE_out_i_llvm_fpga_mem_lm13413_add276_fromReg1;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13413_add276_consumed1;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13413_add276_toReg2;
    reg [0:0] SE_out_i_llvm_fpga_mem_lm13413_add276_fromReg2;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13413_add276_consumed2;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13413_add276_or0;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13413_add276_or1;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13413_add276_backStall;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13413_add276_V0;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13413_add276_V1;
    wire [0:0] SE_out_i_llvm_fpga_mem_lm13413_add276_V2;
    wire [0:0] SE_out_i_llvm_fpga_mem_memdep_16_add273_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_mem_memdep_16_add273_wireStall;
    wire [0:0] SE_out_i_llvm_fpga_mem_memdep_16_add273_StallValid;
    wire [0:0] SE_out_i_llvm_fpga_mem_memdep_16_add273_toReg0;
    reg [0:0] SE_out_i_llvm_fpga_mem_memdep_16_add273_fromReg0;
    wire [0:0] SE_out_i_llvm_fpga_mem_memdep_16_add273_consumed0;
    wire [0:0] SE_out_i_llvm_fpga_mem_memdep_16_add273_toReg1;
    reg [0:0] SE_out_i_llvm_fpga_mem_memdep_16_add273_fromReg1;
    wire [0:0] SE_out_i_llvm_fpga_mem_memdep_16_add273_consumed1;
    wire [0:0] SE_out_i_llvm_fpga_mem_memdep_16_add273_toReg2;
    reg [0:0] SE_out_i_llvm_fpga_mem_memdep_16_add273_fromReg2;
    wire [0:0] SE_out_i_llvm_fpga_mem_memdep_16_add273_consumed2;
    wire [0:0] SE_out_i_llvm_fpga_mem_memdep_16_add273_or0;
    wire [0:0] SE_out_i_llvm_fpga_mem_memdep_16_add273_or1;
    wire [0:0] SE_out_i_llvm_fpga_mem_memdep_16_add273_backStall;
    wire [0:0] SE_out_i_llvm_fpga_mem_memdep_16_add273_V0;
    wire [0:0] SE_out_i_llvm_fpga_mem_memdep_16_add273_V1;
    wire [0:0] SE_out_i_llvm_fpga_mem_memdep_16_add273_V2;
    wire [0:0] SE_out_i_llvm_fpga_pipeline_keep_going126_add45_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_pipeline_keep_going126_add45_wireStall;
    wire [0:0] SE_out_i_llvm_fpga_pipeline_keep_going126_add45_StallValid;
    wire [0:0] SE_out_i_llvm_fpga_pipeline_keep_going126_add45_toReg0;
    reg [0:0] SE_out_i_llvm_fpga_pipeline_keep_going126_add45_fromReg0;
    wire [0:0] SE_out_i_llvm_fpga_pipeline_keep_going126_add45_consumed0;
    wire [0:0] SE_out_i_llvm_fpga_pipeline_keep_going126_add45_toReg1;
    reg [0:0] SE_out_i_llvm_fpga_pipeline_keep_going126_add45_fromReg1;
    wire [0:0] SE_out_i_llvm_fpga_pipeline_keep_going126_add45_consumed1;
    wire [0:0] SE_out_i_llvm_fpga_pipeline_keep_going126_add45_toReg2;
    reg [0:0] SE_out_i_llvm_fpga_pipeline_keep_going126_add45_fromReg2;
    wire [0:0] SE_out_i_llvm_fpga_pipeline_keep_going126_add45_consumed2;
    wire [0:0] SE_out_i_llvm_fpga_pipeline_keep_going126_add45_or0;
    wire [0:0] SE_out_i_llvm_fpga_pipeline_keep_going126_add45_or1;
    wire [0:0] SE_out_i_llvm_fpga_pipeline_keep_going126_add45_backStall;
    wire [0:0] SE_out_i_llvm_fpga_pipeline_keep_going126_add45_V0;
    wire [0:0] SE_out_i_llvm_fpga_pipeline_keep_going126_add45_V1;
    wire [0:0] SE_out_i_llvm_fpga_pipeline_keep_going126_add45_V2;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_wireStall;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_StallValid;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_toReg0;
    reg [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_fromReg0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_consumed0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_toReg1;
    reg [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_fromReg1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_consumed1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_toReg2;
    reg [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_fromReg2;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_consumed2;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_toReg3;
    reg [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_fromReg3;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_consumed3;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_or0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_or1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_or2;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_backStall;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_V0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_V1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_V2;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_V3;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_wireStall;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_StallValid;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_toReg0;
    reg [0:0] SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_fromReg0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_consumed0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_toReg1;
    reg [0:0] SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_fromReg1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_consumed1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_or0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_backStall;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_V0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_V1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_wireStall;
    wire [0:0] SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_StallValid;
    wire [0:0] SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_toReg0;
    reg [0:0] SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_fromReg0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_consumed0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_toReg1;
    reg [0:0] SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_fromReg1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_consumed1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_toReg2;
    reg [0:0] SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_fromReg2;
    wire [0:0] SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_consumed2;
    wire [0:0] SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_or0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_or1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_backStall;
    wire [0:0] SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_V0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_V1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_V2;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_wireStall;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_StallValid;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_toReg0;
    reg [0:0] SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_fromReg0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_consumed0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_toReg1;
    reg [0:0] SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_fromReg1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_consumed1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_or0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_backStall;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_V0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_V1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_wireStall;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_StallValid;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_toReg0;
    reg [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_fromReg0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_consumed0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_toReg1;
    reg [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_fromReg1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_consumed1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_toReg2;
    reg [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_fromReg2;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_consumed2;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_toReg3;
    reg [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_fromReg3;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_consumed3;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_or0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_or1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_or2;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_backStall;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_V0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_V1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_V2;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_V3;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop6_add47_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop6_add47_wireStall;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop6_add47_StallValid;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop6_add47_toReg0;
    reg [0:0] SE_out_i_llvm_fpga_pop_i32_pop6_add47_fromReg0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop6_add47_consumed0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop6_add47_toReg1;
    reg [0:0] SE_out_i_llvm_fpga_pop_i32_pop6_add47_fromReg1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop6_add47_consumed1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop6_add47_and0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop6_add47_and1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop6_add47_or0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop6_add47_backStall;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop6_add47_V0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop6_add47_V1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop7_add48_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop7_add48_wireStall;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop7_add48_StallValid;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop7_add48_toReg0;
    reg [0:0] SE_out_i_llvm_fpga_pop_i32_pop7_add48_fromReg0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop7_add48_consumed0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop7_add48_toReg1;
    reg [0:0] SE_out_i_llvm_fpga_pop_i32_pop7_add48_fromReg1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop7_add48_consumed1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop7_add48_and0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop7_add48_and1;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop7_add48_or0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop7_add48_backStall;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop7_add48_V0;
    wire [0:0] SE_out_i_llvm_fpga_pop_i32_pop7_add48_V1;
    wire [0:0] SE_out_i_llvm_fpga_push_i17_cleanups129_push13_add293_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_push_i17_cleanups129_push13_add293_backStall;
    wire [0:0] SE_out_i_llvm_fpga_push_i17_initerations124_push12_add228_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_push_i17_initerations124_push12_add228_backStall;
    wire [0:0] SE_out_i_llvm_fpga_push_i1_lastiniteration128_add244_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_push_i1_lastiniteration128_add244_backStall;
    wire [0:0] SE_in_i_llvm_fpga_push_i1_memdep_phi17_push9_add274_wireValid;
    wire [0:0] SE_in_i_llvm_fpga_push_i1_memdep_phi17_push9_add274_and0;
    wire [0:0] SE_in_i_llvm_fpga_push_i1_memdep_phi17_push9_add274_backStall;
    wire [0:0] SE_in_i_llvm_fpga_push_i1_memdep_phi17_push9_add274_V0;
    wire [0:0] SE_out_i_llvm_fpga_push_i1_memdep_phi17_push9_add274_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_push_i1_memdep_phi17_push9_add274_backStall;
    wire [0:0] SE_out_i_llvm_fpga_push_i1_memdep_phi18_push10_add284_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_push_i1_memdep_phi18_push10_add284_backStall;
    wire [0:0] SE_out_i_llvm_fpga_push_i1_memdep_phi19_push11_add285_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_push_i1_memdep_phi19_push11_add285_backStall;
    wire [0:0] SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_wireValid;
    wire [0:0] SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_backStall;
    wire [0:0] SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_V0;
    wire [0:0] SE_out_i_llvm_fpga_push_i1_notexitcond136_add289_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_push_i1_notexitcond136_add289_backStall;
    wire [0:0] SE_in_i_llvm_fpga_push_i32_inc35145_push14_add226_wireValid;
    wire [0:0] SE_in_i_llvm_fpga_push_i32_inc35145_push14_add226_and0;
    wire [0:0] SE_in_i_llvm_fpga_push_i32_inc35145_push14_add226_backStall;
    wire [0:0] SE_in_i_llvm_fpga_push_i32_inc35145_push14_add226_V0;
    wire [0:0] SE_in_i_llvm_fpga_push_i32_j_0440_push8_add240_wireValid;
    wire [0:0] SE_in_i_llvm_fpga_push_i32_j_0440_push8_add240_and0;
    wire [0:0] SE_in_i_llvm_fpga_push_i32_j_0440_push8_add240_backStall;
    wire [0:0] SE_in_i_llvm_fpga_push_i32_j_0440_push8_add240_V0;
    wire [0:0] SE_out_i_llvm_fpga_push_i32_j_0440_push8_add240_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_push_i32_j_0440_push8_add240_backStall;
    wire [0:0] SE_out_i_llvm_fpga_push_i32_push6_add280_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_push_i32_push6_add280_backStall;
    wire [0:0] SE_out_i_llvm_fpga_push_i32_push7_add277_wireValid;
    wire [0:0] SE_out_i_llvm_fpga_push_i32_push7_add277_backStall;
    reg [0:0] SE_i_masked135_add291_R_v_0;
    wire [0:0] SE_i_masked135_add291_v_s_0;
    wire [0:0] SE_i_masked135_add291_s_tv_0;
    wire [0:0] SE_i_masked135_add291_backEN;
    wire [0:0] SE_i_masked135_add291_backStall;
    wire [0:0] SE_i_masked135_add291_V0;
    wire [0:0] SE_i_next_initerations125_add56_vt_select_15_wireValid;
    wire [0:0] SE_i_next_initerations125_add56_vt_select_15_wireStall;
    wire [0:0] SE_i_next_initerations125_add56_vt_select_15_StallValid;
    wire [0:0] SE_i_next_initerations125_add56_vt_select_15_toReg0;
    reg [0:0] SE_i_next_initerations125_add56_vt_select_15_fromReg0;
    wire [0:0] SE_i_next_initerations125_add56_vt_select_15_consumed0;
    wire [0:0] SE_i_next_initerations125_add56_vt_select_15_toReg1;
    reg [0:0] SE_i_next_initerations125_add56_vt_select_15_fromReg1;
    wire [0:0] SE_i_next_initerations125_add56_vt_select_15_consumed1;
    wire [0:0] SE_i_next_initerations125_add56_vt_select_15_and0;
    wire [0:0] SE_i_next_initerations125_add56_vt_select_15_or0;
    wire [0:0] SE_i_next_initerations125_add56_vt_select_15_backStall;
    wire [0:0] SE_i_next_initerations125_add56_vt_select_15_V0;
    wire [0:0] SE_i_next_initerations125_add56_vt_select_15_V1;
    reg [0:0] SE_i_or133_add290_R_v_0;
    wire [0:0] SE_i_or133_add290_v_s_0;
    wire [0:0] SE_i_or133_add290_s_tv_0;
    wire [0:0] SE_i_or133_add290_backEN;
    wire [0:0] SE_i_or133_add290_backStall;
    wire [0:0] SE_i_or133_add290_V0;
    reg [0:0] SE_i_or_cond432_add251_R_v_0;
    reg [0:0] SE_i_or_cond432_add251_R_v_1;
    wire [0:0] SE_i_or_cond432_add251_v_s_0;
    wire [0:0] SE_i_or_cond432_add251_s_tv_0;
    wire [0:0] SE_i_or_cond432_add251_s_tv_1;
    wire [0:0] SE_i_or_cond432_add251_backEN;
    wire [0:0] SE_i_or_cond432_add251_and0;
    wire [0:0] SE_i_or_cond432_add251_or0;
    wire [0:0] SE_i_or_cond432_add251_backStall;
    wire [0:0] SE_i_or_cond432_add251_V0;
    wire [0:0] SE_i_or_cond432_add251_V1;
    reg [0:0] SE_i_or_cond433_add252_R_v_0;
    wire [0:0] SE_i_or_cond433_add252_v_s_0;
    wire [0:0] SE_i_or_cond433_add252_s_tv_0;
    wire [0:0] SE_i_or_cond433_add252_backEN;
    wire [0:0] SE_i_or_cond433_add252_and0;
    wire [0:0] SE_i_or_cond433_add252_backStall;
    wire [0:0] SE_i_or_cond433_add252_V0;
    wire [0:0] SE_i_pred_sel29_add259_wireValid;
    wire [0:0] SE_i_pred_sel29_add259_and0;
    wire [0:0] SE_i_pred_sel29_add259_backStall;
    wire [0:0] SE_i_pred_sel29_add259_V0;
    wire [0:0] SE_i_sub4_i_11_i69_add119_wireValid;
    wire [0:0] SE_i_sub4_i_11_i69_add119_wireStall;
    wire [0:0] SE_i_sub4_i_11_i69_add119_StallValid;
    wire [0:0] SE_i_sub4_i_11_i69_add119_toReg0;
    reg [0:0] SE_i_sub4_i_11_i69_add119_fromReg0;
    wire [0:0] SE_i_sub4_i_11_i69_add119_consumed0;
    wire [0:0] SE_i_sub4_i_11_i69_add119_toReg1;
    reg [0:0] SE_i_sub4_i_11_i69_add119_fromReg1;
    wire [0:0] SE_i_sub4_i_11_i69_add119_consumed1;
    wire [0:0] SE_i_sub4_i_11_i69_add119_and0;
    wire [0:0] SE_i_sub4_i_11_i69_add119_and1;
    wire [0:0] SE_i_sub4_i_11_i69_add119_or0;
    wire [0:0] SE_i_sub4_i_11_i69_add119_backStall;
    wire [0:0] SE_i_sub4_i_11_i69_add119_V0;
    wire [0:0] SE_i_sub4_i_11_i69_add119_V1;
    wire [0:0] SE_i_sub4_i_13_i81_add129_wireValid;
    wire [0:0] SE_i_sub4_i_13_i81_add129_wireStall;
    wire [0:0] SE_i_sub4_i_13_i81_add129_StallValid;
    wire [0:0] SE_i_sub4_i_13_i81_add129_toReg0;
    reg [0:0] SE_i_sub4_i_13_i81_add129_fromReg0;
    wire [0:0] SE_i_sub4_i_13_i81_add129_consumed0;
    wire [0:0] SE_i_sub4_i_13_i81_add129_toReg1;
    reg [0:0] SE_i_sub4_i_13_i81_add129_fromReg1;
    wire [0:0] SE_i_sub4_i_13_i81_add129_consumed1;
    wire [0:0] SE_i_sub4_i_13_i81_add129_and0;
    wire [0:0] SE_i_sub4_i_13_i81_add129_and1;
    wire [0:0] SE_i_sub4_i_13_i81_add129_or0;
    wire [0:0] SE_i_sub4_i_13_i81_add129_backStall;
    wire [0:0] SE_i_sub4_i_13_i81_add129_V0;
    wire [0:0] SE_i_sub4_i_13_i81_add129_V1;
    wire [0:0] SE_i_sub4_i_15_i93_add139_wireValid;
    wire [0:0] SE_i_sub4_i_15_i93_add139_wireStall;
    wire [0:0] SE_i_sub4_i_15_i93_add139_StallValid;
    wire [0:0] SE_i_sub4_i_15_i93_add139_toReg0;
    reg [0:0] SE_i_sub4_i_15_i93_add139_fromReg0;
    wire [0:0] SE_i_sub4_i_15_i93_add139_consumed0;
    wire [0:0] SE_i_sub4_i_15_i93_add139_toReg1;
    reg [0:0] SE_i_sub4_i_15_i93_add139_fromReg1;
    wire [0:0] SE_i_sub4_i_15_i93_add139_consumed1;
    wire [0:0] SE_i_sub4_i_15_i93_add139_and0;
    wire [0:0] SE_i_sub4_i_15_i93_add139_and1;
    wire [0:0] SE_i_sub4_i_15_i93_add139_or0;
    wire [0:0] SE_i_sub4_i_15_i93_add139_backStall;
    wire [0:0] SE_i_sub4_i_15_i93_add139_V0;
    wire [0:0] SE_i_sub4_i_15_i93_add139_V1;
    wire [0:0] SE_i_sub4_i_17_i105_add149_wireValid;
    wire [0:0] SE_i_sub4_i_17_i105_add149_wireStall;
    wire [0:0] SE_i_sub4_i_17_i105_add149_StallValid;
    wire [0:0] SE_i_sub4_i_17_i105_add149_toReg0;
    reg [0:0] SE_i_sub4_i_17_i105_add149_fromReg0;
    wire [0:0] SE_i_sub4_i_17_i105_add149_consumed0;
    wire [0:0] SE_i_sub4_i_17_i105_add149_toReg1;
    reg [0:0] SE_i_sub4_i_17_i105_add149_fromReg1;
    wire [0:0] SE_i_sub4_i_17_i105_add149_consumed1;
    wire [0:0] SE_i_sub4_i_17_i105_add149_and0;
    wire [0:0] SE_i_sub4_i_17_i105_add149_and1;
    wire [0:0] SE_i_sub4_i_17_i105_add149_or0;
    wire [0:0] SE_i_sub4_i_17_i105_add149_backStall;
    wire [0:0] SE_i_sub4_i_17_i105_add149_V0;
    wire [0:0] SE_i_sub4_i_17_i105_add149_V1;
    wire [0:0] SE_i_sub4_i_19_i117_add159_wireValid;
    wire [0:0] SE_i_sub4_i_19_i117_add159_wireStall;
    wire [0:0] SE_i_sub4_i_19_i117_add159_StallValid;
    wire [0:0] SE_i_sub4_i_19_i117_add159_toReg0;
    reg [0:0] SE_i_sub4_i_19_i117_add159_fromReg0;
    wire [0:0] SE_i_sub4_i_19_i117_add159_consumed0;
    wire [0:0] SE_i_sub4_i_19_i117_add159_toReg1;
    reg [0:0] SE_i_sub4_i_19_i117_add159_fromReg1;
    wire [0:0] SE_i_sub4_i_19_i117_add159_consumed1;
    wire [0:0] SE_i_sub4_i_19_i117_add159_and0;
    wire [0:0] SE_i_sub4_i_19_i117_add159_and1;
    wire [0:0] SE_i_sub4_i_19_i117_add159_or0;
    wire [0:0] SE_i_sub4_i_19_i117_add159_backStall;
    wire [0:0] SE_i_sub4_i_19_i117_add159_V0;
    wire [0:0] SE_i_sub4_i_19_i117_add159_V1;
    wire [0:0] SE_i_sub4_i_1_i9_add69_wireValid;
    wire [0:0] SE_i_sub4_i_1_i9_add69_wireStall;
    wire [0:0] SE_i_sub4_i_1_i9_add69_StallValid;
    wire [0:0] SE_i_sub4_i_1_i9_add69_toReg0;
    reg [0:0] SE_i_sub4_i_1_i9_add69_fromReg0;
    wire [0:0] SE_i_sub4_i_1_i9_add69_consumed0;
    wire [0:0] SE_i_sub4_i_1_i9_add69_toReg1;
    reg [0:0] SE_i_sub4_i_1_i9_add69_fromReg1;
    wire [0:0] SE_i_sub4_i_1_i9_add69_consumed1;
    wire [0:0] SE_i_sub4_i_1_i9_add69_and0;
    wire [0:0] SE_i_sub4_i_1_i9_add69_and1;
    wire [0:0] SE_i_sub4_i_1_i9_add69_or0;
    wire [0:0] SE_i_sub4_i_1_i9_add69_backStall;
    wire [0:0] SE_i_sub4_i_1_i9_add69_V0;
    wire [0:0] SE_i_sub4_i_1_i9_add69_V1;
    wire [0:0] SE_i_sub4_i_21_i129_add169_wireValid;
    wire [0:0] SE_i_sub4_i_21_i129_add169_wireStall;
    wire [0:0] SE_i_sub4_i_21_i129_add169_StallValid;
    wire [0:0] SE_i_sub4_i_21_i129_add169_toReg0;
    reg [0:0] SE_i_sub4_i_21_i129_add169_fromReg0;
    wire [0:0] SE_i_sub4_i_21_i129_add169_consumed0;
    wire [0:0] SE_i_sub4_i_21_i129_add169_toReg1;
    reg [0:0] SE_i_sub4_i_21_i129_add169_fromReg1;
    wire [0:0] SE_i_sub4_i_21_i129_add169_consumed1;
    wire [0:0] SE_i_sub4_i_21_i129_add169_and0;
    wire [0:0] SE_i_sub4_i_21_i129_add169_and1;
    wire [0:0] SE_i_sub4_i_21_i129_add169_or0;
    wire [0:0] SE_i_sub4_i_21_i129_add169_backStall;
    wire [0:0] SE_i_sub4_i_21_i129_add169_V0;
    wire [0:0] SE_i_sub4_i_21_i129_add169_V1;
    wire [0:0] SE_i_sub4_i_23_i141_add179_wireValid;
    wire [0:0] SE_i_sub4_i_23_i141_add179_wireStall;
    wire [0:0] SE_i_sub4_i_23_i141_add179_StallValid;
    wire [0:0] SE_i_sub4_i_23_i141_add179_toReg0;
    reg [0:0] SE_i_sub4_i_23_i141_add179_fromReg0;
    wire [0:0] SE_i_sub4_i_23_i141_add179_consumed0;
    wire [0:0] SE_i_sub4_i_23_i141_add179_toReg1;
    reg [0:0] SE_i_sub4_i_23_i141_add179_fromReg1;
    wire [0:0] SE_i_sub4_i_23_i141_add179_consumed1;
    wire [0:0] SE_i_sub4_i_23_i141_add179_and0;
    wire [0:0] SE_i_sub4_i_23_i141_add179_and1;
    wire [0:0] SE_i_sub4_i_23_i141_add179_or0;
    wire [0:0] SE_i_sub4_i_23_i141_add179_backStall;
    wire [0:0] SE_i_sub4_i_23_i141_add179_V0;
    wire [0:0] SE_i_sub4_i_23_i141_add179_V1;
    wire [0:0] SE_i_sub4_i_25_i153_add189_wireValid;
    wire [0:0] SE_i_sub4_i_25_i153_add189_wireStall;
    wire [0:0] SE_i_sub4_i_25_i153_add189_StallValid;
    wire [0:0] SE_i_sub4_i_25_i153_add189_toReg0;
    reg [0:0] SE_i_sub4_i_25_i153_add189_fromReg0;
    wire [0:0] SE_i_sub4_i_25_i153_add189_consumed0;
    wire [0:0] SE_i_sub4_i_25_i153_add189_toReg1;
    reg [0:0] SE_i_sub4_i_25_i153_add189_fromReg1;
    wire [0:0] SE_i_sub4_i_25_i153_add189_consumed1;
    wire [0:0] SE_i_sub4_i_25_i153_add189_and0;
    wire [0:0] SE_i_sub4_i_25_i153_add189_and1;
    wire [0:0] SE_i_sub4_i_25_i153_add189_or0;
    wire [0:0] SE_i_sub4_i_25_i153_add189_backStall;
    wire [0:0] SE_i_sub4_i_25_i153_add189_V0;
    wire [0:0] SE_i_sub4_i_25_i153_add189_V1;
    wire [0:0] SE_i_sub4_i_27_i165_add199_wireValid;
    wire [0:0] SE_i_sub4_i_27_i165_add199_wireStall;
    wire [0:0] SE_i_sub4_i_27_i165_add199_StallValid;
    wire [0:0] SE_i_sub4_i_27_i165_add199_toReg0;
    reg [0:0] SE_i_sub4_i_27_i165_add199_fromReg0;
    wire [0:0] SE_i_sub4_i_27_i165_add199_consumed0;
    wire [0:0] SE_i_sub4_i_27_i165_add199_toReg1;
    reg [0:0] SE_i_sub4_i_27_i165_add199_fromReg1;
    wire [0:0] SE_i_sub4_i_27_i165_add199_consumed1;
    wire [0:0] SE_i_sub4_i_27_i165_add199_and0;
    wire [0:0] SE_i_sub4_i_27_i165_add199_and1;
    wire [0:0] SE_i_sub4_i_27_i165_add199_or0;
    wire [0:0] SE_i_sub4_i_27_i165_add199_backStall;
    wire [0:0] SE_i_sub4_i_27_i165_add199_V0;
    wire [0:0] SE_i_sub4_i_27_i165_add199_V1;
    wire [0:0] SE_i_sub4_i_29_i177_add209_wireValid;
    wire [0:0] SE_i_sub4_i_29_i177_add209_wireStall;
    wire [0:0] SE_i_sub4_i_29_i177_add209_StallValid;
    wire [0:0] SE_i_sub4_i_29_i177_add209_toReg0;
    reg [0:0] SE_i_sub4_i_29_i177_add209_fromReg0;
    wire [0:0] SE_i_sub4_i_29_i177_add209_consumed0;
    wire [0:0] SE_i_sub4_i_29_i177_add209_toReg1;
    reg [0:0] SE_i_sub4_i_29_i177_add209_fromReg1;
    wire [0:0] SE_i_sub4_i_29_i177_add209_consumed1;
    wire [0:0] SE_i_sub4_i_29_i177_add209_and0;
    wire [0:0] SE_i_sub4_i_29_i177_add209_and1;
    wire [0:0] SE_i_sub4_i_29_i177_add209_or0;
    wire [0:0] SE_i_sub4_i_29_i177_add209_backStall;
    wire [0:0] SE_i_sub4_i_29_i177_add209_V0;
    wire [0:0] SE_i_sub4_i_29_i177_add209_V1;
    wire [0:0] SE_i_sub4_i_31_i189_add219_wireValid;
    wire [0:0] SE_i_sub4_i_31_i189_add219_and0;
    wire [0:0] SE_i_sub4_i_31_i189_add219_backStall;
    wire [0:0] SE_i_sub4_i_31_i189_add219_V0;
    wire [0:0] SE_i_sub4_i_3_i21_add79_wireValid;
    wire [0:0] SE_i_sub4_i_3_i21_add79_wireStall;
    wire [0:0] SE_i_sub4_i_3_i21_add79_StallValid;
    wire [0:0] SE_i_sub4_i_3_i21_add79_toReg0;
    reg [0:0] SE_i_sub4_i_3_i21_add79_fromReg0;
    wire [0:0] SE_i_sub4_i_3_i21_add79_consumed0;
    wire [0:0] SE_i_sub4_i_3_i21_add79_toReg1;
    reg [0:0] SE_i_sub4_i_3_i21_add79_fromReg1;
    wire [0:0] SE_i_sub4_i_3_i21_add79_consumed1;
    wire [0:0] SE_i_sub4_i_3_i21_add79_and0;
    wire [0:0] SE_i_sub4_i_3_i21_add79_and1;
    wire [0:0] SE_i_sub4_i_3_i21_add79_or0;
    wire [0:0] SE_i_sub4_i_3_i21_add79_backStall;
    wire [0:0] SE_i_sub4_i_3_i21_add79_V0;
    wire [0:0] SE_i_sub4_i_3_i21_add79_V1;
    wire [0:0] SE_i_sub4_i_5_i33_add89_wireValid;
    wire [0:0] SE_i_sub4_i_5_i33_add89_wireStall;
    wire [0:0] SE_i_sub4_i_5_i33_add89_StallValid;
    wire [0:0] SE_i_sub4_i_5_i33_add89_toReg0;
    reg [0:0] SE_i_sub4_i_5_i33_add89_fromReg0;
    wire [0:0] SE_i_sub4_i_5_i33_add89_consumed0;
    wire [0:0] SE_i_sub4_i_5_i33_add89_toReg1;
    reg [0:0] SE_i_sub4_i_5_i33_add89_fromReg1;
    wire [0:0] SE_i_sub4_i_5_i33_add89_consumed1;
    wire [0:0] SE_i_sub4_i_5_i33_add89_and0;
    wire [0:0] SE_i_sub4_i_5_i33_add89_and1;
    wire [0:0] SE_i_sub4_i_5_i33_add89_or0;
    wire [0:0] SE_i_sub4_i_5_i33_add89_backStall;
    wire [0:0] SE_i_sub4_i_5_i33_add89_V0;
    wire [0:0] SE_i_sub4_i_5_i33_add89_V1;
    wire [0:0] SE_i_sub4_i_7_i45_add99_wireValid;
    wire [0:0] SE_i_sub4_i_7_i45_add99_wireStall;
    wire [0:0] SE_i_sub4_i_7_i45_add99_StallValid;
    wire [0:0] SE_i_sub4_i_7_i45_add99_toReg0;
    reg [0:0] SE_i_sub4_i_7_i45_add99_fromReg0;
    wire [0:0] SE_i_sub4_i_7_i45_add99_consumed0;
    wire [0:0] SE_i_sub4_i_7_i45_add99_toReg1;
    reg [0:0] SE_i_sub4_i_7_i45_add99_fromReg1;
    wire [0:0] SE_i_sub4_i_7_i45_add99_consumed1;
    wire [0:0] SE_i_sub4_i_7_i45_add99_and0;
    wire [0:0] SE_i_sub4_i_7_i45_add99_and1;
    wire [0:0] SE_i_sub4_i_7_i45_add99_or0;
    wire [0:0] SE_i_sub4_i_7_i45_add99_backStall;
    wire [0:0] SE_i_sub4_i_7_i45_add99_V0;
    wire [0:0] SE_i_sub4_i_7_i45_add99_V1;
    wire [0:0] SE_i_sub4_i_9_i57_add109_wireValid;
    wire [0:0] SE_i_sub4_i_9_i57_add109_wireStall;
    wire [0:0] SE_i_sub4_i_9_i57_add109_StallValid;
    wire [0:0] SE_i_sub4_i_9_i57_add109_toReg0;
    reg [0:0] SE_i_sub4_i_9_i57_add109_fromReg0;
    wire [0:0] SE_i_sub4_i_9_i57_add109_consumed0;
    wire [0:0] SE_i_sub4_i_9_i57_add109_toReg1;
    reg [0:0] SE_i_sub4_i_9_i57_add109_fromReg1;
    wire [0:0] SE_i_sub4_i_9_i57_add109_consumed1;
    wire [0:0] SE_i_sub4_i_9_i57_add109_and0;
    wire [0:0] SE_i_sub4_i_9_i57_add109_and1;
    wire [0:0] SE_i_sub4_i_9_i57_add109_or0;
    wire [0:0] SE_i_sub4_i_9_i57_add109_backStall;
    wire [0:0] SE_i_sub4_i_9_i57_add109_V0;
    wire [0:0] SE_i_sub4_i_9_i57_add109_V1;
    wire [0:0] SE_i_unnamed_add103_wireValid;
    wire [0:0] SE_i_unnamed_add103_and0;
    wire [0:0] SE_i_unnamed_add103_and1;
    wire [0:0] SE_i_unnamed_add103_and2;
    wire [0:0] SE_i_unnamed_add103_backStall;
    wire [0:0] SE_i_unnamed_add103_V0;
    reg [0:0] SE_i_unnamed_add108_R_v_0;
    wire [0:0] SE_i_unnamed_add108_v_s_0;
    wire [0:0] SE_i_unnamed_add108_s_tv_0;
    wire [0:0] SE_i_unnamed_add108_backEN;
    wire [0:0] SE_i_unnamed_add108_and0;
    wire [0:0] SE_i_unnamed_add108_backStall;
    wire [0:0] SE_i_unnamed_add108_V0;
    wire [0:0] SE_i_unnamed_add113_wireValid;
    wire [0:0] SE_i_unnamed_add113_and0;
    wire [0:0] SE_i_unnamed_add113_and1;
    wire [0:0] SE_i_unnamed_add113_backStall;
    wire [0:0] SE_i_unnamed_add113_V0;
    reg [0:0] SE_i_unnamed_add118_R_v_0;
    wire [0:0] SE_i_unnamed_add118_v_s_0;
    wire [0:0] SE_i_unnamed_add118_s_tv_0;
    wire [0:0] SE_i_unnamed_add118_backEN;
    wire [0:0] SE_i_unnamed_add118_and0;
    wire [0:0] SE_i_unnamed_add118_backStall;
    wire [0:0] SE_i_unnamed_add118_V0;
    wire [0:0] SE_i_unnamed_add123_wireValid;
    wire [0:0] SE_i_unnamed_add123_and0;
    wire [0:0] SE_i_unnamed_add123_and1;
    wire [0:0] SE_i_unnamed_add123_and2;
    wire [0:0] SE_i_unnamed_add123_backStall;
    wire [0:0] SE_i_unnamed_add123_V0;
    reg [0:0] SE_i_unnamed_add128_R_v_0;
    wire [0:0] SE_i_unnamed_add128_v_s_0;
    wire [0:0] SE_i_unnamed_add128_s_tv_0;
    wire [0:0] SE_i_unnamed_add128_backEN;
    wire [0:0] SE_i_unnamed_add128_and0;
    wire [0:0] SE_i_unnamed_add128_backStall;
    wire [0:0] SE_i_unnamed_add128_V0;
    wire [0:0] SE_i_unnamed_add133_wireValid;
    wire [0:0] SE_i_unnamed_add133_and0;
    wire [0:0] SE_i_unnamed_add133_and1;
    wire [0:0] SE_i_unnamed_add133_and2;
    wire [0:0] SE_i_unnamed_add133_backStall;
    wire [0:0] SE_i_unnamed_add133_V0;
    reg [0:0] SE_i_unnamed_add138_R_v_0;
    wire [0:0] SE_i_unnamed_add138_v_s_0;
    wire [0:0] SE_i_unnamed_add138_s_tv_0;
    wire [0:0] SE_i_unnamed_add138_backEN;
    wire [0:0] SE_i_unnamed_add138_and0;
    wire [0:0] SE_i_unnamed_add138_backStall;
    wire [0:0] SE_i_unnamed_add138_V0;
    wire [0:0] SE_i_unnamed_add143_wireValid;
    wire [0:0] SE_i_unnamed_add143_and0;
    wire [0:0] SE_i_unnamed_add143_and1;
    wire [0:0] SE_i_unnamed_add143_and2;
    wire [0:0] SE_i_unnamed_add143_backStall;
    wire [0:0] SE_i_unnamed_add143_V0;
    reg [0:0] SE_i_unnamed_add148_R_v_0;
    wire [0:0] SE_i_unnamed_add148_v_s_0;
    wire [0:0] SE_i_unnamed_add148_s_tv_0;
    wire [0:0] SE_i_unnamed_add148_backEN;
    wire [0:0] SE_i_unnamed_add148_backStall;
    wire [0:0] SE_i_unnamed_add148_V0;
    wire [0:0] SE_i_unnamed_add153_wireValid;
    wire [0:0] SE_i_unnamed_add153_and0;
    wire [0:0] SE_i_unnamed_add153_and1;
    wire [0:0] SE_i_unnamed_add153_and2;
    wire [0:0] SE_i_unnamed_add153_backStall;
    wire [0:0] SE_i_unnamed_add153_V0;
    reg [0:0] SE_i_unnamed_add158_R_v_0;
    wire [0:0] SE_i_unnamed_add158_v_s_0;
    wire [0:0] SE_i_unnamed_add158_s_tv_0;
    wire [0:0] SE_i_unnamed_add158_backEN;
    wire [0:0] SE_i_unnamed_add158_and0;
    wire [0:0] SE_i_unnamed_add158_backStall;
    wire [0:0] SE_i_unnamed_add158_V0;
    wire [0:0] SE_i_unnamed_add163_wireValid;
    wire [0:0] SE_i_unnamed_add163_and0;
    wire [0:0] SE_i_unnamed_add163_and1;
    wire [0:0] SE_i_unnamed_add163_and2;
    wire [0:0] SE_i_unnamed_add163_backStall;
    wire [0:0] SE_i_unnamed_add163_V0;
    reg [0:0] SE_i_unnamed_add168_R_v_0;
    wire [0:0] SE_i_unnamed_add168_v_s_0;
    wire [0:0] SE_i_unnamed_add168_s_tv_0;
    wire [0:0] SE_i_unnamed_add168_backEN;
    wire [0:0] SE_i_unnamed_add168_and0;
    wire [0:0] SE_i_unnamed_add168_backStall;
    wire [0:0] SE_i_unnamed_add168_V0;
    wire [0:0] SE_i_unnamed_add173_wireValid;
    wire [0:0] SE_i_unnamed_add173_and0;
    wire [0:0] SE_i_unnamed_add173_and1;
    wire [0:0] SE_i_unnamed_add173_and2;
    wire [0:0] SE_i_unnamed_add173_backStall;
    wire [0:0] SE_i_unnamed_add173_V0;
    reg [0:0] SE_i_unnamed_add178_R_v_0;
    wire [0:0] SE_i_unnamed_add178_v_s_0;
    wire [0:0] SE_i_unnamed_add178_s_tv_0;
    wire [0:0] SE_i_unnamed_add178_backEN;
    wire [0:0] SE_i_unnamed_add178_and0;
    wire [0:0] SE_i_unnamed_add178_backStall;
    wire [0:0] SE_i_unnamed_add178_V0;
    wire [0:0] SE_i_unnamed_add183_wireValid;
    wire [0:0] SE_i_unnamed_add183_and0;
    wire [0:0] SE_i_unnamed_add183_and1;
    wire [0:0] SE_i_unnamed_add183_and2;
    wire [0:0] SE_i_unnamed_add183_backStall;
    wire [0:0] SE_i_unnamed_add183_V0;
    reg [0:0] SE_i_unnamed_add188_R_v_0;
    wire [0:0] SE_i_unnamed_add188_v_s_0;
    wire [0:0] SE_i_unnamed_add188_s_tv_0;
    wire [0:0] SE_i_unnamed_add188_backEN;
    wire [0:0] SE_i_unnamed_add188_and0;
    wire [0:0] SE_i_unnamed_add188_backStall;
    wire [0:0] SE_i_unnamed_add188_V0;
    wire [0:0] SE_i_unnamed_add193_wireValid;
    wire [0:0] SE_i_unnamed_add193_and0;
    wire [0:0] SE_i_unnamed_add193_and1;
    wire [0:0] SE_i_unnamed_add193_and2;
    wire [0:0] SE_i_unnamed_add193_backStall;
    wire [0:0] SE_i_unnamed_add193_V0;
    reg [0:0] SE_i_unnamed_add198_R_v_0;
    wire [0:0] SE_i_unnamed_add198_v_s_0;
    wire [0:0] SE_i_unnamed_add198_s_tv_0;
    wire [0:0] SE_i_unnamed_add198_backEN;
    wire [0:0] SE_i_unnamed_add198_backStall;
    wire [0:0] SE_i_unnamed_add198_V0;
    wire [0:0] SE_i_unnamed_add203_wireValid;
    wire [0:0] SE_i_unnamed_add203_and0;
    wire [0:0] SE_i_unnamed_add203_and1;
    wire [0:0] SE_i_unnamed_add203_and2;
    wire [0:0] SE_i_unnamed_add203_backStall;
    wire [0:0] SE_i_unnamed_add203_V0;
    reg [0:0] SE_i_unnamed_add208_R_v_0;
    wire [0:0] SE_i_unnamed_add208_v_s_0;
    wire [0:0] SE_i_unnamed_add208_s_tv_0;
    wire [0:0] SE_i_unnamed_add208_backEN;
    wire [0:0] SE_i_unnamed_add208_and0;
    wire [0:0] SE_i_unnamed_add208_backStall;
    wire [0:0] SE_i_unnamed_add208_V0;
    wire [0:0] SE_i_unnamed_add213_wireValid;
    wire [0:0] SE_i_unnamed_add213_and0;
    wire [0:0] SE_i_unnamed_add213_and1;
    wire [0:0] SE_i_unnamed_add213_and2;
    wire [0:0] SE_i_unnamed_add213_backStall;
    wire [0:0] SE_i_unnamed_add213_V0;
    reg [0:0] SE_i_unnamed_add218_R_v_0;
    wire [0:0] SE_i_unnamed_add218_v_s_0;
    wire [0:0] SE_i_unnamed_add218_s_tv_0;
    wire [0:0] SE_i_unnamed_add218_backEN;
    wire [0:0] SE_i_unnamed_add218_backStall;
    wire [0:0] SE_i_unnamed_add218_V0;
    reg [0:0] SE_i_unnamed_add254_R_v_0;
    wire [0:0] SE_i_unnamed_add254_v_s_0;
    wire [0:0] SE_i_unnamed_add254_s_tv_0;
    wire [0:0] SE_i_unnamed_add254_backEN;
    wire [0:0] SE_i_unnamed_add254_and0;
    wire [0:0] SE_i_unnamed_add254_backStall;
    wire [0:0] SE_i_unnamed_add254_V0;
    reg [0:0] SE_i_unnamed_add258_R_v_0;
    wire [0:0] SE_i_unnamed_add258_v_s_0;
    wire [0:0] SE_i_unnamed_add258_s_tv_0;
    wire [0:0] SE_i_unnamed_add258_backEN;
    wire [0:0] SE_i_unnamed_add258_backStall;
    wire [0:0] SE_i_unnamed_add258_V0;
    reg [0:0] SE_i_unnamed_add261_R_v_0;
    wire [0:0] SE_i_unnamed_add261_v_s_0;
    wire [0:0] SE_i_unnamed_add261_s_tv_0;
    wire [0:0] SE_i_unnamed_add261_backEN;
    wire [0:0] SE_i_unnamed_add261_backStall;
    wire [0:0] SE_i_unnamed_add261_V0;
    reg [0:0] SE_i_unnamed_add263_R_v_0;
    wire [0:0] SE_i_unnamed_add263_v_s_0;
    wire [0:0] SE_i_unnamed_add263_s_tv_0;
    wire [0:0] SE_i_unnamed_add263_backEN;
    wire [0:0] SE_i_unnamed_add263_and0;
    wire [0:0] SE_i_unnamed_add263_backStall;
    wire [0:0] SE_i_unnamed_add263_V0;
    wire [0:0] SE_i_unnamed_add62_wireValid;
    wire [0:0] SE_i_unnamed_add62_and0;
    wire [0:0] SE_i_unnamed_add62_and1;
    wire [0:0] SE_i_unnamed_add62_backStall;
    wire [0:0] SE_i_unnamed_add62_V0;
    reg [0:0] SE_i_unnamed_add68_R_v_0;
    wire [0:0] SE_i_unnamed_add68_v_s_0;
    wire [0:0] SE_i_unnamed_add68_s_tv_0;
    wire [0:0] SE_i_unnamed_add68_backEN;
    wire [0:0] SE_i_unnamed_add68_and0;
    wire [0:0] SE_i_unnamed_add68_backStall;
    wire [0:0] SE_i_unnamed_add68_V0;
    wire [0:0] SE_i_unnamed_add73_wireValid;
    wire [0:0] SE_i_unnamed_add73_and0;
    wire [0:0] SE_i_unnamed_add73_and1;
    wire [0:0] SE_i_unnamed_add73_and2;
    wire [0:0] SE_i_unnamed_add73_backStall;
    wire [0:0] SE_i_unnamed_add73_V0;
    reg [0:0] SE_i_unnamed_add78_R_v_0;
    wire [0:0] SE_i_unnamed_add78_v_s_0;
    wire [0:0] SE_i_unnamed_add78_s_tv_0;
    wire [0:0] SE_i_unnamed_add78_backEN;
    wire [0:0] SE_i_unnamed_add78_and0;
    wire [0:0] SE_i_unnamed_add78_backStall;
    wire [0:0] SE_i_unnamed_add78_V0;
    wire [0:0] SE_i_unnamed_add83_wireValid;
    wire [0:0] SE_i_unnamed_add83_and0;
    wire [0:0] SE_i_unnamed_add83_and1;
    wire [0:0] SE_i_unnamed_add83_and2;
    wire [0:0] SE_i_unnamed_add83_backStall;
    wire [0:0] SE_i_unnamed_add83_V0;
    reg [0:0] SE_i_unnamed_add88_R_v_0;
    wire [0:0] SE_i_unnamed_add88_v_s_0;
    wire [0:0] SE_i_unnamed_add88_s_tv_0;
    wire [0:0] SE_i_unnamed_add88_backEN;
    wire [0:0] SE_i_unnamed_add88_and0;
    wire [0:0] SE_i_unnamed_add88_backStall;
    wire [0:0] SE_i_unnamed_add88_V0;
    wire [0:0] SE_i_unnamed_add93_wireValid;
    wire [0:0] SE_i_unnamed_add93_and0;
    wire [0:0] SE_i_unnamed_add93_and1;
    wire [0:0] SE_i_unnamed_add93_and2;
    wire [0:0] SE_i_unnamed_add93_backStall;
    wire [0:0] SE_i_unnamed_add93_V0;
    reg [0:0] SE_i_unnamed_add98_R_v_0;
    wire [0:0] SE_i_unnamed_add98_v_s_0;
    wire [0:0] SE_i_unnamed_add98_s_tv_0;
    wire [0:0] SE_i_unnamed_add98_backEN;
    wire [0:0] SE_i_unnamed_add98_backStall;
    wire [0:0] SE_i_unnamed_add98_V0;
    wire [0:0] SE_stall_entry_wireValid;
    wire [0:0] SE_stall_entry_backStall;
    wire [0:0] SE_stall_entry_V0;
    reg [0:0] SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_R_v_0;
    wire [0:0] SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_v_s_0;
    wire [0:0] SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_s_tv_0;
    wire [0:0] SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_backEN;
    wire [0:0] SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_backStall;
    wire [0:0] SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_V0;
    reg [0:0] SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_R_v_0;
    wire [0:0] SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_v_s_0;
    wire [0:0] SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_s_tv_0;
    wire [0:0] SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_backEN;
    wire [0:0] SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_backStall;
    wire [0:0] SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_V0;
    reg [0:0] SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_R_v_0;
    wire [0:0] SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_v_s_0;
    wire [0:0] SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_s_tv_0;
    wire [0:0] SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_backEN;
    wire [0:0] SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_backStall;
    wire [0:0] SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_V0;
    reg [0:0] SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_R_v_0;
    wire [0:0] SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_v_s_0;
    wire [0:0] SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_s_tv_0;
    wire [0:0] SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_backEN;
    wire [0:0] SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_backStall;
    wire [0:0] SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_V0;
    reg [0:0] SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_R_v_0;
    reg [0:0] SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_R_v_1;
    wire [0:0] SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_v_s_0;
    wire [0:0] SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_s_tv_0;
    wire [0:0] SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_s_tv_1;
    wire [0:0] SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_backEN;
    wire [0:0] SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_or0;
    wire [0:0] SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_backStall;
    wire [0:0] SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_V0;
    wire [0:0] SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_V1;
    wire [0:0] SE_out_redist22_i_unnamed_add258_q_32_fifo_wireValid;
    wire [0:0] SE_out_redist22_i_unnamed_add258_q_32_fifo_and0;
    wire [0:0] SE_out_redist22_i_unnamed_add258_q_32_fifo_and1;
    wire [0:0] SE_out_redist22_i_unnamed_add258_q_32_fifo_and2;
    wire [0:0] SE_out_redist22_i_unnamed_add258_q_32_fifo_backStall;
    wire [0:0] SE_out_redist22_i_unnamed_add258_q_32_fifo_V0;
    reg [0:0] SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_R_v_0;
    reg [0:0] SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_R_v_1;
    wire [0:0] SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_v_s_0;
    wire [0:0] SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_s_tv_0;
    wire [0:0] SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_s_tv_1;
    wire [0:0] SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_backEN;
    wire [0:0] SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_or0;
    wire [0:0] SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_backStall;
    wire [0:0] SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_V0;
    wire [0:0] SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_V1;
    reg [0:0] SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_R_v_0;
    reg [0:0] SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_R_v_1;
    wire [0:0] SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_v_s_0;
    wire [0:0] SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_s_tv_0;
    wire [0:0] SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_s_tv_1;
    wire [0:0] SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_backEN;
    wire [0:0] SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_or0;
    wire [0:0] SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_backStall;
    wire [0:0] SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_V0;
    wire [0:0] SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_V1;
    reg [0:0] SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_R_v_0;
    reg [0:0] SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_R_v_1;
    wire [0:0] SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_v_s_0;
    wire [0:0] SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_s_tv_0;
    wire [0:0] SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_s_tv_1;
    wire [0:0] SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_backEN;
    wire [0:0] SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_or0;
    wire [0:0] SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_backStall;
    wire [0:0] SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_V0;
    wire [0:0] SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_V1;
    reg [0:0] SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_R_v_0;
    reg [0:0] SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_R_v_1;
    wire [0:0] SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_v_s_0;
    wire [0:0] SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_s_tv_0;
    wire [0:0] SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_s_tv_1;
    wire [0:0] SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_backEN;
    wire [0:0] SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_or0;
    wire [0:0] SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_backStall;
    wire [0:0] SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_V0;
    wire [0:0] SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_V1;
    reg [0:0] SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_R_v_0;
    wire [0:0] SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_v_s_0;
    wire [0:0] SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_s_tv_0;
    wire [0:0] SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_backEN;
    wire [0:0] SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_backStall;
    wire [0:0] SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_V0;
    reg [0:0] SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_R_v_0;
    reg [0:0] SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_R_v_1;
    wire [0:0] SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_v_s_0;
    wire [0:0] SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_s_tv_0;
    wire [0:0] SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_s_tv_1;
    wire [0:0] SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_backEN;
    wire [0:0] SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_or0;
    wire [0:0] SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_backStall;
    wire [0:0] SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_V0;
    wire [0:0] SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_V1;
    reg [0:0] SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_R_v_0;
    reg [0:0] SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_R_v_1;
    wire [0:0] SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_v_s_0;
    wire [0:0] SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_s_tv_0;
    wire [0:0] SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_s_tv_1;
    wire [0:0] SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_backEN;
    wire [0:0] SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_or0;
    wire [0:0] SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_backStall;
    wire [0:0] SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_V0;
    wire [0:0] SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_V1;
    reg [0:0] SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_R_v_0;
    wire [0:0] SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_v_s_0;
    wire [0:0] SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_s_tv_0;
    wire [0:0] SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_backEN;
    wire [0:0] SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_backStall;
    wire [0:0] SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_V0;
    reg [0:0] SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_R_v_0;
    reg [0:0] SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_R_v_1;
    wire [0:0] SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_v_s_0;
    wire [0:0] SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_s_tv_0;
    wire [0:0] SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_s_tv_1;
    wire [0:0] SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_backEN;
    wire [0:0] SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_or0;
    wire [0:0] SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_backStall;
    wire [0:0] SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_V0;
    wire [0:0] SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_V1;
    reg [0:0] SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_R_v_0;
    reg [0:0] SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_R_v_1;
    wire [0:0] SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_v_s_0;
    wire [0:0] SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_s_tv_0;
    wire [0:0] SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_s_tv_1;
    wire [0:0] SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_backEN;
    wire [0:0] SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_or0;
    wire [0:0] SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_backStall;
    wire [0:0] SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_V0;
    wire [0:0] SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_V1;
    reg [0:0] SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_R_v_0;
    wire [0:0] SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_v_s_0;
    wire [0:0] SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_s_tv_0;
    wire [0:0] SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_backEN;
    wire [0:0] SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_backStall;
    wire [0:0] SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_V0;
    reg [0:0] SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_R_v_0;
    reg [0:0] SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_R_v_1;
    wire [0:0] SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_v_s_0;
    wire [0:0] SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_s_tv_0;
    wire [0:0] SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_s_tv_1;
    wire [0:0] SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_backEN;
    wire [0:0] SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_or0;
    wire [0:0] SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_backStall;
    wire [0:0] SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_V0;
    wire [0:0] SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_V1;
    reg [0:0] SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_R_v_0;
    reg [0:0] SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_R_v_1;
    wire [0:0] SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_v_s_0;
    wire [0:0] SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_s_tv_0;
    wire [0:0] SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_s_tv_1;
    wire [0:0] SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_backEN;
    wire [0:0] SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_or0;
    wire [0:0] SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_backStall;
    wire [0:0] SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_V0;
    wire [0:0] SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_V1;
    reg [0:0] SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_R_v_0;
    wire [0:0] SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_v_s_0;
    wire [0:0] SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_s_tv_0;
    wire [0:0] SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_backEN;
    wire [0:0] SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_backStall;
    wire [0:0] SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_V0;
    reg [0:0] SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_R_v_0;
    reg [0:0] SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_R_v_1;
    wire [0:0] SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_v_s_0;
    wire [0:0] SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_s_tv_0;
    wire [0:0] SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_s_tv_1;
    wire [0:0] SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_backEN;
    wire [0:0] SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_or0;
    wire [0:0] SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_backStall;
    wire [0:0] SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_V0;
    wire [0:0] SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_V1;
    reg [0:0] SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_R_v_0;
    wire [0:0] SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_v_s_0;
    wire [0:0] SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_s_tv_0;
    wire [0:0] SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_backEN;
    wire [0:0] SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_backStall;
    wire [0:0] SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_V0;
    reg [0:0] SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_R_v_0;
    reg [0:0] SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_R_v_1;
    wire [0:0] SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_v_s_0;
    wire [0:0] SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_s_tv_0;
    wire [0:0] SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_s_tv_1;
    wire [0:0] SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_backEN;
    wire [0:0] SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_or0;
    wire [0:0] SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_backStall;
    wire [0:0] SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_V0;
    wire [0:0] SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_V1;
    reg [0:0] SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_R_v_0;
    reg [0:0] SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_R_v_1;
    wire [0:0] SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_v_s_0;
    wire [0:0] SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_s_tv_0;
    wire [0:0] SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_s_tv_1;
    wire [0:0] SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_backEN;
    wire [0:0] SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_or0;
    wire [0:0] SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_backStall;
    wire [0:0] SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_V0;
    wire [0:0] SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_V1;
    reg [0:0] SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_R_v_0;
    reg [0:0] SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_R_v_1;
    wire [0:0] SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_v_s_0;
    wire [0:0] SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_s_tv_0;
    wire [0:0] SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_s_tv_1;
    wire [0:0] SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_backEN;
    wire [0:0] SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_or0;
    wire [0:0] SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_backStall;
    wire [0:0] SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_V0;
    wire [0:0] SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_V1;
    reg [0:0] SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_R_v_0;
    wire [0:0] SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_v_s_0;
    wire [0:0] SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_s_tv_0;
    wire [0:0] SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_backEN;
    wire [0:0] SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_backStall;
    wire [0:0] SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_V0;
    reg [0:0] SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_R_v_0;
    reg [0:0] SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_R_v_1;
    wire [0:0] SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_v_s_0;
    wire [0:0] SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_s_tv_0;
    wire [0:0] SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_s_tv_1;
    wire [0:0] SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_backEN;
    wire [0:0] SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_or0;
    wire [0:0] SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_backStall;
    wire [0:0] SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_V0;
    wire [0:0] SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_V1;
    reg [0:0] SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_R_v_0;
    reg [0:0] SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_R_v_1;
    wire [0:0] SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_v_s_0;
    wire [0:0] SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_s_tv_0;
    wire [0:0] SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_s_tv_1;
    wire [0:0] SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_backEN;
    wire [0:0] SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_or0;
    wire [0:0] SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_backStall;
    wire [0:0] SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_V0;
    wire [0:0] SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_V1;
    reg [0:0] SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_R_v_0;
    wire [0:0] SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_v_s_0;
    wire [0:0] SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_s_tv_0;
    wire [0:0] SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_backEN;
    wire [0:0] SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_backStall;
    wire [0:0] SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_V0;
    reg [0:0] SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_R_v_0;
    reg [0:0] SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_R_v_1;
    wire [0:0] SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_v_s_0;
    wire [0:0] SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_s_tv_0;
    wire [0:0] SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_s_tv_1;
    wire [0:0] SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_backEN;
    wire [0:0] SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_or0;
    wire [0:0] SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_backStall;
    wire [0:0] SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_V0;
    wire [0:0] SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_V1;
    reg [0:0] SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_R_v_0;
    reg [0:0] SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_R_v_1;
    wire [0:0] SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_v_s_0;
    wire [0:0] SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_s_tv_0;
    wire [0:0] SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_s_tv_1;
    wire [0:0] SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_backEN;
    wire [0:0] SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_or0;
    wire [0:0] SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_backStall;
    wire [0:0] SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_V0;
    wire [0:0] SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_V1;
    reg [0:0] SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_R_v_0;
    wire [0:0] SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_v_s_0;
    wire [0:0] SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_s_tv_0;
    wire [0:0] SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_backEN;
    wire [0:0] SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_backStall;
    wire [0:0] SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_V0;
    reg [0:0] SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_R_v_0;
    reg [0:0] SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_R_v_1;
    wire [0:0] SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_v_s_0;
    wire [0:0] SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_s_tv_0;
    wire [0:0] SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_s_tv_1;
    wire [0:0] SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_backEN;
    wire [0:0] SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_or0;
    wire [0:0] SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_backStall;
    wire [0:0] SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_V0;
    wire [0:0] SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_V1;
    reg [0:0] SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_R_v_0;
    reg [0:0] SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_R_v_1;
    wire [0:0] SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_v_s_0;
    wire [0:0] SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_s_tv_0;
    wire [0:0] SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_s_tv_1;
    wire [0:0] SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_backEN;
    wire [0:0] SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_or0;
    wire [0:0] SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_backStall;
    wire [0:0] SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_V0;
    wire [0:0] SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_V1;
    reg [0:0] SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_R_v_0;
    wire [0:0] SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_v_s_0;
    wire [0:0] SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_s_tv_0;
    wire [0:0] SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_backEN;
    wire [0:0] SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_backStall;
    wire [0:0] SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_V0;
    reg [0:0] SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_R_v_0;
    reg [0:0] SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_R_v_1;
    wire [0:0] SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_v_s_0;
    wire [0:0] SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_s_tv_0;
    wire [0:0] SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_s_tv_1;
    wire [0:0] SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_backEN;
    wire [0:0] SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_or0;
    wire [0:0] SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_backStall;
    wire [0:0] SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_V0;
    wire [0:0] SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_V1;
    reg [0:0] SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_R_v_0;
    reg [0:0] SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_R_v_1;
    wire [0:0] SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_v_s_0;
    wire [0:0] SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_s_tv_0;
    wire [0:0] SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_s_tv_1;
    wire [0:0] SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_backEN;
    wire [0:0] SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_or0;
    wire [0:0] SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_backStall;
    wire [0:0] SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_V0;
    wire [0:0] SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_V1;
    reg [0:0] SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_R_v_0;
    wire [0:0] SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_v_s_0;
    wire [0:0] SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_s_tv_0;
    wire [0:0] SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_backEN;
    wire [0:0] SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_backStall;
    wire [0:0] SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_V0;
    reg [0:0] SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_R_v_0;
    reg [0:0] SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_R_v_1;
    wire [0:0] SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_v_s_0;
    wire [0:0] SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_s_tv_0;
    wire [0:0] SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_s_tv_1;
    wire [0:0] SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_backEN;
    wire [0:0] SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_or0;
    wire [0:0] SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_backStall;
    wire [0:0] SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_V0;
    wire [0:0] SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_V1;
    reg [0:0] SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_R_v_0;
    reg [0:0] SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_R_v_1;
    wire [0:0] SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_v_s_0;
    wire [0:0] SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_s_tv_0;
    wire [0:0] SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_s_tv_1;
    wire [0:0] SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_backEN;
    wire [0:0] SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_or0;
    wire [0:0] SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_backStall;
    wire [0:0] SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_V0;
    wire [0:0] SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_V1;
    reg [0:0] SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_R_v_0;
    wire [0:0] SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_v_s_0;
    wire [0:0] SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_s_tv_0;
    wire [0:0] SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_backEN;
    wire [0:0] SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_backStall;
    wire [0:0] SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_V0;
    reg [0:0] SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_R_v_0;
    reg [0:0] SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_R_v_1;
    wire [0:0] SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_v_s_0;
    wire [0:0] SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_s_tv_0;
    wire [0:0] SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_s_tv_1;
    wire [0:0] SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_backEN;
    wire [0:0] SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_or0;
    wire [0:0] SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_backStall;
    wire [0:0] SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_V0;
    wire [0:0] SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_V1;
    reg [0:0] SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_R_v_0;
    reg [0:0] SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_R_v_1;
    wire [0:0] SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_v_s_0;
    wire [0:0] SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_s_tv_0;
    wire [0:0] SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_s_tv_1;
    wire [0:0] SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_backEN;
    wire [0:0] SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_or0;
    wire [0:0] SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_backStall;
    wire [0:0] SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_V0;
    wire [0:0] SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_V1;
    reg [0:0] SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_R_v_0;
    wire [0:0] SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_v_s_0;
    wire [0:0] SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_s_tv_0;
    wire [0:0] SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_backEN;
    wire [0:0] SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_backStall;
    wire [0:0] SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_V0;
    reg [0:0] SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_R_v_0;
    reg [0:0] SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_R_v_1;
    wire [0:0] SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_v_s_0;
    wire [0:0] SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_s_tv_0;
    wire [0:0] SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_s_tv_1;
    wire [0:0] SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_backEN;
    wire [0:0] SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_or0;
    wire [0:0] SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_backStall;
    wire [0:0] SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_V0;
    wire [0:0] SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_V1;
    reg [0:0] SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_R_v_0;
    reg [0:0] SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_R_v_1;
    wire [0:0] SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_v_s_0;
    wire [0:0] SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_s_tv_0;
    wire [0:0] SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_s_tv_1;
    wire [0:0] SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_backEN;
    wire [0:0] SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_or0;
    wire [0:0] SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_backStall;
    wire [0:0] SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_V0;
    wire [0:0] SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_V1;
    reg [0:0] SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_R_v_0;
    wire [0:0] SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_v_s_0;
    wire [0:0] SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_s_tv_0;
    wire [0:0] SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_backEN;
    wire [0:0] SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_backStall;
    wire [0:0] SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_V0;
    reg [0:0] SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_R_v_0;
    reg [0:0] SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_R_v_1;
    wire [0:0] SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_v_s_0;
    wire [0:0] SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_s_tv_0;
    wire [0:0] SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_s_tv_1;
    wire [0:0] SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_backEN;
    wire [0:0] SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_or0;
    wire [0:0] SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_backStall;
    wire [0:0] SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_V0;
    wire [0:0] SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_V1;
    reg [0:0] SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_R_v_0;
    reg [0:0] SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_R_v_1;
    wire [0:0] SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_v_s_0;
    wire [0:0] SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_s_tv_0;
    wire [0:0] SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_s_tv_1;
    wire [0:0] SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_backEN;
    wire [0:0] SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_or0;
    wire [0:0] SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_backStall;
    wire [0:0] SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_V0;
    wire [0:0] SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_V1;
    reg [0:0] SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_R_v_0;
    wire [0:0] SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_v_s_0;
    wire [0:0] SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_s_tv_0;
    wire [0:0] SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_backEN;
    wire [0:0] SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_backStall;
    wire [0:0] SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_V0;
    reg [0:0] SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_R_v_0;
    reg [0:0] SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_R_v_1;
    wire [0:0] SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_v_s_0;
    wire [0:0] SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_s_tv_0;
    wire [0:0] SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_s_tv_1;
    wire [0:0] SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_backEN;
    wire [0:0] SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_or0;
    wire [0:0] SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_backStall;
    wire [0:0] SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_V0;
    wire [0:0] SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_V1;
    reg [0:0] SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_R_v_0;
    reg [0:0] SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_R_v_1;
    wire [0:0] SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_v_s_0;
    wire [0:0] SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_s_tv_0;
    wire [0:0] SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_s_tv_1;
    wire [0:0] SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_backEN;
    wire [0:0] SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_or0;
    wire [0:0] SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_backStall;
    wire [0:0] SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_V0;
    wire [0:0] SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_V1;
    reg [0:0] SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_R_v_0;
    wire [0:0] SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_v_s_0;
    wire [0:0] SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_s_tv_0;
    wire [0:0] SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_backEN;
    wire [0:0] SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_backStall;
    wire [0:0] SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_V0;
    reg [0:0] SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_R_v_0;
    wire [0:0] SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_v_s_0;
    wire [0:0] SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_s_tv_0;
    wire [0:0] SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_backEN;
    wire [0:0] SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_backStall;
    wire [0:0] SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_V0;
    reg [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_R_v_0;
    reg [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_R_v_1;
    reg [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_R_v_2;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_v_s_0;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_s_tv_0;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_s_tv_1;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_s_tv_2;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_backEN;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_or0;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_or1;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_backStall;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_V0;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_V1;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_V2;
    reg [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_0;
    reg [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_1;
    reg [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_2;
    reg [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_3;
    reg [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_4;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_v_s_0;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_s_tv_0;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_s_tv_1;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_s_tv_2;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_s_tv_3;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_s_tv_4;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_backEN;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_or0;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_or1;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_or2;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_or3;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_backStall;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_V0;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_V1;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_V2;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_V3;
    wire [0:0] SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_V4;
    wire [0:0] SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_wireValid;
    wire [0:0] SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_wireStall;
    wire [0:0] SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_StallValid;
    wire [0:0] SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_toReg0;
    reg [0:0] SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_fromReg0;
    wire [0:0] SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_consumed0;
    wire [0:0] SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_toReg1;
    reg [0:0] SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_fromReg1;
    wire [0:0] SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_consumed1;
    wire [0:0] SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_or0;
    wire [0:0] SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_backStall;
    wire [0:0] SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_V0;
    wire [0:0] SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_V1;
    wire [0:0] SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_wireValid;
    wire [0:0] SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_wireStall;
    wire [0:0] SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_StallValid;
    wire [0:0] SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_toReg0;
    reg [0:0] SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_fromReg0;
    wire [0:0] SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_consumed0;
    wire [0:0] SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_toReg1;
    reg [0:0] SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_fromReg1;
    wire [0:0] SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_consumed1;
    wire [0:0] SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_or0;
    wire [0:0] SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_backStall;
    wire [0:0] SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_V0;
    wire [0:0] SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_V1;
    wire [0:0] SE_out_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_wireValid;
    wire [0:0] SE_out_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_and0;
    wire [0:0] SE_out_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_and1;
    wire [0:0] SE_out_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_backStall;
    wire [0:0] SE_out_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_V0;
    wire [0:0] SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_wireValid;
    wire [0:0] SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_wireStall;
    wire [0:0] SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_StallValid;
    wire [0:0] SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_toReg0;
    reg [0:0] SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_fromReg0;
    wire [0:0] SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_consumed0;
    wire [0:0] SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_toReg1;
    reg [0:0] SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_fromReg1;
    wire [0:0] SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_consumed1;
    wire [0:0] SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_or0;
    wire [0:0] SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_backStall;
    wire [0:0] SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_V0;
    wire [0:0] SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_V1;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_wireValid;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_wireStall;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_StallValid;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_toReg0;
    reg [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg0;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_consumed0;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_toReg1;
    reg [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg1;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_consumed1;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_toReg2;
    reg [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg2;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_consumed2;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_toReg3;
    reg [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg3;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_consumed3;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_toReg4;
    reg [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg4;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_consumed4;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_or0;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_or1;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_or2;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_or3;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_backStall;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_V0;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_V1;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_V2;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_V3;
    wire [0:0] SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_V4;
    reg [0:0] SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_R_v_0;
    wire [0:0] SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_v_s_0;
    wire [0:0] SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_s_tv_0;
    wire [0:0] SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_backEN;
    wire [0:0] SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_backStall;
    wire [0:0] SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_V0;
    reg [0:0] SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_R_v_0;
    reg [0:0] SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_R_v_1;
    wire [0:0] SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_v_s_0;
    wire [0:0] SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_s_tv_0;
    wire [0:0] SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_s_tv_1;
    wire [0:0] SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_backEN;
    wire [0:0] SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_or0;
    wire [0:0] SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_backStall;
    wire [0:0] SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_V0;
    wire [0:0] SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_V1;
    reg [0:0] SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_R_v_0;
    reg [0:0] SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_R_v_1;
    reg [0:0] SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_R_v_2;
    wire [0:0] SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_v_s_0;
    wire [0:0] SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_s_tv_0;
    wire [0:0] SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_s_tv_1;
    wire [0:0] SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_s_tv_2;
    wire [0:0] SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_backEN;
    wire [0:0] SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_or0;
    wire [0:0] SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_or1;
    wire [0:0] SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_backStall;
    wire [0:0] SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_V0;
    wire [0:0] SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_V1;
    wire [0:0] SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_V2;
    reg [0:0] SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_R_v_0;
    reg [0:0] SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_R_v_1;
    wire [0:0] SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_v_s_0;
    wire [0:0] SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_s_tv_0;
    wire [0:0] SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_s_tv_1;
    wire [0:0] SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_backEN;
    wire [0:0] SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_or0;
    wire [0:0] SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_backStall;
    wire [0:0] SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_V0;
    wire [0:0] SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_V1;
    reg [0:0] SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_R_v_0;
    reg [0:0] SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_R_v_1;
    wire [0:0] SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_v_s_0;
    wire [0:0] SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_s_tv_0;
    wire [0:0] SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_s_tv_1;
    wire [0:0] SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_backEN;
    wire [0:0] SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_or0;
    wire [0:0] SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_backStall;
    wire [0:0] SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_V0;
    wire [0:0] SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_V1;
    reg [0:0] SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_R_v_0;
    reg [0:0] SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_R_v_1;
    reg [0:0] SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_R_v_2;
    wire [0:0] SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_v_s_0;
    wire [0:0] SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_s_tv_0;
    wire [0:0] SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_s_tv_1;
    wire [0:0] SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_s_tv_2;
    wire [0:0] SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_backEN;
    wire [0:0] SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_or0;
    wire [0:0] SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_or1;
    wire [0:0] SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_backStall;
    wire [0:0] SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_V0;
    wire [0:0] SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_V1;
    wire [0:0] SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_V2;
    reg [0:0] SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_R_v_0;
    reg [0:0] SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_R_v_1;
    wire [0:0] SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_v_s_0;
    wire [0:0] SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_s_tv_0;
    wire [0:0] SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_s_tv_1;
    wire [0:0] SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_backEN;
    wire [0:0] SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_or0;
    wire [0:0] SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_backStall;
    wire [0:0] SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_V0;
    wire [0:0] SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_V1;
    reg [0:0] SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_R_v_0;
    reg [0:0] SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_R_v_1;
    wire [0:0] SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_v_s_0;
    wire [0:0] SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_s_tv_0;
    wire [0:0] SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_s_tv_1;
    wire [0:0] SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_backEN;
    wire [0:0] SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_or0;
    wire [0:0] SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_backStall;
    wire [0:0] SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_V0;
    wire [0:0] SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_V1;
    reg [0:0] SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_R_v_0;
    reg [0:0] SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_R_v_1;
    reg [0:0] SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_R_v_2;
    wire [0:0] SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_v_s_0;
    wire [0:0] SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_s_tv_0;
    wire [0:0] SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_s_tv_1;
    wire [0:0] SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_s_tv_2;
    wire [0:0] SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_backEN;
    wire [0:0] SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_or0;
    wire [0:0] SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_or1;
    wire [0:0] SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_backStall;
    wire [0:0] SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_V0;
    wire [0:0] SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_V1;
    wire [0:0] SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_V2;
    reg [0:0] SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_R_v_0;
    reg [0:0] SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_R_v_1;
    wire [0:0] SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_v_s_0;
    wire [0:0] SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_s_tv_0;
    wire [0:0] SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_s_tv_1;
    wire [0:0] SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_backEN;
    wire [0:0] SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_or0;
    wire [0:0] SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_backStall;
    wire [0:0] SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_V0;
    wire [0:0] SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_V1;
    reg [0:0] SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_R_v_0;
    reg [0:0] SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_R_v_1;
    wire [0:0] SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_v_s_0;
    wire [0:0] SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_s_tv_0;
    wire [0:0] SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_s_tv_1;
    wire [0:0] SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_backEN;
    wire [0:0] SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_or0;
    wire [0:0] SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_backStall;
    wire [0:0] SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_V0;
    wire [0:0] SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_V1;
    reg [0:0] SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_R_v_0;
    reg [0:0] SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_R_v_1;
    reg [0:0] SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_R_v_2;
    wire [0:0] SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_v_s_0;
    wire [0:0] SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_s_tv_0;
    wire [0:0] SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_s_tv_1;
    wire [0:0] SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_s_tv_2;
    wire [0:0] SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_backEN;
    wire [0:0] SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_or0;
    wire [0:0] SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_or1;
    wire [0:0] SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_backStall;
    wire [0:0] SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_V0;
    wire [0:0] SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_V1;
    wire [0:0] SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_V2;
    reg [0:0] SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_R_v_0;
    reg [0:0] SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_R_v_1;
    wire [0:0] SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_v_s_0;
    wire [0:0] SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_s_tv_0;
    wire [0:0] SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_s_tv_1;
    wire [0:0] SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_backEN;
    wire [0:0] SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_or0;
    wire [0:0] SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_backStall;
    wire [0:0] SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_V0;
    wire [0:0] SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_V1;
    reg [0:0] SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_R_v_0;
    reg [0:0] SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_R_v_1;
    wire [0:0] SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_v_s_0;
    wire [0:0] SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_s_tv_0;
    wire [0:0] SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_s_tv_1;
    wire [0:0] SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_backEN;
    wire [0:0] SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_or0;
    wire [0:0] SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_backStall;
    wire [0:0] SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_V0;
    wire [0:0] SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_V1;
    reg [0:0] SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_R_v_0;
    reg [0:0] SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_R_v_1;
    reg [0:0] SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_R_v_2;
    wire [0:0] SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_v_s_0;
    wire [0:0] SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_s_tv_0;
    wire [0:0] SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_s_tv_1;
    wire [0:0] SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_s_tv_2;
    wire [0:0] SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_backEN;
    wire [0:0] SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_or0;
    wire [0:0] SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_or1;
    wire [0:0] SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_backStall;
    wire [0:0] SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_V0;
    wire [0:0] SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_V1;
    wire [0:0] SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_V2;
    reg [0:0] SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_R_v_0;
    reg [0:0] SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_R_v_1;
    wire [0:0] SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_v_s_0;
    wire [0:0] SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_s_tv_0;
    wire [0:0] SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_s_tv_1;
    wire [0:0] SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_backEN;
    wire [0:0] SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_or0;
    wire [0:0] SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_backStall;
    wire [0:0] SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_V0;
    wire [0:0] SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_V1;
    reg [0:0] SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_R_v_0;
    reg [0:0] SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_R_v_1;
    wire [0:0] SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_v_s_0;
    wire [0:0] SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_s_tv_0;
    wire [0:0] SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_s_tv_1;
    wire [0:0] SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_backEN;
    wire [0:0] SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_or0;
    wire [0:0] SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_backStall;
    wire [0:0] SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_V0;
    wire [0:0] SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_V1;
    reg [0:0] SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_R_v_0;
    reg [0:0] SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_R_v_1;
    reg [0:0] SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_R_v_2;
    wire [0:0] SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_v_s_0;
    wire [0:0] SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_s_tv_0;
    wire [0:0] SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_s_tv_1;
    wire [0:0] SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_s_tv_2;
    wire [0:0] SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_backEN;
    wire [0:0] SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_or0;
    wire [0:0] SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_or1;
    wire [0:0] SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_backStall;
    wire [0:0] SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_V0;
    wire [0:0] SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_V1;
    wire [0:0] SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_V2;
    reg [0:0] SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_R_v_0;
    reg [0:0] SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_R_v_1;
    wire [0:0] SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_v_s_0;
    wire [0:0] SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_s_tv_0;
    wire [0:0] SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_s_tv_1;
    wire [0:0] SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_backEN;
    wire [0:0] SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_or0;
    wire [0:0] SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_backStall;
    wire [0:0] SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_V0;
    wire [0:0] SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_V1;
    reg [0:0] SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_R_v_0;
    reg [0:0] SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_R_v_1;
    wire [0:0] SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_v_s_0;
    wire [0:0] SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_s_tv_0;
    wire [0:0] SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_s_tv_1;
    wire [0:0] SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_backEN;
    wire [0:0] SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_or0;
    wire [0:0] SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_backStall;
    wire [0:0] SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_V0;
    wire [0:0] SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_V1;
    reg [0:0] SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_R_v_0;
    reg [0:0] SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_R_v_1;
    reg [0:0] SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_R_v_2;
    wire [0:0] SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_v_s_0;
    wire [0:0] SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_s_tv_0;
    wire [0:0] SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_s_tv_1;
    wire [0:0] SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_s_tv_2;
    wire [0:0] SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_backEN;
    wire [0:0] SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_or0;
    wire [0:0] SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_or1;
    wire [0:0] SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_backStall;
    wire [0:0] SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_V0;
    wire [0:0] SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_V1;
    wire [0:0] SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_V2;
    reg [0:0] SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_R_v_0;
    reg [0:0] SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_R_v_1;
    wire [0:0] SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_v_s_0;
    wire [0:0] SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_s_tv_0;
    wire [0:0] SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_s_tv_1;
    wire [0:0] SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_backEN;
    wire [0:0] SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_or0;
    wire [0:0] SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_backStall;
    wire [0:0] SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_V0;
    wire [0:0] SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_V1;
    reg [0:0] SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_R_v_0;
    reg [0:0] SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_R_v_1;
    wire [0:0] SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_v_s_0;
    wire [0:0] SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_s_tv_0;
    wire [0:0] SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_s_tv_1;
    wire [0:0] SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_backEN;
    wire [0:0] SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_or0;
    wire [0:0] SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_backStall;
    wire [0:0] SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_V0;
    wire [0:0] SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_V1;
    reg [0:0] SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_R_v_0;
    reg [0:0] SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_R_v_1;
    reg [0:0] SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_R_v_2;
    wire [0:0] SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_v_s_0;
    wire [0:0] SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_s_tv_0;
    wire [0:0] SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_s_tv_1;
    wire [0:0] SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_s_tv_2;
    wire [0:0] SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_backEN;
    wire [0:0] SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_or0;
    wire [0:0] SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_or1;
    wire [0:0] SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_backStall;
    wire [0:0] SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_V0;
    wire [0:0] SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_V1;
    wire [0:0] SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_V2;
    reg [0:0] SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_R_v_0;
    reg [0:0] SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_R_v_1;
    wire [0:0] SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_v_s_0;
    wire [0:0] SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_s_tv_0;
    wire [0:0] SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_s_tv_1;
    wire [0:0] SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_backEN;
    wire [0:0] SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_or0;
    wire [0:0] SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_backStall;
    wire [0:0] SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_V0;
    wire [0:0] SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_V1;
    reg [0:0] SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_R_v_0;
    reg [0:0] SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_R_v_1;
    wire [0:0] SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_v_s_0;
    wire [0:0] SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_s_tv_0;
    wire [0:0] SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_s_tv_1;
    wire [0:0] SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_backEN;
    wire [0:0] SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_or0;
    wire [0:0] SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_backStall;
    wire [0:0] SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_V0;
    wire [0:0] SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_V1;
    reg [0:0] SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_R_v_0;
    reg [0:0] SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_R_v_1;
    reg [0:0] SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_R_v_2;
    wire [0:0] SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_v_s_0;
    wire [0:0] SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_s_tv_0;
    wire [0:0] SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_s_tv_1;
    wire [0:0] SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_s_tv_2;
    wire [0:0] SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_backEN;
    wire [0:0] SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_or0;
    wire [0:0] SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_or1;
    wire [0:0] SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_backStall;
    wire [0:0] SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_V0;
    wire [0:0] SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_V1;
    wire [0:0] SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_V2;
    reg [0:0] SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_R_v_0;
    reg [0:0] SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_R_v_1;
    wire [0:0] SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_v_s_0;
    wire [0:0] SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_s_tv_0;
    wire [0:0] SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_s_tv_1;
    wire [0:0] SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_backEN;
    wire [0:0] SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_or0;
    wire [0:0] SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_backStall;
    wire [0:0] SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_V0;
    wire [0:0] SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_V1;
    reg [0:0] SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_R_v_0;
    reg [0:0] SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_R_v_1;
    wire [0:0] SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_v_s_0;
    wire [0:0] SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_s_tv_0;
    wire [0:0] SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_s_tv_1;
    wire [0:0] SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_backEN;
    wire [0:0] SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_or0;
    wire [0:0] SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_backStall;
    wire [0:0] SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_V0;
    wire [0:0] SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_V1;
    reg [0:0] SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_R_v_0;
    reg [0:0] SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_R_v_1;
    reg [0:0] SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_R_v_2;
    wire [0:0] SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_v_s_0;
    wire [0:0] SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_s_tv_0;
    wire [0:0] SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_s_tv_1;
    wire [0:0] SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_s_tv_2;
    wire [0:0] SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_backEN;
    wire [0:0] SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_or0;
    wire [0:0] SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_or1;
    wire [0:0] SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_backStall;
    wire [0:0] SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_V0;
    wire [0:0] SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_V1;
    wire [0:0] SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_V2;
    reg [0:0] SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_R_v_0;
    reg [0:0] SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_R_v_1;
    wire [0:0] SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_v_s_0;
    wire [0:0] SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_s_tv_0;
    wire [0:0] SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_s_tv_1;
    wire [0:0] SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_backEN;
    wire [0:0] SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_or0;
    wire [0:0] SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_backStall;
    wire [0:0] SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_V0;
    wire [0:0] SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_V1;
    reg [0:0] SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_R_v_0;
    reg [0:0] SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_R_v_1;
    wire [0:0] SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_v_s_0;
    wire [0:0] SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_s_tv_0;
    wire [0:0] SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_s_tv_1;
    wire [0:0] SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_backEN;
    wire [0:0] SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_or0;
    wire [0:0] SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_backStall;
    wire [0:0] SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_V0;
    wire [0:0] SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_V1;
    reg [0:0] SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_R_v_0;
    reg [0:0] SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_R_v_1;
    reg [0:0] SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_R_v_2;
    wire [0:0] SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_v_s_0;
    wire [0:0] SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_s_tv_0;
    wire [0:0] SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_s_tv_1;
    wire [0:0] SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_s_tv_2;
    wire [0:0] SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_backEN;
    wire [0:0] SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_or0;
    wire [0:0] SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_or1;
    wire [0:0] SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_backStall;
    wire [0:0] SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_V0;
    wire [0:0] SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_V1;
    wire [0:0] SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_V2;
    reg [0:0] SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_R_v_0;
    reg [0:0] SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_R_v_1;
    wire [0:0] SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_v_s_0;
    wire [0:0] SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_s_tv_0;
    wire [0:0] SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_s_tv_1;
    wire [0:0] SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_backEN;
    wire [0:0] SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_or0;
    wire [0:0] SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_backStall;
    wire [0:0] SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_V0;
    wire [0:0] SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_V1;
    reg [0:0] SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_R_v_0;
    reg [0:0] SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_R_v_1;
    wire [0:0] SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_v_s_0;
    wire [0:0] SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_s_tv_0;
    wire [0:0] SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_s_tv_1;
    wire [0:0] SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_backEN;
    wire [0:0] SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_or0;
    wire [0:0] SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_backStall;
    wire [0:0] SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_V0;
    wire [0:0] SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_V1;
    reg [0:0] SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_R_v_0;
    reg [0:0] SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_R_v_1;
    reg [0:0] SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_R_v_2;
    wire [0:0] SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_v_s_0;
    wire [0:0] SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_s_tv_0;
    wire [0:0] SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_s_tv_1;
    wire [0:0] SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_s_tv_2;
    wire [0:0] SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_backEN;
    wire [0:0] SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_or0;
    wire [0:0] SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_or1;
    wire [0:0] SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_backStall;
    wire [0:0] SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_V0;
    wire [0:0] SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_V1;
    wire [0:0] SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_V2;
    reg [0:0] SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_R_v_0;
    reg [0:0] SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_R_v_1;
    wire [0:0] SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_v_s_0;
    wire [0:0] SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_s_tv_0;
    wire [0:0] SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_s_tv_1;
    wire [0:0] SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_backEN;
    wire [0:0] SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_or0;
    wire [0:0] SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_backStall;
    wire [0:0] SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_V0;
    wire [0:0] SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_V1;
    reg [0:0] SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_R_v_0;
    reg [0:0] SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_R_v_1;
    wire [0:0] SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_v_s_0;
    wire [0:0] SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_s_tv_0;
    wire [0:0] SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_s_tv_1;
    wire [0:0] SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_backEN;
    wire [0:0] SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_or0;
    wire [0:0] SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_backStall;
    wire [0:0] SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_V0;
    wire [0:0] SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_V1;
    reg [0:0] SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_R_v_0;
    reg [0:0] SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_R_v_1;
    reg [0:0] SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_R_v_2;
    wire [0:0] SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_v_s_0;
    wire [0:0] SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_s_tv_0;
    wire [0:0] SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_s_tv_1;
    wire [0:0] SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_s_tv_2;
    wire [0:0] SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_backEN;
    wire [0:0] SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_or0;
    wire [0:0] SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_or1;
    wire [0:0] SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_backStall;
    wire [0:0] SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_V0;
    wire [0:0] SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_V1;
    wire [0:0] SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_V2;
    reg [0:0] SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_R_v_0;
    reg [0:0] SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_R_v_1;
    wire [0:0] SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_v_s_0;
    wire [0:0] SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_s_tv_0;
    wire [0:0] SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_s_tv_1;
    wire [0:0] SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_backEN;
    wire [0:0] SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_or0;
    wire [0:0] SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_backStall;
    wire [0:0] SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_V0;
    wire [0:0] SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_V1;
    reg [0:0] SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_R_v_0;
    reg [0:0] SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_R_v_1;
    wire [0:0] SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_v_s_0;
    wire [0:0] SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_s_tv_0;
    wire [0:0] SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_s_tv_1;
    wire [0:0] SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_backEN;
    wire [0:0] SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_or0;
    wire [0:0] SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_backStall;
    wire [0:0] SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_V0;
    wire [0:0] SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_V1;
    reg [0:0] SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_R_v_0;
    reg [0:0] SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_R_v_1;
    reg [0:0] SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_R_v_2;
    wire [0:0] SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_v_s_0;
    wire [0:0] SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_s_tv_0;
    wire [0:0] SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_s_tv_1;
    wire [0:0] SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_s_tv_2;
    wire [0:0] SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_backEN;
    wire [0:0] SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_or0;
    wire [0:0] SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_or1;
    wire [0:0] SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_backStall;
    wire [0:0] SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_V0;
    wire [0:0] SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_V1;
    wire [0:0] SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_V2;
    reg [0:0] SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_R_v_0;
    reg [0:0] SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_R_v_1;
    wire [0:0] SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_v_s_0;
    wire [0:0] SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_s_tv_0;
    wire [0:0] SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_s_tv_1;
    wire [0:0] SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_backEN;
    wire [0:0] SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_or0;
    wire [0:0] SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_backStall;
    wire [0:0] SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_V0;
    wire [0:0] SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_V1;
    reg [0:0] SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_R_v_0;
    reg [0:0] SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_R_v_1;
    wire [0:0] SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_v_s_0;
    wire [0:0] SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_s_tv_0;
    wire [0:0] SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_s_tv_1;
    wire [0:0] SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_backEN;
    wire [0:0] SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_or0;
    wire [0:0] SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_backStall;
    wire [0:0] SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_V0;
    wire [0:0] SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_V1;
    reg [0:0] SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_R_v_0;
    reg [0:0] SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_R_v_1;
    reg [0:0] SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_R_v_2;
    wire [0:0] SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_v_s_0;
    wire [0:0] SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_s_tv_0;
    wire [0:0] SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_s_tv_1;
    wire [0:0] SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_s_tv_2;
    wire [0:0] SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_backEN;
    wire [0:0] SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_or0;
    wire [0:0] SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_or1;
    wire [0:0] SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_backStall;
    wire [0:0] SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_V0;
    wire [0:0] SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_V1;
    wire [0:0] SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_V2;
    reg [0:0] SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_R_v_0;
    reg [0:0] SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_R_v_1;
    wire [0:0] SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_v_s_0;
    wire [0:0] SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_s_tv_0;
    wire [0:0] SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_s_tv_1;
    wire [0:0] SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_backEN;
    wire [0:0] SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_or0;
    wire [0:0] SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_backStall;
    wire [0:0] SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_V0;
    wire [0:0] SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_V1;
    reg [0:0] SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_R_v_0;
    reg [0:0] SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_R_v_1;
    wire [0:0] SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_v_s_0;
    wire [0:0] SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_s_tv_0;
    wire [0:0] SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_s_tv_1;
    wire [0:0] SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_backEN;
    wire [0:0] SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_or0;
    wire [0:0] SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_backStall;
    wire [0:0] SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_V0;
    wire [0:0] SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_V1;
    reg [0:0] SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_R_v_0;
    reg [0:0] SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_R_v_1;
    wire [0:0] SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_v_s_0;
    wire [0:0] SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_s_tv_0;
    wire [0:0] SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_s_tv_1;
    wire [0:0] SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_backEN;
    wire [0:0] SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_or0;
    wire [0:0] SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_backStall;
    wire [0:0] SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_V0;
    wire [0:0] SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_V1;
    reg [0:0] SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_R_v_0;
    wire [0:0] SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_v_s_0;
    wire [0:0] SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_s_tv_0;
    wire [0:0] SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_backEN;
    wire [0:0] SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_backStall;
    wire [0:0] SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_V0;
    wire [0:0] SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_wireValid;
    wire [0:0] SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_wireStall;
    wire [0:0] SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_StallValid;
    wire [0:0] SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_toReg0;
    reg [0:0] SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_fromReg0;
    wire [0:0] SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_consumed0;
    wire [0:0] SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_toReg1;
    reg [0:0] SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_fromReg1;
    wire [0:0] SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_consumed1;
    wire [0:0] SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_and0;
    wire [0:0] SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_and1;
    wire [0:0] SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_and2;
    wire [0:0] SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_or0;
    wire [0:0] SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_backStall;
    wire [0:0] SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_V0;
    wire [0:0] SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_V1;
    wire [0:0] SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_wireValid;
    wire [0:0] SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_and0;
    wire [0:0] SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_and1;
    wire [0:0] SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_and2;
    wire [0:0] SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_and3;
    wire [0:0] SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_backStall;
    wire [0:0] SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_V0;
    wire [0:0] SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_wireValid;
    wire [0:0] SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_wireStall;
    wire [0:0] SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_StallValid;
    wire [0:0] SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_toReg0;
    reg [0:0] SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_fromReg0;
    wire [0:0] SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_consumed0;
    wire [0:0] SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_toReg1;
    reg [0:0] SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_fromReg1;
    wire [0:0] SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_consumed1;
    wire [0:0] SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_and0;
    wire [0:0] SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_and1;
    wire [0:0] SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_and2;
    wire [0:0] SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_or0;
    wire [0:0] SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_backStall;
    wire [0:0] SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_V0;
    wire [0:0] SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_V1;
    wire [0:0] SE_out_redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_wireValid;
    wire [0:0] SE_out_redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_backStall;
    wire [0:0] SE_out_redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_V0;
    wire [0:0] SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_wireValid;
    wire [0:0] SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_wireStall;
    wire [0:0] SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_StallValid;
    wire [0:0] SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_toReg0;
    reg [0:0] SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_fromReg0;
    wire [0:0] SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_consumed0;
    wire [0:0] SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_toReg1;
    reg [0:0] SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_fromReg1;
    wire [0:0] SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_consumed1;
    wire [0:0] SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_toReg2;
    reg [0:0] SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_fromReg2;
    wire [0:0] SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_consumed2;
    wire [0:0] SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_or0;
    wire [0:0] SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_or1;
    wire [0:0] SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_backStall;
    wire [0:0] SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_V0;
    wire [0:0] SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_V1;
    wire [0:0] SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_V2;
    wire [0:0] SE_out_redist116_i_addr_add253_q_38_fifo_wireValid;
    wire [0:0] SE_out_redist116_i_addr_add253_q_38_fifo_and0;
    wire [0:0] SE_out_redist116_i_addr_add253_q_38_fifo_and1;
    wire [0:0] SE_out_redist116_i_addr_add253_q_38_fifo_and2;
    wire [0:0] SE_out_redist116_i_addr_add253_q_38_fifo_and3;
    wire [0:0] SE_out_redist116_i_addr_add253_q_38_fifo_and4;
    wire [0:0] SE_out_redist116_i_addr_add253_q_38_fifo_backStall;
    wire [0:0] SE_out_redist116_i_addr_add253_q_38_fifo_V0;
    wire [0:0] SE_out_redist117_i_acl_26_add248_q_52_fifo_wireValid;
    wire [0:0] SE_out_redist117_i_acl_26_add248_q_52_fifo_backStall;
    wire [0:0] SE_out_redist117_i_acl_26_add248_q_52_fifo_V0;
    reg [0:0] SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_R_v_0;
    reg [0:0] SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_R_v_1;
    wire [0:0] SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_s_tv_1;
    wire [0:0] SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_or0;
    wire [0:0] SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_V0;
    wire [0:0] SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_V1;
    reg [0:0] SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_R_v_0;
    wire [0:0] SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_v_s_0;
    wire [0:0] SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_s_tv_0;
    wire [0:0] SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_backEN;
    wire [0:0] SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_backStall;
    wire [0:0] SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_V0;
    reg [0:0] SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_R_v_0;
    wire [0:0] SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_V0;
    reg [0:0] SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_R_v_0;
    reg [0:0] SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_R_v_1;
    wire [0:0] SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_s_tv_1;
    wire [0:0] SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_or0;
    wire [0:0] SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_V0;
    wire [0:0] SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_V1;
    reg [0:0] SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_R_v_0;
    wire [0:0] SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_v_s_0;
    wire [0:0] SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_s_tv_0;
    wire [0:0] SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_backEN;
    wire [0:0] SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_backStall;
    wire [0:0] SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_V0;
    reg [0:0] SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_R_v_0;
    wire [0:0] SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_V0;
    reg [0:0] SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_R_v_0;
    reg [0:0] SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_R_v_1;
    wire [0:0] SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_s_tv_1;
    wire [0:0] SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_or0;
    wire [0:0] SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_V0;
    wire [0:0] SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_V1;
    reg [0:0] SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_R_v_0;
    wire [0:0] SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_v_s_0;
    wire [0:0] SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_s_tv_0;
    wire [0:0] SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_backEN;
    wire [0:0] SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_backStall;
    wire [0:0] SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_V0;
    reg [0:0] SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_R_v_0;
    wire [0:0] SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_V0;
    reg [0:0] SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_R_v_0;
    reg [0:0] SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_R_v_1;
    wire [0:0] SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_s_tv_1;
    wire [0:0] SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_or0;
    wire [0:0] SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_V0;
    wire [0:0] SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_V1;
    reg [0:0] SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_R_v_0;
    wire [0:0] SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_v_s_0;
    wire [0:0] SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_s_tv_0;
    wire [0:0] SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_backEN;
    wire [0:0] SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_backStall;
    wire [0:0] SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_V0;
    reg [0:0] SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_R_v_0;
    reg [0:0] SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_R_v_1;
    wire [0:0] SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_s_tv_1;
    wire [0:0] SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_or0;
    wire [0:0] SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_V0;
    wire [0:0] SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_V1;
    reg [0:0] SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_R_v_0;
    wire [0:0] SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_v_s_0;
    wire [0:0] SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_s_tv_0;
    wire [0:0] SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_backEN;
    wire [0:0] SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_backStall;
    wire [0:0] SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_V0;
    reg [0:0] SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_R_v_0;
    wire [0:0] SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_V0;
    reg [0:0] SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_R_v_0;
    wire [0:0] SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_V0;
    reg [0:0] SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_R_v_0;
    reg [0:0] SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_R_v_1;
    wire [0:0] SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_s_tv_1;
    wire [0:0] SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_or0;
    wire [0:0] SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_V0;
    wire [0:0] SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_V1;
    reg [0:0] SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_R_v_0;
    wire [0:0] SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_v_s_0;
    wire [0:0] SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_s_tv_0;
    wire [0:0] SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_backEN;
    wire [0:0] SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_backStall;
    wire [0:0] SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_V0;
    reg [0:0] SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_R_v_0;
    wire [0:0] SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_V0;
    reg [0:0] SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_R_v_0;
    reg [0:0] SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_R_v_1;
    wire [0:0] SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_s_tv_1;
    wire [0:0] SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_or0;
    wire [0:0] SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_V0;
    wire [0:0] SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_V1;
    reg [0:0] SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_R_v_0;
    wire [0:0] SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_v_s_0;
    wire [0:0] SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_s_tv_0;
    wire [0:0] SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_backEN;
    wire [0:0] SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_backStall;
    wire [0:0] SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_V0;
    reg [0:0] SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_R_v_0;
    wire [0:0] SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_V0;
    reg [0:0] SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_R_v_0;
    reg [0:0] SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_R_v_1;
    wire [0:0] SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_s_tv_1;
    wire [0:0] SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_or0;
    wire [0:0] SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_V0;
    wire [0:0] SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_V1;
    reg [0:0] SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_R_v_0;
    wire [0:0] SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_v_s_0;
    wire [0:0] SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_s_tv_0;
    wire [0:0] SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_backEN;
    wire [0:0] SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_backStall;
    wire [0:0] SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_V0;
    reg [0:0] SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_R_v_0;
    wire [0:0] SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_V0;
    reg [0:0] SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_R_v_0;
    reg [0:0] SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_R_v_1;
    wire [0:0] SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_s_tv_1;
    wire [0:0] SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_or0;
    wire [0:0] SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_V0;
    wire [0:0] SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_V1;
    reg [0:0] SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_R_v_0;
    wire [0:0] SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_v_s_0;
    wire [0:0] SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_s_tv_0;
    wire [0:0] SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_backEN;
    wire [0:0] SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_backStall;
    wire [0:0] SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_V0;
    reg [0:0] SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_R_v_0;
    wire [0:0] SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_V0;
    reg [0:0] SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_R_v_0;
    reg [0:0] SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_R_v_1;
    wire [0:0] SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_s_tv_1;
    wire [0:0] SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_or0;
    wire [0:0] SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_V0;
    wire [0:0] SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_V1;
    reg [0:0] SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_R_v_0;
    wire [0:0] SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_v_s_0;
    wire [0:0] SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_s_tv_0;
    wire [0:0] SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_backEN;
    wire [0:0] SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_backStall;
    wire [0:0] SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_V0;
    reg [0:0] SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_R_v_0;
    wire [0:0] SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_V0;
    reg [0:0] SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_R_v_0;
    wire [0:0] SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_V0;
    reg [0:0] SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_R_v_0;
    reg [0:0] SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_R_v_1;
    wire [0:0] SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_s_tv_1;
    wire [0:0] SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_or0;
    wire [0:0] SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_V0;
    wire [0:0] SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_V1;
    reg [0:0] SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_R_v_0;
    wire [0:0] SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_v_s_0;
    wire [0:0] SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_s_tv_0;
    wire [0:0] SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_backEN;
    wire [0:0] SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_backStall;
    wire [0:0] SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_V0;
    reg [0:0] SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_R_v_0;
    wire [0:0] SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_V0;
    reg [0:0] SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_R_v_0;
    reg [0:0] SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_R_v_1;
    wire [0:0] SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_s_tv_1;
    wire [0:0] SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_or0;
    wire [0:0] SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_V0;
    wire [0:0] SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_V1;
    reg [0:0] SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_R_v_0;
    wire [0:0] SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_v_s_0;
    wire [0:0] SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_s_tv_0;
    wire [0:0] SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_backEN;
    wire [0:0] SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_backStall;
    wire [0:0] SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_V0;
    reg [0:0] SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_R_v_0;
    wire [0:0] SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_V0;
    reg [0:0] SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_R_v_0;
    reg [0:0] SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_R_v_1;
    wire [0:0] SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_s_tv_1;
    wire [0:0] SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_or0;
    wire [0:0] SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_V0;
    wire [0:0] SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_V1;
    reg [0:0] SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_R_v_0;
    wire [0:0] SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_v_s_0;
    wire [0:0] SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_s_tv_0;
    wire [0:0] SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_backEN;
    wire [0:0] SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_backStall;
    wire [0:0] SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_V0;
    reg [0:0] SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_R_v_0;
    wire [0:0] SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_V0;
    reg [0:0] SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_R_v_0;
    reg [0:0] SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_R_v_1;
    wire [0:0] SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_s_tv_1;
    wire [0:0] SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_or0;
    wire [0:0] SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_V0;
    wire [0:0] SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_V1;
    reg [0:0] SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_R_v_0;
    wire [0:0] SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_v_s_0;
    wire [0:0] SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_s_tv_0;
    wire [0:0] SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_backEN;
    wire [0:0] SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_backStall;
    wire [0:0] SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_V0;
    reg [0:0] SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_R_v_0;
    wire [0:0] SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_V0;
    reg [0:0] SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_R_v_0;
    wire [0:0] SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_V0;
    reg [0:0] SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_R_v_0;
    wire [0:0] SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_v_s_0;
    wire [0:0] SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_s_tv_0;
    wire [0:0] SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_backEN;
    wire [0:0] SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_V0;
    wire [0:0] SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_wireValid;
    wire [0:0] SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_wireStall;
    wire [0:0] SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_StallValid;
    wire [0:0] SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_toReg0;
    reg [0:0] SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_fromReg0;
    wire [0:0] SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_consumed0;
    wire [0:0] SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_toReg1;
    reg [0:0] SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_fromReg1;
    wire [0:0] SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_consumed1;
    wire [0:0] SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_or0;
    wire [0:0] SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_backStall;
    wire [0:0] SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_V0;
    wire [0:0] SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_V1;
    reg [0:0] SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0;
    wire [0:0] SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_v_s_0;
    wire [0:0] SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_s_tv_0;
    wire [0:0] SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_backEN;
    wire [0:0] SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_backStall;
    wire [0:0] SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_V0;
    reg [0:0] SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0;
    wire [0:0] SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0;
    wire [0:0] SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0;
    wire [0:0] SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_backEN;
    wire [0:0] SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_backStall;
    wire [0:0] SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_V0;
    reg [0:0] SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_R_v_0;
    reg [0:0] SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_R_v_1;
    wire [0:0] SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_v_s_0;
    wire [0:0] SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_s_tv_0;
    wire [0:0] SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_s_tv_1;
    wire [0:0] SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_backEN;
    wire [0:0] SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_or0;
    wire [0:0] SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_backStall;
    wire [0:0] SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_V0;
    wire [0:0] SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_V1;
    reg [0:0] SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0;
    wire [0:0] SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_v_s_0;
    wire [0:0] SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_s_tv_0;
    wire [0:0] SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_backEN;
    wire [0:0] SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_backStall;
    wire [0:0] SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_V0;
    reg [0:0] SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0;
    wire [0:0] SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0;
    wire [0:0] SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0;
    wire [0:0] SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_backEN;
    wire [0:0] SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_backStall;
    wire [0:0] SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_V0;
    reg [0:0] SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0;
    wire [0:0] SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_v_s_0;
    wire [0:0] SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_s_tv_0;
    wire [0:0] SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_backEN;
    wire [0:0] SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_backStall;
    wire [0:0] SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_V0;
    reg [0:0] SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0;
    wire [0:0] SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0;
    wire [0:0] SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0;
    wire [0:0] SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_backEN;
    wire [0:0] SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_backStall;
    wire [0:0] SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_V0;
    reg [0:0] SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_R_v_0;
    wire [0:0] SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_v_s_0;
    wire [0:0] SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_s_tv_0;
    wire [0:0] SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_backEN;
    wire [0:0] SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_backStall;
    wire [0:0] SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_V0;
    reg [0:0] SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0;
    wire [0:0] SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_v_s_0;
    wire [0:0] SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_s_tv_0;
    wire [0:0] SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_backEN;
    wire [0:0] SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_backStall;
    wire [0:0] SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_V0;
    reg [0:0] SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0;
    wire [0:0] SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0;
    wire [0:0] SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0;
    wire [0:0] SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_backEN;
    wire [0:0] SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_backStall;
    wire [0:0] SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_V0;
    reg [0:0] SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_R_v_0;
    wire [0:0] SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_v_s_0;
    wire [0:0] SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_s_tv_0;
    wire [0:0] SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_backEN;
    wire [0:0] SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_backStall;
    wire [0:0] SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_V0;
    reg [0:0] SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0;
    wire [0:0] SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_v_s_0;
    wire [0:0] SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_s_tv_0;
    wire [0:0] SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_backEN;
    wire [0:0] SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_backStall;
    wire [0:0] SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_V0;
    reg [0:0] SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0;
    wire [0:0] SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0;
    wire [0:0] SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0;
    wire [0:0] SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_backEN;
    wire [0:0] SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_backStall;
    wire [0:0] SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_V0;
    reg [0:0] SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_R_v_0;
    wire [0:0] SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_v_s_0;
    wire [0:0] SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_s_tv_0;
    wire [0:0] SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_backEN;
    wire [0:0] SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_backStall;
    wire [0:0] SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_V0;
    reg [0:0] SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_R_v_0;
    wire [0:0] SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_v_s_0;
    wire [0:0] SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_s_tv_0;
    wire [0:0] SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_backEN;
    wire [0:0] SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_backStall;
    wire [0:0] SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_V0;
    reg [0:0] SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_R_v_0;
    wire [0:0] SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_v_s_0;
    wire [0:0] SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_s_tv_0;
    wire [0:0] SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_backEN;
    wire [0:0] SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_backStall;
    wire [0:0] SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_V0;
    reg [0:0] SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_R_v_0;
    wire [0:0] SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_v_s_0;
    wire [0:0] SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_s_tv_0;
    wire [0:0] SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_backEN;
    wire [0:0] SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_backStall;
    wire [0:0] SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_V0;
    reg [0:0] SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0;
    wire [0:0] SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0;
    wire [0:0] SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0;
    wire [0:0] SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_backEN;
    wire [0:0] SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_backStall;
    wire [0:0] SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_V0;
    reg [0:0] SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_R_v_0;
    wire [0:0] SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_v_s_0;
    wire [0:0] SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_s_tv_0;
    wire [0:0] SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_backEN;
    wire [0:0] SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_backStall;
    wire [0:0] SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_V0;
    reg [0:0] SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_R_v_0;
    reg [0:0] SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_R_v_1;
    wire [0:0] SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_v_s_0;
    wire [0:0] SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_s_tv_0;
    wire [0:0] SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_s_tv_1;
    wire [0:0] SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_backEN;
    wire [0:0] SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_or0;
    wire [0:0] SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_backStall;
    wire [0:0] SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_V0;
    wire [0:0] SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_V1;
    reg [0:0] SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_R_v_0;
    wire [0:0] SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_v_s_0;
    wire [0:0] SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_s_tv_0;
    wire [0:0] SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_backEN;
    wire [0:0] SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_backStall;
    wire [0:0] SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_V0;
    wire [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_wireValid;
    wire [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_wireStall;
    wire [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_StallValid;
    wire [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_toReg0;
    reg [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_fromReg0;
    wire [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_consumed0;
    wire [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_toReg1;
    reg [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_fromReg1;
    wire [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_consumed1;
    wire [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_toReg2;
    reg [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_fromReg2;
    wire [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_consumed2;
    wire [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_and0;
    wire [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_and1;
    wire [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_and2;
    wire [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_and3;
    wire [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_or0;
    wire [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_or1;
    wire [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_backStall;
    wire [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_V0;
    wire [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_V1;
    wire [0:0] SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_V2;
    wire [0:0] SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_wireValid;
    wire [0:0] SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_wireStall;
    wire [0:0] SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_StallValid;
    wire [0:0] SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_toReg0;
    reg [0:0] SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_fromReg0;
    wire [0:0] SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_consumed0;
    wire [0:0] SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_toReg1;
    reg [0:0] SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_fromReg1;
    wire [0:0] SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_consumed1;
    wire [0:0] SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_or0;
    wire [0:0] SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_backStall;
    wire [0:0] SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_V0;
    wire [0:0] SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_V1;
    wire [0:0] SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_wireValid;
    wire [0:0] SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_wireStall;
    wire [0:0] SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_StallValid;
    wire [0:0] SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_toReg0;
    reg [0:0] SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_fromReg0;
    wire [0:0] SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_consumed0;
    wire [0:0] SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_toReg1;
    reg [0:0] SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_fromReg1;
    wire [0:0] SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_consumed1;
    wire [0:0] SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_toReg2;
    reg [0:0] SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_fromReg2;
    wire [0:0] SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_consumed2;
    wire [0:0] SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_or0;
    wire [0:0] SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_or1;
    wire [0:0] SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_backStall;
    wire [0:0] SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_V0;
    wire [0:0] SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_V1;
    wire [0:0] SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_V2;
    reg [0:0] SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_R_v_0;
    reg [0:0] SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_R_v_1;
    reg [0:0] SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_R_v_2;
    wire [0:0] SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_v_s_0;
    wire [0:0] SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_s_tv_0;
    wire [0:0] SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_s_tv_1;
    wire [0:0] SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_s_tv_2;
    wire [0:0] SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_backEN;
    wire [0:0] SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_or0;
    wire [0:0] SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_or1;
    wire [0:0] SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_backStall;
    wire [0:0] SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_V0;
    wire [0:0] SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_V1;
    wire [0:0] SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_V2;
    wire [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_wireValid;
    wire [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_wireStall;
    wire [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_StallValid;
    wire [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_toReg0;
    reg [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_fromReg0;
    wire [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_consumed0;
    wire [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_toReg1;
    reg [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_fromReg1;
    wire [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_consumed1;
    wire [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_toReg2;
    reg [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_fromReg2;
    wire [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_consumed2;
    wire [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_toReg3;
    reg [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_fromReg3;
    wire [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_consumed3;
    wire [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_or0;
    wire [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_or1;
    wire [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_or2;
    wire [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_backStall;
    wire [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_V0;
    wire [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_V1;
    wire [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_V2;
    wire [0:0] SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_V3;
    wire [0:0] SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_wireValid;
    wire [0:0] SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_wireStall;
    wire [0:0] SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_StallValid;
    wire [0:0] SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_toReg0;
    reg [0:0] SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_fromReg0;
    wire [0:0] SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_consumed0;
    wire [0:0] SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_toReg1;
    reg [0:0] SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_fromReg1;
    wire [0:0] SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_consumed1;
    wire [0:0] SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_or0;
    wire [0:0] SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_backStall;
    wire [0:0] SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_V0;
    wire [0:0] SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_V1;
    wire [0:0] SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_wireValid;
    wire [0:0] SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_wireStall;
    wire [0:0] SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_StallValid;
    wire [0:0] SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_toReg0;
    reg [0:0] SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_fromReg0;
    wire [0:0] SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_consumed0;
    wire [0:0] SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_toReg1;
    reg [0:0] SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_fromReg1;
    wire [0:0] SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_consumed1;
    wire [0:0] SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_or0;
    wire [0:0] SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_backStall;
    wire [0:0] SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_V0;
    wire [0:0] SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_V1;
    wire [0:0] SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_wireValid;
    wire [0:0] SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_backStall;
    wire [0:0] SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_1_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_1_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_1_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_2_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_2_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_2_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_4_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_4_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_4_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_5_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_5_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_5_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_6_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_6_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_6_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_8_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_8_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_8_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_9_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_9_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_9_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_10_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_10_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_10_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_11_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_11_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_11_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_12_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_12_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_12_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_14_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_14_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_14_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_15_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_15_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_15_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_16_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_16_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_16_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_17_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_17_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_17_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_19_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_19_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_19_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_20_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_20_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_20_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_21_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_21_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_21_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_23_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_23_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_23_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_24_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_24_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_24_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_25_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_25_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_25_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_26_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_26_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_26_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_27_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_27_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_27_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_32_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_32_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_32_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_33_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_33_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_33_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_35_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_35_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_35_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_36_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_36_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_36_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_39_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_39_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_39_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_40_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_40_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_40_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_41_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_41_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_41_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_42_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_42_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_42_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_43_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_43_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_43_V0;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_44_wireValid;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_44_backStall;
    wire [0:0] SE_out_bubble_out_add_B8_merge_reg_aunroll_x_44_V0;
    wire [0:0] SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_wireValid;
    wire [0:0] SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and0;
    wire [0:0] SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and1;
    wire [0:0] SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and2;
    wire [0:0] SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and3;
    wire [0:0] SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and4;
    wire [0:0] SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and5;
    wire [0:0] SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and6;
    wire [0:0] SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and7;
    wire [0:0] SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and8;
    wire [0:0] SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and9;
    wire [0:0] SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and10;
    wire [0:0] SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and11;
    wire [0:0] SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and12;
    wire [0:0] SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and13;
    wire [0:0] SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and14;
    wire [0:0] SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and15;
    wire [0:0] SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_backStall;
    wire [0:0] SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_V0;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_1_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_1_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_1_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_1_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_1_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_1_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_1_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_1_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_2_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_2_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_2_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_2_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_2_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_2_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_2_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_2_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_4_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_4_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_4_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_4_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_4_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_4_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_4_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_4_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_5_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_5_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_5_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_5_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_5_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_5_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_5_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_5_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_6_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_6_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_6_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_6_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_6_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_6_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_6_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_6_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_8_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_8_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_8_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_8_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_8_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_8_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_8_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_8_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_9_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_9_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_9_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_9_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_9_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_9_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_9_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_9_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_10_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_10_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_10_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_10_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_10_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_10_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_10_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_10_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_11_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_11_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_11_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_11_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_11_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_11_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_11_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_11_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_12_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_12_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_12_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_12_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_12_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_12_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_12_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_12_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_14_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_14_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_14_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_14_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_14_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_14_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_14_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_14_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_15_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_15_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_15_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_15_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_15_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_15_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_15_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_15_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_16_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_16_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_16_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_16_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_16_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_16_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_16_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_16_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_17_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_17_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_17_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_17_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_17_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_17_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_17_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_17_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_19_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_19_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_19_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_19_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_19_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_19_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_19_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_19_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_20_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_20_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_20_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_20_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_20_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_20_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_20_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_20_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_21_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_21_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_21_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_21_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_21_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_21_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_21_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_21_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_23_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_23_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_23_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_23_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_23_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_23_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_23_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_23_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_24_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_24_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_24_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_24_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_24_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_24_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_24_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_24_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_25_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_25_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_25_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_25_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_25_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_25_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_25_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_25_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_26_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_26_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_26_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_26_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_26_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_26_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_26_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_26_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_27_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_27_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_27_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_27_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_27_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_27_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_27_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_27_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_32_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_32_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_32_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_32_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_32_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_32_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_32_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_32_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_33_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_33_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_33_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_33_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_33_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_33_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_33_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_33_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_35_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_35_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_35_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_35_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_35_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_35_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_35_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_35_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_36_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_36_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_36_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_36_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_36_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_36_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_36_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_36_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_39_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_39_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_39_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_39_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_39_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_39_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_39_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_39_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_40_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_40_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_40_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_40_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_40_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_40_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_40_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_40_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_41_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_41_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_41_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_41_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_41_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_41_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_41_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_41_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_42_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_42_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_42_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_42_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_42_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_42_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_42_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_42_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_43_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_43_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_43_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_43_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_43_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_43_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_43_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_43_reg_stall_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_44_reg_valid_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_44_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_44_reg_stall_in;
    wire bubble_out_add_B8_merge_reg_aunroll_x_44_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_44_reg_valid_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_44_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_add_B8_merge_reg_aunroll_x_44_reg_stall_out;
    wire bubble_out_add_B8_merge_reg_aunroll_x_44_reg_stall_out_bitsignaltemp;
    reg [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_R_v_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_v_s_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_s_tv_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_backEN;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_backStall;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_V0;
    reg [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_R_v_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_v_s_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_s_tv_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_backEN;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_backStall;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_V0;
    reg [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_R_v_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_v_s_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_s_tv_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_backEN;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_backStall;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_V0;
    reg [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_R_v_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_v_s_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_s_tv_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_backEN;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_backStall;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_V0;
    reg [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_R_v_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_v_s_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_s_tv_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_backEN;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_backStall;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_V0;
    reg [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_R_v_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_v_s_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_s_tv_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_backEN;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_backStall;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_V0;
    reg [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_R_v_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_v_s_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_s_tv_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_backEN;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_backStall;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_V0;
    reg [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_R_v_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_v_s_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_s_tv_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_backEN;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_backStall;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_V0;
    reg [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_R_v_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_v_s_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_s_tv_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_backEN;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_backStall;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_V0;
    reg [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_R_v_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_v_s_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_s_tv_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_backEN;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_backStall;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_V0;
    reg [0:0] bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_R_v_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_v_s_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_s_tv_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_backEN;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_backStall;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_V0;
    reg [0:0] bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_R_v_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_v_s_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_s_tv_0;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_backEN;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_backStall;
    wire [0:0] bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_V0;
    wire [0:0] bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_valid_in;
    wire bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_valid_in_bitsignaltemp;
    wire [0:0] bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_stall_in;
    wire bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_stall_in_bitsignaltemp;
    wire [0:0] bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_valid_out;
    wire bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_valid_out_bitsignaltemp;
    wire [0:0] bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_stall_out;
    wire bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_stall_out_bitsignaltemp;
    reg [0:0] bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_R_v_0;
    wire [0:0] bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_v_s_0;
    wire [0:0] bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_s_tv_0;
    wire [0:0] bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_backEN;
    wire [0:0] bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_backStall;
    wire [0:0] bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_V0;
    reg [0:0] bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_R_v_0;
    wire [0:0] bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_v_s_0;
    wire [0:0] bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_s_tv_0;
    wire [0:0] bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_backEN;
    wire [0:0] bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_backStall;
    wire [0:0] bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_V0;
    wire [0:0] SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_i_valid;
    reg [0:0] SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_r_valid;
    reg [0:0] SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_r_data0;
    wire [0:0] SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_backStall;
    wire [0:0] SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_V;
    wire [0:0] SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_D0;
    wire [0:0] SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_i_valid;
    reg [0:0] SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_r_valid;
    wire [0:0] SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_and0;
    reg [31:0] SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_r_data0;
    reg [0:0] SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_r_data1;
    wire [0:0] SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_backStall;
    wire [0:0] SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_V;
    wire [31:0] SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_D0;
    wire [0:0] SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_D1;
    wire [0:0] SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_i_valid;
    reg [0:0] SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_r_valid;
    reg [31:0] SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_r_data0;
    wire [0:0] SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_backStall;
    wire [0:0] SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_V;
    wire [31:0] SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_D0;
    wire [0:0] SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_i_valid;
    reg [0:0] SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_r_valid;
    reg [31:0] SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_r_data0;
    wire [0:0] SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_backStall;
    wire [0:0] SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_V;
    wire [31:0] SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_D0;
    wire [0:0] SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_i_valid;
    reg [0:0] SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_r_valid;
    reg [31:0] SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_r_data0;
    wire [0:0] SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_backStall;
    wire [0:0] SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_V;
    wire [31:0] SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_D0;
    wire [0:0] SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_i_valid;
    reg [0:0] SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_r_valid;
    reg [31:0] SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_r_data0;
    wire [0:0] SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_backStall;
    wire [0:0] SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_V;
    wire [31:0] SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_D0;
    wire [0:0] SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_i_valid;
    reg [0:0] SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_r_valid;
    reg [31:0] SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_r_data0;
    wire [0:0] SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_backStall;
    wire [0:0] SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_V;
    wire [31:0] SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_D0;
    wire [0:0] SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_i_valid;
    reg [0:0] SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_r_valid;
    reg [31:0] SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_r_data0;
    wire [0:0] SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_backStall;
    wire [0:0] SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_V;
    wire [31:0] SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_D0;
    wire [0:0] SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_i_valid;
    reg [0:0] SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_r_valid;
    reg [31:0] SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_r_data0;
    wire [0:0] SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_backStall;
    wire [0:0] SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_V;
    wire [31:0] SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_D0;
    wire [0:0] SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_i_valid;
    reg [0:0] SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_r_valid;
    reg [31:0] SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_r_data0;
    wire [0:0] SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_backStall;
    wire [0:0] SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_V;
    wire [31:0] SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_D0;
    wire [0:0] SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_i_valid;
    reg [0:0] SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_r_valid;
    reg [31:0] SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_r_data0;
    wire [0:0] SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_backStall;
    wire [0:0] SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_V;
    wire [31:0] SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_D0;
    wire [0:0] SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_i_valid;
    reg [0:0] SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_valid;
    reg [31:0] SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_data0;
    reg [61:0] SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_data1;
    reg [63:0] SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_data2;
    reg [63:0] SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_data3;
    wire [0:0] SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_backStall;
    wire [0:0] SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_V;
    wire [31:0] SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_D0;
    wire [61:0] SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_D1;
    wire [63:0] SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_D2;
    wire [63:0] SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_D3;
    wire [0:0] SR_SE_i_addr_add253_i_valid;
    reg [0:0] SR_SE_i_addr_add253_r_valid;
    wire [0:0] SR_SE_i_addr_add253_and0;
    wire [0:0] SR_SE_i_addr_add253_and1;
    reg [0:0] SR_SE_i_addr_add253_r_data0;
    reg [63:0] SR_SE_i_addr_add253_r_data1;
    reg [63:0] SR_SE_i_addr_add253_r_data2;
    wire [0:0] SR_SE_i_addr_add253_backStall;
    wire [0:0] SR_SE_i_addr_add253_V;
    wire [0:0] SR_SE_i_addr_add253_D0;
    wire [63:0] SR_SE_i_addr_add253_D1;
    wire [63:0] SR_SE_i_addr_add253_D2;
    wire [0:0] SR_SE_i_unnamed_add258_i_valid;
    reg [0:0] SR_SE_i_unnamed_add258_r_valid;
    wire [0:0] SR_SE_i_unnamed_add258_and0;
    wire [0:0] SR_SE_i_unnamed_add258_and1;
    reg [0:0] SR_SE_i_unnamed_add258_r_data0;
    reg [0:0] SR_SE_i_unnamed_add258_r_data1;
    reg [0:0] SR_SE_i_unnamed_add258_r_data2;
    wire [0:0] SR_SE_i_unnamed_add258_backStall;
    wire [0:0] SR_SE_i_unnamed_add258_V;
    wire [0:0] SR_SE_i_unnamed_add258_D0;
    wire [0:0] SR_SE_i_unnamed_add258_D1;
    wire [0:0] SR_SE_i_unnamed_add258_D2;
    wire [0:0] SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_i_valid;
    reg [0:0] SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_r_valid;
    reg [31:0] SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_r_data0;
    wire [0:0] SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_backStall;
    wire [0:0] SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_V;
    wire [31:0] SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_D0;
    wire [0:0] SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_i_valid;
    reg [0:0] SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_r_valid;
    reg [31:0] SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_r_data0;
    wire [0:0] SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_backStall;
    wire [0:0] SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_V;
    wire [31:0] SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_D0;
    wire [0:0] SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_i_valid;
    reg [0:0] SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_r_valid;
    reg [31:0] SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_r_data0;
    wire [0:0] SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_backStall;
    wire [0:0] SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_V;
    wire [31:0] SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_D0;
    wire [0:0] SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_i_valid;
    reg [0:0] SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_r_valid;
    reg [31:0] SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_r_data0;
    wire [0:0] SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_backStall;
    wire [0:0] SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_V;
    wire [31:0] SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_D0;
    wire [0:0] SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_i_valid;
    reg [0:0] SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_r_valid;
    reg [31:0] SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_r_data0;
    wire [0:0] SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_backStall;
    wire [0:0] SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_V;
    wire [31:0] SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_D0;
    wire [0:0] SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_i_valid;
    reg [0:0] SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_r_valid;
    reg [31:0] SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_r_data0;
    wire [0:0] SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_backStall;
    wire [0:0] SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_V;
    wire [31:0] SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_D0;
    wire [0:0] SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_i_valid;
    reg [0:0] SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_r_valid;
    reg [31:0] SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_r_data0;
    wire [0:0] SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_backStall;
    wire [0:0] SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_V;
    wire [31:0] SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_D0;
    wire [0:0] SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_i_valid;
    reg [0:0] SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_r_valid;
    reg [31:0] SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_r_data0;
    wire [0:0] SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_backStall;
    wire [0:0] SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_V;
    wire [31:0] SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_D0;
    wire [0:0] SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_i_valid;
    reg [0:0] SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_r_valid;
    reg [31:0] SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_r_data0;
    wire [0:0] SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_backStall;
    wire [0:0] SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_V;
    wire [31:0] SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_D0;
    wire [0:0] SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_i_valid;
    reg [0:0] SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_r_valid;
    reg [31:0] SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_r_data0;
    wire [0:0] SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_backStall;
    wire [0:0] SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_V;
    wire [31:0] SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_D0;
    wire [0:0] SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_i_valid;
    reg [0:0] SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_r_valid;
    reg [31:0] SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_r_data0;
    wire [0:0] SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_backStall;
    wire [0:0] SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_V;
    wire [31:0] SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_D0;
    wire [0:0] SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_i_valid;
    reg [0:0] SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_r_valid;
    reg [31:0] SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_r_data0;
    wire [0:0] SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_backStall;
    wire [0:0] SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_V;
    wire [31:0] SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_D0;
    wire [0:0] SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_i_valid;
    reg [0:0] SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_r_valid;
    reg [31:0] SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_r_data0;
    wire [0:0] SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_backStall;
    wire [0:0] SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_V;
    wire [31:0] SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_D0;
    wire [0:0] SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_i_valid;
    reg [0:0] SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_r_valid;
    reg [31:0] SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_r_data0;
    wire [0:0] SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_backStall;
    wire [0:0] SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_V;
    wire [31:0] SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_D0;
    wire [0:0] SR_SE_i_cmp3_i_2_i14_add72_i_valid;
    reg [0:0] SR_SE_i_cmp3_i_2_i14_add72_r_valid;
    wire [0:0] SR_SE_i_cmp3_i_2_i14_add72_and0;
    reg [31:0] SR_SE_i_cmp3_i_2_i14_add72_r_data0;
    reg [31:0] SR_SE_i_cmp3_i_2_i14_add72_r_data1;
    wire [0:0] SR_SE_i_cmp3_i_2_i14_add72_backStall;
    wire [0:0] SR_SE_i_cmp3_i_2_i14_add72_V;
    wire [31:0] SR_SE_i_cmp3_i_2_i14_add72_D0;
    wire [31:0] SR_SE_i_cmp3_i_2_i14_add72_D1;
    wire [0:0] SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_i_valid;
    reg [0:0] SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_r_valid;
    reg [31:0] SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_r_data0;
    wire [0:0] SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_V;
    wire [31:0] SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_D0;
    wire [0:0] SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_i_valid;
    reg [0:0] SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_r_valid;
    reg [31:0] SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_r_data0;
    wire [0:0] SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_V;
    wire [31:0] SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_D0;
    wire [0:0] SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_i_valid;
    reg [0:0] SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_r_valid;
    reg [31:0] SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_r_data0;
    wire [0:0] SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_V;
    wire [31:0] SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_D0;
    wire [0:0] SR_SE_i_cmp3_i_6_i38_add92_i_valid;
    reg [0:0] SR_SE_i_cmp3_i_6_i38_add92_r_valid;
    wire [0:0] SR_SE_i_cmp3_i_6_i38_add92_and0;
    reg [31:0] SR_SE_i_cmp3_i_6_i38_add92_r_data0;
    reg [31:0] SR_SE_i_cmp3_i_6_i38_add92_r_data1;
    wire [0:0] SR_SE_i_cmp3_i_6_i38_add92_backStall;
    wire [0:0] SR_SE_i_cmp3_i_6_i38_add92_V;
    wire [31:0] SR_SE_i_cmp3_i_6_i38_add92_D0;
    wire [31:0] SR_SE_i_cmp3_i_6_i38_add92_D1;
    wire [0:0] SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_i_valid;
    reg [0:0] SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_r_valid;
    reg [31:0] SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_r_data0;
    wire [0:0] SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_V;
    wire [31:0] SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_D0;
    wire [0:0] SR_SE_i_unnamed_add98_i_valid;
    reg [0:0] SR_SE_i_unnamed_add98_r_valid;
    wire [0:0] SR_SE_i_unnamed_add98_and0;
    reg [0:0] SR_SE_i_unnamed_add98_r_data0;
    reg [31:0] SR_SE_i_unnamed_add98_r_data1;
    wire [0:0] SR_SE_i_unnamed_add98_backStall;
    wire [0:0] SR_SE_i_unnamed_add98_V;
    wire [0:0] SR_SE_i_unnamed_add98_D0;
    wire [31:0] SR_SE_i_unnamed_add98_D1;
    wire [0:0] SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_i_valid;
    reg [0:0] SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_r_valid;
    reg [31:0] SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_r_data0;
    wire [0:0] SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_backStall;
    wire [0:0] SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_V;
    wire [31:0] SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_D0;
    wire [0:0] SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_i_valid;
    reg [0:0] SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_r_valid;
    reg [31:0] SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_r_data0;
    wire [0:0] SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_V;
    wire [31:0] SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_D0;
    wire [0:0] SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_i_valid;
    reg [0:0] SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_r_valid;
    reg [31:0] SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_r_data0;
    wire [0:0] SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_backStall;
    wire [0:0] SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_V;
    wire [31:0] SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_D0;
    wire [0:0] SR_SE_i_cmp3_i_12_i74_add122_i_valid;
    reg [0:0] SR_SE_i_cmp3_i_12_i74_add122_r_valid;
    wire [0:0] SR_SE_i_cmp3_i_12_i74_add122_and0;
    reg [31:0] SR_SE_i_cmp3_i_12_i74_add122_r_data0;
    reg [31:0] SR_SE_i_cmp3_i_12_i74_add122_r_data1;
    wire [0:0] SR_SE_i_cmp3_i_12_i74_add122_backStall;
    wire [0:0] SR_SE_i_cmp3_i_12_i74_add122_V;
    wire [31:0] SR_SE_i_cmp3_i_12_i74_add122_D0;
    wire [31:0] SR_SE_i_cmp3_i_12_i74_add122_D1;
    wire [0:0] SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_i_valid;
    reg [0:0] SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_r_valid;
    reg [31:0] SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_r_data0;
    wire [0:0] SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_V;
    wire [31:0] SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_D0;
    wire [0:0] SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_i_valid;
    reg [0:0] SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_r_valid;
    reg [31:0] SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_r_data0;
    wire [0:0] SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_V;
    wire [31:0] SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_D0;
    wire [0:0] SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_i_valid;
    reg [0:0] SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_r_valid;
    reg [31:0] SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_r_data0;
    wire [0:0] SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_V;
    wire [31:0] SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_D0;
    wire [0:0] SR_SE_i_cmp3_i_16_i98_add142_i_valid;
    reg [0:0] SR_SE_i_cmp3_i_16_i98_add142_r_valid;
    wire [0:0] SR_SE_i_cmp3_i_16_i98_add142_and0;
    reg [31:0] SR_SE_i_cmp3_i_16_i98_add142_r_data0;
    reg [31:0] SR_SE_i_cmp3_i_16_i98_add142_r_data1;
    wire [0:0] SR_SE_i_cmp3_i_16_i98_add142_backStall;
    wire [0:0] SR_SE_i_cmp3_i_16_i98_add142_V;
    wire [31:0] SR_SE_i_cmp3_i_16_i98_add142_D0;
    wire [31:0] SR_SE_i_cmp3_i_16_i98_add142_D1;
    wire [0:0] SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_i_valid;
    reg [0:0] SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_r_valid;
    reg [31:0] SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_r_data0;
    wire [0:0] SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_V;
    wire [31:0] SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_D0;
    wire [0:0] SR_SE_i_unnamed_add148_i_valid;
    reg [0:0] SR_SE_i_unnamed_add148_r_valid;
    wire [0:0] SR_SE_i_unnamed_add148_and0;
    reg [0:0] SR_SE_i_unnamed_add148_r_data0;
    reg [31:0] SR_SE_i_unnamed_add148_r_data1;
    wire [0:0] SR_SE_i_unnamed_add148_backStall;
    wire [0:0] SR_SE_i_unnamed_add148_V;
    wire [0:0] SR_SE_i_unnamed_add148_D0;
    wire [31:0] SR_SE_i_unnamed_add148_D1;
    wire [0:0] SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_i_valid;
    reg [0:0] SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_r_valid;
    reg [31:0] SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_r_data0;
    wire [0:0] SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_backStall;
    wire [0:0] SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_V;
    wire [31:0] SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_D0;
    wire [0:0] SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_i_valid;
    reg [0:0] SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_r_valid;
    reg [31:0] SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_r_data0;
    wire [0:0] SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_V;
    wire [31:0] SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_D0;
    wire [0:0] SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_i_valid;
    reg [0:0] SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_r_valid;
    reg [31:0] SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_r_data0;
    wire [0:0] SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_V;
    wire [31:0] SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_D0;
    wire [0:0] SR_SE_i_cmp3_i_22_i134_add172_i_valid;
    reg [0:0] SR_SE_i_cmp3_i_22_i134_add172_r_valid;
    wire [0:0] SR_SE_i_cmp3_i_22_i134_add172_and0;
    reg [31:0] SR_SE_i_cmp3_i_22_i134_add172_r_data0;
    reg [31:0] SR_SE_i_cmp3_i_22_i134_add172_r_data1;
    wire [0:0] SR_SE_i_cmp3_i_22_i134_add172_backStall;
    wire [0:0] SR_SE_i_cmp3_i_22_i134_add172_V;
    wire [31:0] SR_SE_i_cmp3_i_22_i134_add172_D0;
    wire [31:0] SR_SE_i_cmp3_i_22_i134_add172_D1;
    wire [0:0] SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_i_valid;
    reg [0:0] SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_r_valid;
    reg [31:0] SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_r_data0;
    wire [0:0] SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_V;
    wire [31:0] SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_D0;
    wire [0:0] SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_i_valid;
    reg [0:0] SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_r_valid;
    reg [31:0] SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_r_data0;
    wire [0:0] SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_V;
    wire [31:0] SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_D0;
    wire [0:0] SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_i_valid;
    reg [0:0] SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_r_valid;
    reg [31:0] SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_r_data0;
    wire [0:0] SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_V;
    wire [31:0] SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_D0;
    wire [0:0] SR_SE_i_cmp3_i_26_i158_add192_i_valid;
    reg [0:0] SR_SE_i_cmp3_i_26_i158_add192_r_valid;
    wire [0:0] SR_SE_i_cmp3_i_26_i158_add192_and0;
    reg [31:0] SR_SE_i_cmp3_i_26_i158_add192_r_data0;
    reg [31:0] SR_SE_i_cmp3_i_26_i158_add192_r_data1;
    wire [0:0] SR_SE_i_cmp3_i_26_i158_add192_backStall;
    wire [0:0] SR_SE_i_cmp3_i_26_i158_add192_V;
    wire [31:0] SR_SE_i_cmp3_i_26_i158_add192_D0;
    wire [31:0] SR_SE_i_cmp3_i_26_i158_add192_D1;
    wire [0:0] SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_i_valid;
    reg [0:0] SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_r_valid;
    reg [31:0] SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_r_data0;
    wire [0:0] SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_V;
    wire [31:0] SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_D0;
    wire [0:0] SR_SE_i_unnamed_add198_i_valid;
    reg [0:0] SR_SE_i_unnamed_add198_r_valid;
    wire [0:0] SR_SE_i_unnamed_add198_and0;
    reg [0:0] SR_SE_i_unnamed_add198_r_data0;
    reg [31:0] SR_SE_i_unnamed_add198_r_data1;
    wire [0:0] SR_SE_i_unnamed_add198_backStall;
    wire [0:0] SR_SE_i_unnamed_add198_V;
    wire [0:0] SR_SE_i_unnamed_add198_D0;
    wire [31:0] SR_SE_i_unnamed_add198_D1;
    wire [0:0] SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_i_valid;
    reg [0:0] SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_r_valid;
    reg [31:0] SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_r_data0;
    wire [0:0] SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_backStall;
    wire [0:0] SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_V;
    wire [31:0] SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_D0;
    wire [0:0] SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_i_valid;
    reg [0:0] SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_r_valid;
    reg [31:0] SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_r_data0;
    wire [0:0] SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_V;
    wire [31:0] SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_D0;
    wire [0:0] SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_i_valid;
    reg [0:0] SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_r_valid;
    reg [31:0] SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_r_data0;
    wire [0:0] SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_backStall;
    wire [0:0] SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_V;
    wire [31:0] SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_D0;
    wire [0:0] SR_SE_i_unnamed_add218_i_valid;
    reg [0:0] SR_SE_i_unnamed_add218_r_valid;
    wire [0:0] SR_SE_i_unnamed_add218_and0;
    reg [0:0] SR_SE_i_unnamed_add218_r_data0;
    reg [31:0] SR_SE_i_unnamed_add218_r_data1;
    wire [0:0] SR_SE_i_unnamed_add218_backStall;
    wire [0:0] SR_SE_i_unnamed_add218_V;
    wire [0:0] SR_SE_i_unnamed_add218_D0;
    wire [31:0] SR_SE_i_unnamed_add218_D1;
    wire [0:0] SR_SE_i_unnamed_add261_i_valid;
    reg [0:0] SR_SE_i_unnamed_add261_r_valid;
    wire [0:0] SR_SE_i_unnamed_add261_and0;
    wire [0:0] SR_SE_i_unnamed_add261_and1;
    reg [0:0] SR_SE_i_unnamed_add261_r_data0;
    reg [0:0] SR_SE_i_unnamed_add261_r_data1;
    reg [0:0] SR_SE_i_unnamed_add261_r_data2;
    wire [0:0] SR_SE_i_unnamed_add261_backStall;
    wire [0:0] SR_SE_i_unnamed_add261_V;
    wire [0:0] SR_SE_i_unnamed_add261_D0;
    wire [0:0] SR_SE_i_unnamed_add261_D1;
    wire [0:0] SR_SE_i_unnamed_add261_D2;
    wire [0:0] SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_i_valid;
    reg [0:0] SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_r_valid;
    reg [63:0] SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_r_data0;
    wire [0:0] SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_backStall;
    wire [0:0] SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_V;
    wire [63:0] SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_D0;
    wire [0:0] SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_i_valid;
    reg [0:0] SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_r_valid;
    reg [63:0] SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_r_data0;
    wire [0:0] SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_backStall;
    wire [0:0] SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_V;
    wire [63:0] SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_D0;
    wire [0:0] SR_SE_i_acl_20_add260_i_valid;
    reg [0:0] SR_SE_i_acl_20_add260_r_valid;
    wire [0:0] SR_SE_i_acl_20_add260_and0;
    reg [0:0] SR_SE_i_acl_20_add260_r_data0;
    reg [0:0] SR_SE_i_acl_20_add260_r_data1;
    wire [0:0] SR_SE_i_acl_20_add260_backStall;
    wire [0:0] SR_SE_i_acl_20_add260_V;
    wire [0:0] SR_SE_i_acl_20_add260_D0;
    wire [0:0] SR_SE_i_acl_20_add260_D1;
    wire [0:0] SR_SE_i_masked135_add291_i_valid;
    reg [0:0] SR_SE_i_masked135_add291_r_valid;
    wire [0:0] SR_SE_i_masked135_add291_and0;
    reg [0:0] SR_SE_i_masked135_add291_r_data0;
    reg [0:0] SR_SE_i_masked135_add291_r_data1;
    wire [0:0] SR_SE_i_masked135_add291_backStall;
    wire [0:0] SR_SE_i_masked135_add291_V;
    wire [0:0] SR_SE_i_masked135_add291_D0;
    wire [0:0] SR_SE_i_masked135_add291_D1;
    wire [0:0] SR_SE_i_or133_add290_i_valid;
    reg [0:0] SR_SE_i_or133_add290_r_valid;
    wire [0:0] SR_SE_i_or133_add290_and0;
    reg [0:0] SR_SE_i_or133_add290_r_data0;
    reg [0:0] SR_SE_i_or133_add290_r_data1;
    wire [0:0] SR_SE_i_or133_add290_backStall;
    wire [0:0] SR_SE_i_or133_add290_V;
    wire [0:0] SR_SE_i_or133_add290_D0;
    wire [0:0] SR_SE_i_or133_add290_D1;
    wire [0:0] SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_i_valid;
    reg [0:0] SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_r_valid;
    wire [0:0] SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_and0;
    reg [0:0] SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_r_data0;
    reg [0:0] SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_r_data1;
    wire [0:0] SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_backStall;
    wire [0:0] SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_V;
    wire [0:0] SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_D0;
    wire [0:0] SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_D1;


    // bubble_join_i_sfc_s_c0_in_for_body28_adds_c0_enter1594_add271_aunroll_x(BITJOIN,2843)
    assign bubble_join_i_sfc_s_c0_in_for_body28_adds_c0_enter1594_add271_aunroll_x_q = i_sfc_s_c0_in_for_body28_adds_c0_enter1594_add271_aunroll_x_out_c0_exit163_1_tpl;

    // bubble_select_i_sfc_s_c0_in_for_body28_adds_c0_enter1594_add271_aunroll_x(BITSELECT,2844)
    assign bubble_select_i_sfc_s_c0_in_for_body28_adds_c0_enter1594_add271_aunroll_x_b = $unsigned(bubble_join_i_sfc_s_c0_in_for_body28_adds_c0_enter1594_add271_aunroll_x_q[31:0]);

    // SE_out_i_llvm_fpga_push_i1_memdep_phi17_push9_add274(STALLENABLE,3449)
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_push_i1_memdep_phi17_push9_add274_backStall = $unsigned(1'b0);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_push_i1_memdep_phi17_push9_add274_wireValid = i_llvm_fpga_push_i1_memdep_phi17_push9_add274_out_valid_out;

    // SE_out_i_llvm_fpga_push_i17_cleanups129_push13_add293(STALLENABLE,3443)
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_push_i17_cleanups129_push13_add293_backStall = $unsigned(1'b0);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_push_i17_cleanups129_push13_add293_wireValid = i_llvm_fpga_push_i17_cleanups129_push13_add293_out_valid_out;

    // bubble_join_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo(BITJOIN,3048)
    assign bubble_join_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_q = redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_data_out;

    // bubble_select_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo(BITSELECT,3049)
    assign bubble_select_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_b = $unsigned(bubble_join_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_q[0:0]);

    // redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0(REG,2656)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_q <= $unsigned(1'b0);
        end
        else if (SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_backEN == 1'b1)
        begin
            redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_q <= $unsigned(bubble_select_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_b);
        end
    end

    // SE_stall_entry(STALLENABLE,3555)
    // Valid signal propagation
    assign SE_stall_entry_V0 = SE_stall_entry_wireValid;
    // Backward Stall generation
    assign SE_stall_entry_backStall = add_B8_merge_reg_aunroll_x_out_stall_out | ~ (SE_stall_entry_wireValid);
    // Computing multiple Valid(s)
    assign SE_stall_entry_wireValid = in_valid_in;

    // bubble_join_stall_entry(BITJOIN,3023)
    assign bubble_join_stall_entry_q = {in_inc35149, in_forked95};

    // bubble_select_stall_entry(BITSELECT,3024)
    assign bubble_select_stall_entry_b = $unsigned(bubble_join_stall_entry_q[0:0]);
    assign bubble_select_stall_entry_c = $unsigned(bubble_join_stall_entry_q[32:1]);

    // add_B8_merge_reg_aunroll_x(BLACKBOX,2)@0
    // in in_stall_in@20000000
    // out out_data_out_0_tpl@1
    // out out_data_out_1_tpl@1
    // out out_stall_out@20000000
    // out out_valid_out@1
    add_B8_merge_reg theadd_B8_merge_reg_aunroll_x (
        .in_data_in_0_tpl(bubble_select_stall_entry_b),
        .in_data_in_1_tpl(bubble_select_stall_entry_c),
        .in_stall_in(SE_out_add_B8_merge_reg_aunroll_x_backStall),
        .in_valid_in(SE_stall_entry_V0),
        .out_data_out_0_tpl(add_B8_merge_reg_aunroll_x_out_data_out_0_tpl),
        .out_data_out_1_tpl(add_B8_merge_reg_aunroll_x_out_data_out_1_tpl),
        .out_stall_out(add_B8_merge_reg_aunroll_x_out_stall_out),
        .out_valid_out(add_B8_merge_reg_aunroll_x_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_add_B8_merge_reg_aunroll_x(BITJOIN,2796)
    assign bubble_join_add_B8_merge_reg_aunroll_x_q = {add_B8_merge_reg_aunroll_x_out_data_out_1_tpl, add_B8_merge_reg_aunroll_x_out_data_out_0_tpl};

    // bubble_select_add_B8_merge_reg_aunroll_x(BITSELECT,2797)
    assign bubble_select_add_B8_merge_reg_aunroll_x_b = $unsigned(bubble_join_add_B8_merge_reg_aunroll_x_q[0:0]);
    assign bubble_select_add_B8_merge_reg_aunroll_x_c = $unsigned(bubble_join_add_B8_merge_reg_aunroll_x_q[32:1]);

    // redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo(STALLFIFO,2794)
    assign redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V46;
    assign redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_stall_in = SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_backStall;
    assign redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_data_in = bubble_select_add_B8_merge_reg_aunroll_x_c;
    assign redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_valid_in_bitsignaltemp = redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_valid_in[0];
    assign redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_stall_in_bitsignaltemp = redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_stall_in[0];
    assign redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_valid_out[0] = redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_valid_out_bitsignaltemp;
    assign redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_stall_out[0] = redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(154),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(32),
        .IMPL("ram")
    ) theredist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo (
        .valid_in(redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_valid_in_bitsignaltemp),
        .stall_in(redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_stall_in_bitsignaltemp),
        .data_in(bubble_select_add_B8_merge_reg_aunroll_x_c),
        .valid_out(redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_valid_out_bitsignaltemp),
        .stall_out(redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_stall_out_bitsignaltemp),
        .data_out(redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_i_llvm_fpga_pop_i32_j_0440_pop8_add49(BITJOIN,3011)
    assign bubble_join_i_llvm_fpga_pop_i32_j_0440_pop8_add49_q = i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out;

    // bubble_select_i_llvm_fpga_pop_i32_j_0440_pop8_add49(BITSELECT,3012)
    assign bubble_select_i_llvm_fpga_pop_i32_j_0440_pop8_add49_b = $unsigned(bubble_join_i_llvm_fpga_pop_i32_j_0440_pop8_add49_q[31:0]);

    // redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_0(REG,2600)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_backEN == 1'b1)
        begin
            redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_0_q <= $unsigned(bubble_select_i_llvm_fpga_pop_i32_j_0440_pop8_add49_b);
        end
    end

    // redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1(REG,2601)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_backEN == 1'b1)
        begin
            redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_q <= $unsigned(redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_0_q);
        end
    end

    // redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0(REG,2602)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_backEN == 1'b1)
        begin
            redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_q <= $unsigned(redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_q);
        end
    end

    // redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0(REG,2603)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_backEN == 1'b1)
        begin
            redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_q <= $unsigned(redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_q);
        end
    end

    // redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0(REG,2604)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_backEN == 1'b1)
        begin
            redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_q <= $unsigned(SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_D0);
        end
    end

    // redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1(REG,2605)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_backEN == 1'b1)
        begin
            redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_q <= $unsigned(redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_q);
        end
    end

    // redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0(REG,2606)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_backEN == 1'b1)
        begin
            redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_q <= $unsigned(redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_q);
        end
    end

    // redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0(REG,2607)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_backEN == 1'b1)
        begin
            redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_q <= $unsigned(redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_q);
        end
    end

    // redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1(REG,2608)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_backEN == 1'b1)
        begin
            redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_q <= $unsigned(redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_q);
        end
    end

    // redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0(REG,2609)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_backEN == 1'b1)
        begin
            redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_q <= $unsigned(SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_D0);
        end
    end

    // redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0(REG,2610)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_backEN == 1'b1)
        begin
            redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_q <= $unsigned(redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_q);
        end
    end

    // redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1(REG,2611)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_backEN == 1'b1)
        begin
            redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_q <= $unsigned(redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_q);
        end
    end

    // redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0(REG,2612)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_backEN == 1'b1)
        begin
            redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_q <= $unsigned(redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_q);
        end
    end

    // redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0(REG,2613)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_backEN == 1'b1)
        begin
            redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_q <= $unsigned(redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_q);
        end
    end

    // redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1(REG,2614)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_backEN == 1'b1)
        begin
            redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_q <= $unsigned(SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_D0);
        end
    end

    // redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0(REG,2615)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_backEN == 1'b1)
        begin
            redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_q <= $unsigned(redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_q);
        end
    end

    // redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1(REG,2616)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_backEN == 1'b1)
        begin
            redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_q <= $unsigned(redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_q);
        end
    end

    // redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0(REG,2617)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_backEN == 1'b1)
        begin
            redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_q <= $unsigned(redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_q);
        end
    end

    // redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0(REG,2618)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_backEN == 1'b1)
        begin
            redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_q <= $unsigned(redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_q);
        end
    end

    // redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0(REG,2619)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_backEN == 1'b1)
        begin
            redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_q <= $unsigned(SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_D0);
        end
    end

    // redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1(REG,2620)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_backEN == 1'b1)
        begin
            redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_q <= $unsigned(redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_q);
        end
    end

    // redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0(REG,2621)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_backEN == 1'b1)
        begin
            redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_q <= $unsigned(redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_q);
        end
    end

    // redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0(REG,2622)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_backEN == 1'b1)
        begin
            redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_q <= $unsigned(redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_q);
        end
    end

    // redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1(REG,2623)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_backEN == 1'b1)
        begin
            redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_q <= $unsigned(redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_q);
        end
    end

    // redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0(REG,2624)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_backEN == 1'b1)
        begin
            redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_q <= $unsigned(SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_D0);
        end
    end

    // redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0(REG,2625)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_backEN == 1'b1)
        begin
            redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_q <= $unsigned(redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_q);
        end
    end

    // redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1(REG,2626)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_backEN == 1'b1)
        begin
            redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_q <= $unsigned(redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_q);
        end
    end

    // redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0(REG,2627)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_backEN == 1'b1)
        begin
            redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_q <= $unsigned(redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_q);
        end
    end

    // redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0(REG,2628)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_backEN == 1'b1)
        begin
            redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_q <= $unsigned(redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_q);
        end
    end

    // redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1(REG,2629)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_backEN == 1'b1)
        begin
            redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_q <= $unsigned(SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_D0);
        end
    end

    // redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0(REG,2630)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_backEN == 1'b1)
        begin
            redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_q <= $unsigned(redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_q);
        end
    end

    // redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0(REG,2631)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_backEN == 1'b1)
        begin
            redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_q <= $unsigned(redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_q);
        end
    end

    // redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1(REG,2632)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_backEN == 1'b1)
        begin
            redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_q <= $unsigned(redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_q);
        end
    end

    // redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0(REG,2633)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_backEN == 1'b1)
        begin
            redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_q <= $unsigned(redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_q);
        end
    end

    // redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0(REG,2634)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_backEN == 1'b1)
        begin
            redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_q <= $unsigned(SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_D0);
        end
    end

    // redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1(REG,2635)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_backEN == 1'b1)
        begin
            redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_q <= $unsigned(redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_q);
        end
    end

    // redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0(REG,2636)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_backEN == 1'b1)
        begin
            redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_q <= $unsigned(redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_q);
        end
    end

    // redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0(REG,2637)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_backEN == 1'b1)
        begin
            redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_q <= $unsigned(redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_q);
        end
    end

    // redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1(REG,2638)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_backEN == 1'b1)
        begin
            redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_q <= $unsigned(redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_q);
        end
    end

    // redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0(REG,2639)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_backEN == 1'b1)
        begin
            redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_q <= $unsigned(SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_D0);
        end
    end

    // redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0(REG,2640)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_backEN == 1'b1)
        begin
            redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_q <= $unsigned(redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_q);
        end
    end

    // redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1(REG,2641)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_backEN == 1'b1)
        begin
            redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_q <= $unsigned(redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_q);
        end
    end

    // redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0(REG,2642)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_backEN == 1'b1)
        begin
            redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_q <= $unsigned(redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_q);
        end
    end

    // redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0(REG,2643)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_backEN == 1'b1)
        begin
            redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_q <= $unsigned(redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_q);
        end
    end

    // i_arrayidx17_i104_add0_mult_multconst_x(CONSTANT,62)
    assign i_arrayidx17_i104_add0_mult_multconst_x_q = $unsigned(50'b00000000000000000000000000000000000000000000000000);

    // VCC(CONSTANT,1)
    assign VCC_q = $unsigned(1'b1);

    // lowRangeB_uid1844_i_arrayidx5_i132_add0_mult_x_im9_merged_bit_select(BITSELECT,2364)@50
    assign lowRangeB_uid1844_i_arrayidx5_i132_add0_mult_x_im9_merged_bit_select_b = i_arrayidx5_i132_add0_mult_x_bs10_b[0:0];
    assign lowRangeB_uid1844_i_arrayidx5_i132_add0_mult_x_im9_merged_bit_select_c = i_arrayidx5_i132_add0_mult_x_bs10_b[9:1];

    // redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1(REG,2644)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_backEN == 1'b1)
        begin
            redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_q <= $unsigned(SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_D0);
        end
    end

    // redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0(REG,2645)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_backEN == 1'b1)
        begin
            redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_q <= $unsigned(redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_q);
        end
    end

    // redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0(REG,2646)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_backEN == 1'b1)
        begin
            redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_q <= $unsigned(redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_q);
        end
    end

    // redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1(REG,2647)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_backEN == 1'b1)
        begin
            redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_q <= $unsigned(redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_q);
        end
    end

    // i_idxprom_i129_add59_sel_x(BITSELECT,177)@50
    assign i_idxprom_i129_add59_sel_x_b = {32'b00000000000000000000000000000000, redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_q[31:0]};

    // i_idxprom_i129_add59_vt_select_31(BITSELECT,389)@50
    assign i_idxprom_i129_add59_vt_select_31_b = i_idxprom_i129_add59_sel_x_b[31:0];

    // i_idxprom_i129_add59_vt_join(BITJOIN,388)@50
    assign i_idxprom_i129_add59_vt_join_q = {c_i32_0297_q, i_idxprom_i129_add59_vt_select_31_b};

    // i_arrayidx5_i132_add0_mult_x_bs10(BITSELECT,854)@50
    assign i_arrayidx5_i132_add0_mult_x_bs10_b = i_idxprom_i129_add59_vt_join_q[63:54];

    // lev1_a0sumAHighB_uid1846_i_arrayidx5_i132_add0_mult_x_im9(ADD,1845)@50 + 1
    assign lev1_a0sumAHighB_uid1846_i_arrayidx5_i132_add0_mult_x_im9_a = {1'b0, i_arrayidx5_i132_add0_mult_x_bs10_b};
    assign lev1_a0sumAHighB_uid1846_i_arrayidx5_i132_add0_mult_x_im9_b = {2'b00, lowRangeB_uid1844_i_arrayidx5_i132_add0_mult_x_im9_merged_bit_select_c};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            lev1_a0sumAHighB_uid1846_i_arrayidx5_i132_add0_mult_x_im9_o <= 11'b0;
        end
        else if (SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_backEN == 1'b1)
        begin
            lev1_a0sumAHighB_uid1846_i_arrayidx5_i132_add0_mult_x_im9_o <= $unsigned(lev1_a0sumAHighB_uid1846_i_arrayidx5_i132_add0_mult_x_im9_a) + $unsigned(lev1_a0sumAHighB_uid1846_i_arrayidx5_i132_add0_mult_x_im9_b);
        end
    end
    assign lev1_a0sumAHighB_uid1846_i_arrayidx5_i132_add0_mult_x_im9_q = lev1_a0sumAHighB_uid1846_i_arrayidx5_i132_add0_mult_x_im9_o[10:0];

    // redist16_lowRangeB_uid1844_i_arrayidx5_i132_add0_mult_x_im9_merged_bit_select_b_1_0(REG,2592)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist16_lowRangeB_uid1844_i_arrayidx5_i132_add0_mult_x_im9_merged_bit_select_b_1_0_q <= $unsigned(1'b0);
        end
        else if (SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist16_lowRangeB_uid1844_i_arrayidx5_i132_add0_mult_x_im9_merged_bit_select_b_1_0_q <= $unsigned(lowRangeB_uid1844_i_arrayidx5_i132_add0_mult_x_im9_merged_bit_select_b);
        end
    end

    // lev1_a0_uid1847_i_arrayidx5_i132_add0_mult_x_im9(BITJOIN,1846)@51
    assign lev1_a0_uid1847_i_arrayidx5_i132_add0_mult_x_im9_q = {lev1_a0sumAHighB_uid1846_i_arrayidx5_i132_add0_mult_x_im9_q, redist16_lowRangeB_uid1844_i_arrayidx5_i132_add0_mult_x_im9_merged_bit_select_b_1_0_q};

    // sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0(CONSTANT,955)
    assign sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q = $unsigned(12'b000000000000);

    // sR_mergedSignalTM_uid1852_i_arrayidx5_i132_add0_mult_x_im9(BITJOIN,1851)@51
    assign sR_mergedSignalTM_uid1852_i_arrayidx5_i132_add0_mult_x_im9_q = {lev1_a0_uid1847_i_arrayidx5_i132_add0_mult_x_im9_q, sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q};

    // i_arrayidx5_i132_add0_mult_x_sums_align_3(BITSHIFT,859)@51
    assign i_arrayidx5_i132_add0_mult_x_sums_align_3_qint = { sR_mergedSignalTM_uid1852_i_arrayidx5_i132_add0_mult_x_im9_q, 4'b0000 };
    assign i_arrayidx5_i132_add0_mult_x_sums_align_3_q = i_arrayidx5_i132_add0_mult_x_sums_align_3_qint[27:0];

    // lowRangeB_uid1720_i_arrayidx5_i132_add0_mult_x_im3_merged_bit_select(BITSELECT,2362)@50
    assign lowRangeB_uid1720_i_arrayidx5_i132_add0_mult_x_im3_merged_bit_select_b = i_arrayidx5_i132_add0_mult_x_bs4_b[0:0];
    assign lowRangeB_uid1720_i_arrayidx5_i132_add0_mult_x_im3_merged_bit_select_c = i_arrayidx5_i132_add0_mult_x_bs4_b[17:1];

    // i_arrayidx5_i132_add0_mult_x_bs4(BITSELECT,848)@50
    assign i_arrayidx5_i132_add0_mult_x_bs4_in = i_idxprom_i129_add59_vt_join_q[35:0];
    assign i_arrayidx5_i132_add0_mult_x_bs4_b = i_arrayidx5_i132_add0_mult_x_bs4_in[35:18];

    // lev1_a0sumAHighB_uid1722_i_arrayidx5_i132_add0_mult_x_im3(ADD,1721)@50 + 1
    assign lev1_a0sumAHighB_uid1722_i_arrayidx5_i132_add0_mult_x_im3_a = {1'b0, i_arrayidx5_i132_add0_mult_x_bs4_b};
    assign lev1_a0sumAHighB_uid1722_i_arrayidx5_i132_add0_mult_x_im3_b = {2'b00, lowRangeB_uid1720_i_arrayidx5_i132_add0_mult_x_im3_merged_bit_select_c};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            lev1_a0sumAHighB_uid1722_i_arrayidx5_i132_add0_mult_x_im3_o <= 19'b0;
        end
        else if (SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_backEN == 1'b1)
        begin
            lev1_a0sumAHighB_uid1722_i_arrayidx5_i132_add0_mult_x_im3_o <= $unsigned(lev1_a0sumAHighB_uid1722_i_arrayidx5_i132_add0_mult_x_im3_a) + $unsigned(lev1_a0sumAHighB_uid1722_i_arrayidx5_i132_add0_mult_x_im3_b);
        end
    end
    assign lev1_a0sumAHighB_uid1722_i_arrayidx5_i132_add0_mult_x_im3_q = lev1_a0sumAHighB_uid1722_i_arrayidx5_i132_add0_mult_x_im3_o[18:0];

    // redist18_lowRangeB_uid1720_i_arrayidx5_i132_add0_mult_x_im3_merged_bit_select_b_1_0(REG,2594)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist18_lowRangeB_uid1720_i_arrayidx5_i132_add0_mult_x_im3_merged_bit_select_b_1_0_q <= $unsigned(1'b0);
        end
        else if (SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist18_lowRangeB_uid1720_i_arrayidx5_i132_add0_mult_x_im3_merged_bit_select_b_1_0_q <= $unsigned(lowRangeB_uid1720_i_arrayidx5_i132_add0_mult_x_im3_merged_bit_select_b);
        end
    end

    // lev1_a0_uid1723_i_arrayidx5_i132_add0_mult_x_im3(BITJOIN,1722)@51
    assign lev1_a0_uid1723_i_arrayidx5_i132_add0_mult_x_im3_q = {lev1_a0sumAHighB_uid1722_i_arrayidx5_i132_add0_mult_x_im3_q, redist18_lowRangeB_uid1720_i_arrayidx5_i132_add0_mult_x_im3_merged_bit_select_b_1_0_q};

    // sR_mergedSignalTM_uid1728_i_arrayidx5_i132_add0_mult_x_im3(BITJOIN,1727)@51
    assign sR_mergedSignalTM_uid1728_i_arrayidx5_i132_add0_mult_x_im3_q = {lev1_a0_uid1723_i_arrayidx5_i132_add0_mult_x_im3_q, sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q};

    // i_arrayidx5_i132_add0_mult_x_sums_align_2(BITSHIFT,858)@51
    assign i_arrayidx5_i132_add0_mult_x_sums_align_2_qint = { sR_mergedSignalTM_uid1728_i_arrayidx5_i132_add0_mult_x_im3_q, 18'b000000000000000000 };
    assign i_arrayidx5_i132_add0_mult_x_sums_align_2_q = i_arrayidx5_i132_add0_mult_x_sums_align_2_qint[49:0];

    // i_arrayidx5_i132_add0_mult_x_sums_join_4(BITJOIN,860)@51
    assign i_arrayidx5_i132_add0_mult_x_sums_join_4_q = {i_arrayidx5_i132_add0_mult_x_sums_align_3_q, i_arrayidx5_i132_add0_mult_x_sums_align_2_q};

    // lowRangeB_uid1782_i_arrayidx5_i132_add0_mult_x_im6_merged_bit_select(BITSELECT,2363)@50
    assign lowRangeB_uid1782_i_arrayidx5_i132_add0_mult_x_im6_merged_bit_select_b = i_arrayidx5_i132_add0_mult_x_bs7_b[0:0];
    assign lowRangeB_uid1782_i_arrayidx5_i132_add0_mult_x_im6_merged_bit_select_c = i_arrayidx5_i132_add0_mult_x_bs7_b[17:1];

    // i_arrayidx5_i132_add0_mult_x_bs7(BITSELECT,851)@50
    assign i_arrayidx5_i132_add0_mult_x_bs7_in = i_idxprom_i129_add59_vt_join_q[53:0];
    assign i_arrayidx5_i132_add0_mult_x_bs7_b = i_arrayidx5_i132_add0_mult_x_bs7_in[53:36];

    // lev1_a0sumAHighB_uid1784_i_arrayidx5_i132_add0_mult_x_im6(ADD,1783)@50 + 1
    assign lev1_a0sumAHighB_uid1784_i_arrayidx5_i132_add0_mult_x_im6_a = {1'b0, i_arrayidx5_i132_add0_mult_x_bs7_b};
    assign lev1_a0sumAHighB_uid1784_i_arrayidx5_i132_add0_mult_x_im6_b = {2'b00, lowRangeB_uid1782_i_arrayidx5_i132_add0_mult_x_im6_merged_bit_select_c};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            lev1_a0sumAHighB_uid1784_i_arrayidx5_i132_add0_mult_x_im6_o <= 19'b0;
        end
        else if (SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_backEN == 1'b1)
        begin
            lev1_a0sumAHighB_uid1784_i_arrayidx5_i132_add0_mult_x_im6_o <= $unsigned(lev1_a0sumAHighB_uid1784_i_arrayidx5_i132_add0_mult_x_im6_a) + $unsigned(lev1_a0sumAHighB_uid1784_i_arrayidx5_i132_add0_mult_x_im6_b);
        end
    end
    assign lev1_a0sumAHighB_uid1784_i_arrayidx5_i132_add0_mult_x_im6_q = lev1_a0sumAHighB_uid1784_i_arrayidx5_i132_add0_mult_x_im6_o[18:0];

    // redist17_lowRangeB_uid1782_i_arrayidx5_i132_add0_mult_x_im6_merged_bit_select_b_1_0(REG,2593)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist17_lowRangeB_uid1782_i_arrayidx5_i132_add0_mult_x_im6_merged_bit_select_b_1_0_q <= $unsigned(1'b0);
        end
        else if (SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist17_lowRangeB_uid1782_i_arrayidx5_i132_add0_mult_x_im6_merged_bit_select_b_1_0_q <= $unsigned(lowRangeB_uid1782_i_arrayidx5_i132_add0_mult_x_im6_merged_bit_select_b);
        end
    end

    // lev1_a0_uid1785_i_arrayidx5_i132_add0_mult_x_im6(BITJOIN,1784)@51
    assign lev1_a0_uid1785_i_arrayidx5_i132_add0_mult_x_im6_q = {lev1_a0sumAHighB_uid1784_i_arrayidx5_i132_add0_mult_x_im6_q, redist17_lowRangeB_uid1782_i_arrayidx5_i132_add0_mult_x_im6_merged_bit_select_b_1_0_q};

    // sR_mergedSignalTM_uid1790_i_arrayidx5_i132_add0_mult_x_im6(BITJOIN,1789)@51
    assign sR_mergedSignalTM_uid1790_i_arrayidx5_i132_add0_mult_x_im6_q = {lev1_a0_uid1785_i_arrayidx5_i132_add0_mult_x_im6_q, sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q};

    // i_arrayidx5_i132_add0_mult_x_sums_align_0(BITSHIFT,856)@51
    assign i_arrayidx5_i132_add0_mult_x_sums_align_0_qint = { sR_mergedSignalTM_uid1790_i_arrayidx5_i132_add0_mult_x_im6_q, 4'b0000 };
    assign i_arrayidx5_i132_add0_mult_x_sums_align_0_q = i_arrayidx5_i132_add0_mult_x_sums_align_0_qint[35:0];

    // lowRangeB_uid1658_i_arrayidx5_i132_add0_mult_x_im0_merged_bit_select(BITSELECT,2361)@50
    assign lowRangeB_uid1658_i_arrayidx5_i132_add0_mult_x_im0_merged_bit_select_b = i_arrayidx5_i132_add0_mult_x_bs1_b[0:0];
    assign lowRangeB_uid1658_i_arrayidx5_i132_add0_mult_x_im0_merged_bit_select_c = i_arrayidx5_i132_add0_mult_x_bs1_b[17:1];

    // i_arrayidx5_i132_add0_mult_x_bs1(BITSELECT,845)@50
    assign i_arrayidx5_i132_add0_mult_x_bs1_in = i_idxprom_i129_add59_vt_join_q[17:0];
    assign i_arrayidx5_i132_add0_mult_x_bs1_b = i_arrayidx5_i132_add0_mult_x_bs1_in[17:0];

    // lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0(ADD,1659)@50 + 1
    assign lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_a = {1'b0, i_arrayidx5_i132_add0_mult_x_bs1_b};
    assign lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_b = {2'b00, lowRangeB_uid1658_i_arrayidx5_i132_add0_mult_x_im0_merged_bit_select_c};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_o <= 19'b0;
        end
        else if (SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_backEN == 1'b1)
        begin
            lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_o <= $unsigned(lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_a) + $unsigned(lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_b);
        end
    end
    assign lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_q = lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_o[18:0];

    // redist19_lowRangeB_uid1658_i_arrayidx5_i132_add0_mult_x_im0_merged_bit_select_b_1_0(REG,2595)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist19_lowRangeB_uid1658_i_arrayidx5_i132_add0_mult_x_im0_merged_bit_select_b_1_0_q <= $unsigned(1'b0);
        end
        else if (SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist19_lowRangeB_uid1658_i_arrayidx5_i132_add0_mult_x_im0_merged_bit_select_b_1_0_q <= $unsigned(lowRangeB_uid1658_i_arrayidx5_i132_add0_mult_x_im0_merged_bit_select_b);
        end
    end

    // lev1_a0_uid1661_i_arrayidx5_i132_add0_mult_x_im0(BITJOIN,1660)@51
    assign lev1_a0_uid1661_i_arrayidx5_i132_add0_mult_x_im0_q = {lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_q, redist19_lowRangeB_uid1658_i_arrayidx5_i132_add0_mult_x_im0_merged_bit_select_b_1_0_q};

    // sR_mergedSignalTM_uid1666_i_arrayidx5_i132_add0_mult_x_im0(BITJOIN,1665)@51
    assign sR_mergedSignalTM_uid1666_i_arrayidx5_i132_add0_mult_x_im0_q = {lev1_a0_uid1661_i_arrayidx5_i132_add0_mult_x_im0_q, sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q};

    // i_arrayidx5_i132_add0_mult_x_sums_join_1(BITJOIN,857)@51
    assign i_arrayidx5_i132_add0_mult_x_sums_join_1_q = {i_arrayidx5_i132_add0_mult_x_sums_align_0_q, sR_mergedSignalTM_uid1666_i_arrayidx5_i132_add0_mult_x_im0_q};

    // i_arrayidx5_i132_add0_mult_x_sums_result_add_0_0(ADD,861)@51
    assign i_arrayidx5_i132_add0_mult_x_sums_result_add_0_0_a = {11'b00000000000, i_arrayidx5_i132_add0_mult_x_sums_join_1_q};
    assign i_arrayidx5_i132_add0_mult_x_sums_result_add_0_0_b = {1'b0, i_arrayidx5_i132_add0_mult_x_sums_join_4_q};
    assign i_arrayidx5_i132_add0_mult_x_sums_result_add_0_0_o = $unsigned(i_arrayidx5_i132_add0_mult_x_sums_result_add_0_0_a) + $unsigned(i_arrayidx5_i132_add0_mult_x_sums_result_add_0_0_b);
    assign i_arrayidx5_i132_add0_mult_x_sums_result_add_0_0_q = i_arrayidx5_i132_add0_mult_x_sums_result_add_0_0_o[78:0];

    // i_arrayidx5_i132_add0_mult_extender_x(BITJOIN,121)@51
    assign i_arrayidx5_i132_add0_mult_extender_x_q = {i_arrayidx17_i104_add0_mult_multconst_x_q, i_arrayidx5_i132_add0_mult_x_sums_result_add_0_0_q[77:0]};

    // i_arrayidx5_i132_add0_trunc_sel_x(BITSELECT,123)@51
    assign i_arrayidx5_i132_add0_trunc_sel_x_b = i_arrayidx5_i132_add0_mult_extender_x_q[63:0];

    // i_arrayidx5_i_add0_mult_x_sums_align_3(BITSHIFT,895)@51
    assign i_arrayidx5_i_add0_mult_x_sums_align_3_qint = { sR_mergedSignalTM_uid1852_i_arrayidx5_i132_add0_mult_x_im9_q, 4'b0000 };
    assign i_arrayidx5_i_add0_mult_x_sums_align_3_q = i_arrayidx5_i_add0_mult_x_sums_align_3_qint[27:0];

    // i_arrayidx5_i_add0_mult_x_sums_align_2(BITSHIFT,894)@51
    assign i_arrayidx5_i_add0_mult_x_sums_align_2_qint = { sR_mergedSignalTM_uid1728_i_arrayidx5_i132_add0_mult_x_im3_q, 18'b000000000000000000 };
    assign i_arrayidx5_i_add0_mult_x_sums_align_2_q = i_arrayidx5_i_add0_mult_x_sums_align_2_qint[49:0];

    // i_arrayidx5_i_add0_mult_x_sums_join_4(BITJOIN,896)@51
    assign i_arrayidx5_i_add0_mult_x_sums_join_4_q = {i_arrayidx5_i_add0_mult_x_sums_align_3_q, i_arrayidx5_i_add0_mult_x_sums_align_2_q};

    // i_arrayidx5_i_add0_mult_x_sums_align_0(BITSHIFT,892)@51
    assign i_arrayidx5_i_add0_mult_x_sums_align_0_qint = { sR_mergedSignalTM_uid1790_i_arrayidx5_i132_add0_mult_x_im6_q, 4'b0000 };
    assign i_arrayidx5_i_add0_mult_x_sums_align_0_q = i_arrayidx5_i_add0_mult_x_sums_align_0_qint[35:0];

    // i_arrayidx5_i_add0_mult_x_sums_join_1(BITJOIN,893)@51
    assign i_arrayidx5_i_add0_mult_x_sums_join_1_q = {i_arrayidx5_i_add0_mult_x_sums_align_0_q, sR_mergedSignalTM_uid1666_i_arrayidx5_i132_add0_mult_x_im0_q};

    // i_arrayidx5_i_add0_mult_x_sums_result_add_0_0(ADD,897)@51
    assign i_arrayidx5_i_add0_mult_x_sums_result_add_0_0_a = {11'b00000000000, i_arrayidx5_i_add0_mult_x_sums_join_1_q};
    assign i_arrayidx5_i_add0_mult_x_sums_result_add_0_0_b = {1'b0, i_arrayidx5_i_add0_mult_x_sums_join_4_q};
    assign i_arrayidx5_i_add0_mult_x_sums_result_add_0_0_o = $unsigned(i_arrayidx5_i_add0_mult_x_sums_result_add_0_0_a) + $unsigned(i_arrayidx5_i_add0_mult_x_sums_result_add_0_0_b);
    assign i_arrayidx5_i_add0_mult_x_sums_result_add_0_0_q = i_arrayidx5_i_add0_mult_x_sums_result_add_0_0_o[78:0];

    // i_arrayidx5_i_add0_mult_extender_x(BITJOIN,161)@51
    assign i_arrayidx5_i_add0_mult_extender_x_q = {i_arrayidx17_i104_add0_mult_multconst_x_q, i_arrayidx5_i_add0_mult_x_sums_result_add_0_0_q[77:0]};

    // i_arrayidx5_i_add0_trunc_sel_x(BITSELECT,163)@51
    assign i_arrayidx5_i_add0_trunc_sel_x_b = i_arrayidx5_i_add0_mult_extender_x_q[63:0];

    // i_arrayidx17_i159_add0_narrow_x(BITSELECT,89)@50
    assign i_arrayidx17_i159_add0_narrow_x_b = i_idxprom_i129_add59_vt_join_q[61:0];

    // redist176_i_arrayidx17_i159_add0_narrow_x_b_3_0(REG,2770)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist176_i_arrayidx17_i159_add0_narrow_x_b_3_0_q <= $unsigned(62'b00000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist176_i_arrayidx17_i159_add0_narrow_x_b_3_0_q <= $unsigned(i_arrayidx17_i159_add0_narrow_x_b);
        end
    end

    // redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_0(REG,2648)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_0_q <= $unsigned(redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_q);
        end
    end

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_6(STALLENABLE,3962)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_6_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_6_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_6_backStall = i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_6_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_6_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_6_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5(BLACKBOX,429)@52
    // in in_stall_in@20000000
    // out out_dest_data_out_36_0@53
    // out out_stall_out@20000000
    // out out_valid_out@53
    add_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_0 thei_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5 (
        .in_intel_reserved_ffwd_36_0(in_intel_reserved_ffwd_36_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_6_V0),
        .out_dest_data_out_36_0(i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_out_dest_data_out_36_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5(STALLENABLE,3383)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_V0 = SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_backStall = SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_and0 = i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_out_valid_out;
    assign SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_wireValid = SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_V0 & SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_and0;

    // SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0(STALLENABLE,3911)
    // Valid signal propagation
    assign SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_V0 = SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0 = SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_backStall & SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_backEN = ~ (SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0 = SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_backEN & SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_V0;
    // Backward Stall generation
    assign SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_backStall = ~ (SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_backEN == 1'b0)
            begin
                SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 <= SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 & SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0;
            end
            else
            begin
                SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 <= SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0;
            end

        end
    end

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_5(STALLENABLE,3960)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_5_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_5_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_5_backStall = i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_5_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_5_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_5_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4(BLACKBOX,435)@51
    // in in_stall_in@20000000
    // out out_dest_data_out_0_0@52
    // out out_stall_out@20000000
    // out out_valid_out@52
    add_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_0 thei_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4 (
        .in_intel_reserved_ffwd_0_0(in_intel_reserved_ffwd_0_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_5_V0),
        .out_dest_data_out_0_0(i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_out_dest_data_out_0_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4(STALLENABLE,3395)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_V0 = SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_backStall = SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_and0 = i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_out_valid_out;
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_wireValid = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_V2 & SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_and0;

    // i_arrayidx17_i104_add0_c_i64_123_x(CONSTANT,67)
    assign i_arrayidx17_i104_add0_c_i64_123_x_q = $unsigned(64'b0000000000000000000000000000000000000000000000000000000000001100);

    // bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32(BITJOIN,2925)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_q = i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_out_dest_data_out_36_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32(BITSELECT,2926)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_q[63:0]);

    // i_arrayidx5_i_add0_narrow_x(BITSELECT,169)@53
    assign i_arrayidx5_i_add0_narrow_x_b = bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_b[61:0];

    // i_arrayidx17_i104_add0_c_i2_02_x(CONSTANT,65)
    assign i_arrayidx17_i104_add0_c_i2_02_x_q = $unsigned(2'b00);

    // i_arrayidx5_i_add0_shift_join_x(BITJOIN,170)@53
    assign i_arrayidx5_i_add0_shift_join_x_q = {i_arrayidx5_i_add0_narrow_x_b, i_arrayidx17_i104_add0_c_i2_02_x_q};

    // redist164_i_arrayidx5_i_add0_trunc_sel_x_b_1_0(REG,2758)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist164_i_arrayidx5_i_add0_trunc_sel_x_b_1_0_q <= $unsigned(64'b0000000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_backEN == 1'b1)
        begin
            redist164_i_arrayidx5_i_add0_trunc_sel_x_b_1_0_q <= $unsigned(SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_D2);
        end
    end

    // bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31(BITJOIN,2961)
    assign bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_q = i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_out_dest_data_out_2_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31(BITSELECT,2962)
    assign bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_q[63:0]);

    // i_arrayidx5_i_add0_add_x(ADD,164)@52
    assign i_arrayidx5_i_add0_add_x_a = {1'b0, bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_b};
    assign i_arrayidx5_i_add0_add_x_b = {1'b0, redist164_i_arrayidx5_i_add0_trunc_sel_x_b_1_0_q};
    assign i_arrayidx5_i_add0_add_x_o = $unsigned(i_arrayidx5_i_add0_add_x_a) + $unsigned(i_arrayidx5_i_add0_add_x_b);
    assign i_arrayidx5_i_add0_add_x_q = i_arrayidx5_i_add0_add_x_o[64:0];

    // i_arrayidx5_i_add0_dupName_0_trunc_sel_x(BITSELECT,152)@52
    assign i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b = i_arrayidx5_i_add0_add_x_q[63:0];

    // redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0(REG,2760)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_q <= $unsigned(64'b0000000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_backEN == 1'b1)
        begin
            redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_q <= $unsigned(i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b);
        end
    end

    // i_arrayidx5_i_add0_dupName_0_add_x(ADD,156)@53
    assign i_arrayidx5_i_add0_dupName_0_add_x_a = {1'b0, redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_q};
    assign i_arrayidx5_i_add0_dupName_0_add_x_b = {1'b0, i_arrayidx5_i_add0_shift_join_x_q};
    assign i_arrayidx5_i_add0_dupName_0_add_x_o = $unsigned(i_arrayidx5_i_add0_dupName_0_add_x_a) + $unsigned(i_arrayidx5_i_add0_dupName_0_add_x_b);
    assign i_arrayidx5_i_add0_dupName_0_add_x_q = i_arrayidx5_i_add0_dupName_0_add_x_o[64:0];

    // i_arrayidx5_i_add0_dupName_2_trunc_sel_x(BITSELECT,153)@53
    assign i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b = i_arrayidx5_i_add0_dupName_0_add_x_q[63:0];

    // redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0(REG,2759)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_q <= $unsigned(64'b0000000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_backEN == 1'b1)
        begin
            redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_q <= $unsigned(i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b);
        end
    end

    // i_arrayidx5_i_add0_dupName_1_add_x(ADD,158)@54
    assign i_arrayidx5_i_add0_dupName_1_add_x_a = {1'b0, redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_q};
    assign i_arrayidx5_i_add0_dupName_1_add_x_b = {1'b0, i_arrayidx17_i104_add0_c_i64_123_x_q};
    assign i_arrayidx5_i_add0_dupName_1_add_x_o = $unsigned(i_arrayidx5_i_add0_dupName_1_add_x_a) + $unsigned(i_arrayidx5_i_add0_dupName_1_add_x_b);
    assign i_arrayidx5_i_add0_dupName_1_add_x_q = i_arrayidx5_i_add0_dupName_1_add_x_o[64:0];

    // i_arrayidx5_i_add0_dupName_3_trunc_sel_x(BITSELECT,154)@54
    assign i_arrayidx5_i_add0_dupName_3_trunc_sel_x_b = i_arrayidx5_i_add0_dupName_1_add_x_q[63:0];

    // redist176_i_arrayidx17_i159_add0_narrow_x_b_3_1(REG,2771)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist176_i_arrayidx17_i159_add0_narrow_x_b_3_1_q <= $unsigned(62'b00000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_backEN == 1'b1)
        begin
            redist176_i_arrayidx17_i159_add0_narrow_x_b_3_1_q <= $unsigned(SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_D1);
        end
    end

    // redist176_i_arrayidx17_i159_add0_narrow_x_b_3_2(REG,2772)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist176_i_arrayidx17_i159_add0_narrow_x_b_3_2_q <= $unsigned(62'b00000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_backEN == 1'b1)
        begin
            redist176_i_arrayidx17_i159_add0_narrow_x_b_3_2_q <= $unsigned(redist176_i_arrayidx17_i159_add0_narrow_x_b_3_1_q);
        end
    end

    // i_arrayidx17_i159_add0_shift_join_x(BITJOIN,90)@53
    assign i_arrayidx17_i159_add0_shift_join_x_q = {redist176_i_arrayidx17_i159_add0_narrow_x_b_3_2_q, i_arrayidx17_i104_add0_c_i2_02_x_q};

    // SE_i_arrayidx17_i_add0_dupName_0_add_x(STALLENABLE,3153)
    // Valid signal propagation
    assign SE_i_arrayidx17_i_add0_dupName_0_add_x_V0 = SE_i_arrayidx17_i_add0_dupName_0_add_x_wireValid;
    // Backward Stall generation
    assign SE_i_arrayidx17_i_add0_dupName_0_add_x_backStall = SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_backStall | ~ (SE_i_arrayidx17_i_add0_dupName_0_add_x_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_arrayidx17_i_add0_dupName_0_add_x_and0 = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_V4;
    assign SE_i_arrayidx17_i_add0_dupName_0_add_x_wireValid = SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_V0 & SE_i_arrayidx17_i_add0_dupName_0_add_x_and0;

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_36(STALLENABLE,4022)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_36_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_36_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_36_backStall = i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_36_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_36_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_36_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35(BLACKBOX,426)@49
    // in in_stall_in@20000000
    // out out_dest_data_out_36_0@50
    // out out_stall_out@20000000
    // out out_valid_out@50
    add_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_0 thei_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35 (
        .in_intel_reserved_ffwd_36_0(in_intel_reserved_ffwd_36_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_36_V0),
        .out_dest_data_out_36_0(i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_out_dest_data_out_36_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35(STALLENABLE,3377)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_V0 = SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_backStall = SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_wireValid = i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_out_valid_out;

    // SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0(STALLENABLE,3646)
    // Valid signal propagation
    assign SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_V0 = SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_R_v_0;
    // Stall signal propagation
    assign SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_s_tv_0 = SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_backStall & SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_R_v_0;
    // Backward Enable generation
    assign SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_backEN = ~ (SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_v_s_0 = SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_backEN & SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_V0;
    // Backward Stall generation
    assign SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_backStall = ~ (SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_backEN == 1'b0)
            begin
                SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_R_v_0 <= SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_R_v_0 & SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_s_tv_0;
            end
            else
            begin
                SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_R_v_0 <= SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_v_s_0;
            end

        end
    end

    // SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0(STALLENABLE,3912)
    // Valid signal propagation
    assign SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_V0 = SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_s_tv_0 = SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_backStall & SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_backEN = ~ (SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_v_s_0 = SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_backEN & SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_V0;
    // Backward Stall generation
    assign SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_backStall = ~ (SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_backEN == 1'b0)
            begin
                SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_R_v_0 <= SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_R_v_0 & SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_s_tv_0;
            end
            else
            begin
                SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_R_v_0 <= SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_v_s_0;
            end

        end
    end

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_35(STALLENABLE,4020)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_35_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_35_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_35_backStall = i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_35_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_35_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_35_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34(BLACKBOX,438)@51
    // in in_stall_in@20000000
    // out out_dest_data_out_2_0@52
    // out out_stall_out@20000000
    // out out_valid_out@52
    add_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_0 thei_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34 (
        .in_intel_reserved_ffwd_2_0(in_intel_reserved_ffwd_2_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_35_V0),
        .out_dest_data_out_2_0(i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_out_dest_data_out_2_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34(STALLENABLE,3401)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_V0 = SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_backStall = SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_and0 = i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_out_valid_out;
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_wireValid = SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_V0 & SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_and0;

    // SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0(STALLENABLE,3914)
    // Valid signal propagation
    assign SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_V0 = SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0 = SE_i_arrayidx17_i_add0_dupName_0_add_x_backStall & SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_backEN = ~ (SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0 = SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_backEN & SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_V0;
    // Backward Stall generation
    assign SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_backStall = ~ (SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_backEN == 1'b0)
            begin
                SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 <= SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 & SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0;
            end
            else
            begin
                SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 <= SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0;
            end

        end
    end

    // lowRangeB_uid1608_i_arrayidx17_i_add0_mult_x_im9_merged_bit_select(BITSELECT,2376)@50
    assign lowRangeB_uid1608_i_arrayidx17_i_add0_mult_x_im9_merged_bit_select_b = i_arrayidx17_i_add0_mult_x_bs1_merged_bit_select_e[0:0];
    assign lowRangeB_uid1608_i_arrayidx17_i_add0_mult_x_im9_merged_bit_select_c = i_arrayidx17_i_add0_mult_x_bs1_merged_bit_select_e[9:1];

    // bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35(BITJOIN,2922)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_q = i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_out_dest_data_out_36_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35(BITSELECT,2923)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_q[63:0]);

    // i_arrayidx17_i_add0_mult_x_bs1_merged_bit_select(BITSELECT,2359)@50
    assign i_arrayidx17_i_add0_mult_x_bs1_merged_bit_select_b = bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_b[17:0];
    assign i_arrayidx17_i_add0_mult_x_bs1_merged_bit_select_c = bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_b[35:18];
    assign i_arrayidx17_i_add0_mult_x_bs1_merged_bit_select_d = bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_b[53:36];
    assign i_arrayidx17_i_add0_mult_x_bs1_merged_bit_select_e = bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156101_add35_b[63:54];

    // lev1_a0sumAHighB_uid1610_i_arrayidx17_i_add0_mult_x_im9(ADD,1609)@50 + 1
    assign lev1_a0sumAHighB_uid1610_i_arrayidx17_i_add0_mult_x_im9_a = {1'b0, i_arrayidx17_i_add0_mult_x_bs1_merged_bit_select_e};
    assign lev1_a0sumAHighB_uid1610_i_arrayidx17_i_add0_mult_x_im9_b = {2'b00, lowRangeB_uid1608_i_arrayidx17_i_add0_mult_x_im9_merged_bit_select_c};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            lev1_a0sumAHighB_uid1610_i_arrayidx17_i_add0_mult_x_im9_o <= 11'b0;
        end
        else if (SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_backEN == 1'b1)
        begin
            lev1_a0sumAHighB_uid1610_i_arrayidx17_i_add0_mult_x_im9_o <= $unsigned(lev1_a0sumAHighB_uid1610_i_arrayidx17_i_add0_mult_x_im9_a) + $unsigned(lev1_a0sumAHighB_uid1610_i_arrayidx17_i_add0_mult_x_im9_b);
        end
    end
    assign lev1_a0sumAHighB_uid1610_i_arrayidx17_i_add0_mult_x_im9_q = lev1_a0sumAHighB_uid1610_i_arrayidx17_i_add0_mult_x_im9_o[10:0];

    // redist4_lowRangeB_uid1608_i_arrayidx17_i_add0_mult_x_im9_merged_bit_select_b_1_0(REG,2580)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist4_lowRangeB_uid1608_i_arrayidx17_i_add0_mult_x_im9_merged_bit_select_b_1_0_q <= $unsigned(1'b0);
        end
        else if (SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist4_lowRangeB_uid1608_i_arrayidx17_i_add0_mult_x_im9_merged_bit_select_b_1_0_q <= $unsigned(lowRangeB_uid1608_i_arrayidx17_i_add0_mult_x_im9_merged_bit_select_b);
        end
    end

    // lev1_a0_uid1611_i_arrayidx17_i_add0_mult_x_im9(BITJOIN,1610)@51
    assign lev1_a0_uid1611_i_arrayidx17_i_add0_mult_x_im9_q = {lev1_a0sumAHighB_uid1610_i_arrayidx17_i_add0_mult_x_im9_q, redist4_lowRangeB_uid1608_i_arrayidx17_i_add0_mult_x_im9_merged_bit_select_b_1_0_q};

    // sR_mergedSignalTM_uid1616_i_arrayidx17_i_add0_mult_x_im9(BITJOIN,1615)@51
    assign sR_mergedSignalTM_uid1616_i_arrayidx17_i_add0_mult_x_im9_q = {lev1_a0_uid1611_i_arrayidx17_i_add0_mult_x_im9_q, sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q};

    // i_arrayidx17_i_add0_mult_x_sums_align_3(BITSHIFT,841)@51
    assign i_arrayidx17_i_add0_mult_x_sums_align_3_qint = { sR_mergedSignalTM_uid1616_i_arrayidx17_i_add0_mult_x_im9_q, 4'b0000 };
    assign i_arrayidx17_i_add0_mult_x_sums_align_3_q = i_arrayidx17_i_add0_mult_x_sums_align_3_qint[27:0];

    // lowRangeB_uid1484_i_arrayidx17_i_add0_mult_x_im3_merged_bit_select(BITSELECT,2374)@50
    assign lowRangeB_uid1484_i_arrayidx17_i_add0_mult_x_im3_merged_bit_select_b = i_arrayidx17_i_add0_mult_x_bs1_merged_bit_select_c[0:0];
    assign lowRangeB_uid1484_i_arrayidx17_i_add0_mult_x_im3_merged_bit_select_c = i_arrayidx17_i_add0_mult_x_bs1_merged_bit_select_c[17:1];

    // lev1_a0sumAHighB_uid1486_i_arrayidx17_i_add0_mult_x_im3(ADD,1485)@50 + 1
    assign lev1_a0sumAHighB_uid1486_i_arrayidx17_i_add0_mult_x_im3_a = {1'b0, i_arrayidx17_i_add0_mult_x_bs1_merged_bit_select_c};
    assign lev1_a0sumAHighB_uid1486_i_arrayidx17_i_add0_mult_x_im3_b = {2'b00, lowRangeB_uid1484_i_arrayidx17_i_add0_mult_x_im3_merged_bit_select_c};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            lev1_a0sumAHighB_uid1486_i_arrayidx17_i_add0_mult_x_im3_o <= 19'b0;
        end
        else if (SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_backEN == 1'b1)
        begin
            lev1_a0sumAHighB_uid1486_i_arrayidx17_i_add0_mult_x_im3_o <= $unsigned(lev1_a0sumAHighB_uid1486_i_arrayidx17_i_add0_mult_x_im3_a) + $unsigned(lev1_a0sumAHighB_uid1486_i_arrayidx17_i_add0_mult_x_im3_b);
        end
    end
    assign lev1_a0sumAHighB_uid1486_i_arrayidx17_i_add0_mult_x_im3_q = lev1_a0sumAHighB_uid1486_i_arrayidx17_i_add0_mult_x_im3_o[18:0];

    // redist6_lowRangeB_uid1484_i_arrayidx17_i_add0_mult_x_im3_merged_bit_select_b_1_0(REG,2582)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist6_lowRangeB_uid1484_i_arrayidx17_i_add0_mult_x_im3_merged_bit_select_b_1_0_q <= $unsigned(1'b0);
        end
        else if (SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist6_lowRangeB_uid1484_i_arrayidx17_i_add0_mult_x_im3_merged_bit_select_b_1_0_q <= $unsigned(lowRangeB_uid1484_i_arrayidx17_i_add0_mult_x_im3_merged_bit_select_b);
        end
    end

    // lev1_a0_uid1487_i_arrayidx17_i_add0_mult_x_im3(BITJOIN,1486)@51
    assign lev1_a0_uid1487_i_arrayidx17_i_add0_mult_x_im3_q = {lev1_a0sumAHighB_uid1486_i_arrayidx17_i_add0_mult_x_im3_q, redist6_lowRangeB_uid1484_i_arrayidx17_i_add0_mult_x_im3_merged_bit_select_b_1_0_q};

    // sR_mergedSignalTM_uid1492_i_arrayidx17_i_add0_mult_x_im3(BITJOIN,1491)@51
    assign sR_mergedSignalTM_uid1492_i_arrayidx17_i_add0_mult_x_im3_q = {lev1_a0_uid1487_i_arrayidx17_i_add0_mult_x_im3_q, sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q};

    // i_arrayidx17_i_add0_mult_x_sums_align_2(BITSHIFT,840)@51
    assign i_arrayidx17_i_add0_mult_x_sums_align_2_qint = { sR_mergedSignalTM_uid1492_i_arrayidx17_i_add0_mult_x_im3_q, 18'b000000000000000000 };
    assign i_arrayidx17_i_add0_mult_x_sums_align_2_q = i_arrayidx17_i_add0_mult_x_sums_align_2_qint[49:0];

    // i_arrayidx17_i_add0_mult_x_sums_join_4(BITJOIN,842)@51
    assign i_arrayidx17_i_add0_mult_x_sums_join_4_q = {i_arrayidx17_i_add0_mult_x_sums_align_3_q, i_arrayidx17_i_add0_mult_x_sums_align_2_q};

    // lowRangeB_uid1546_i_arrayidx17_i_add0_mult_x_im6_merged_bit_select(BITSELECT,2375)@50
    assign lowRangeB_uid1546_i_arrayidx17_i_add0_mult_x_im6_merged_bit_select_b = i_arrayidx17_i_add0_mult_x_bs1_merged_bit_select_d[0:0];
    assign lowRangeB_uid1546_i_arrayidx17_i_add0_mult_x_im6_merged_bit_select_c = i_arrayidx17_i_add0_mult_x_bs1_merged_bit_select_d[17:1];

    // lev1_a0sumAHighB_uid1548_i_arrayidx17_i_add0_mult_x_im6(ADD,1547)@50 + 1
    assign lev1_a0sumAHighB_uid1548_i_arrayidx17_i_add0_mult_x_im6_a = {1'b0, i_arrayidx17_i_add0_mult_x_bs1_merged_bit_select_d};
    assign lev1_a0sumAHighB_uid1548_i_arrayidx17_i_add0_mult_x_im6_b = {2'b00, lowRangeB_uid1546_i_arrayidx17_i_add0_mult_x_im6_merged_bit_select_c};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            lev1_a0sumAHighB_uid1548_i_arrayidx17_i_add0_mult_x_im6_o <= 19'b0;
        end
        else if (SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_backEN == 1'b1)
        begin
            lev1_a0sumAHighB_uid1548_i_arrayidx17_i_add0_mult_x_im6_o <= $unsigned(lev1_a0sumAHighB_uid1548_i_arrayidx17_i_add0_mult_x_im6_a) + $unsigned(lev1_a0sumAHighB_uid1548_i_arrayidx17_i_add0_mult_x_im6_b);
        end
    end
    assign lev1_a0sumAHighB_uid1548_i_arrayidx17_i_add0_mult_x_im6_q = lev1_a0sumAHighB_uid1548_i_arrayidx17_i_add0_mult_x_im6_o[18:0];

    // redist5_lowRangeB_uid1546_i_arrayidx17_i_add0_mult_x_im6_merged_bit_select_b_1_0(REG,2581)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist5_lowRangeB_uid1546_i_arrayidx17_i_add0_mult_x_im6_merged_bit_select_b_1_0_q <= $unsigned(1'b0);
        end
        else if (SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist5_lowRangeB_uid1546_i_arrayidx17_i_add0_mult_x_im6_merged_bit_select_b_1_0_q <= $unsigned(lowRangeB_uid1546_i_arrayidx17_i_add0_mult_x_im6_merged_bit_select_b);
        end
    end

    // lev1_a0_uid1549_i_arrayidx17_i_add0_mult_x_im6(BITJOIN,1548)@51
    assign lev1_a0_uid1549_i_arrayidx17_i_add0_mult_x_im6_q = {lev1_a0sumAHighB_uid1548_i_arrayidx17_i_add0_mult_x_im6_q, redist5_lowRangeB_uid1546_i_arrayidx17_i_add0_mult_x_im6_merged_bit_select_b_1_0_q};

    // sR_mergedSignalTM_uid1554_i_arrayidx17_i_add0_mult_x_im6(BITJOIN,1553)@51
    assign sR_mergedSignalTM_uid1554_i_arrayidx17_i_add0_mult_x_im6_q = {lev1_a0_uid1549_i_arrayidx17_i_add0_mult_x_im6_q, sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q};

    // i_arrayidx17_i_add0_mult_x_sums_align_0(BITSHIFT,838)@51
    assign i_arrayidx17_i_add0_mult_x_sums_align_0_qint = { sR_mergedSignalTM_uid1554_i_arrayidx17_i_add0_mult_x_im6_q, 4'b0000 };
    assign i_arrayidx17_i_add0_mult_x_sums_align_0_q = i_arrayidx17_i_add0_mult_x_sums_align_0_qint[35:0];

    // lowRangeB_uid1422_i_arrayidx17_i_add0_mult_x_im0_merged_bit_select(BITSELECT,2373)@50
    assign lowRangeB_uid1422_i_arrayidx17_i_add0_mult_x_im0_merged_bit_select_b = i_arrayidx17_i_add0_mult_x_bs1_merged_bit_select_b[0:0];
    assign lowRangeB_uid1422_i_arrayidx17_i_add0_mult_x_im0_merged_bit_select_c = i_arrayidx17_i_add0_mult_x_bs1_merged_bit_select_b[17:1];

    // lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0(ADD,1423)@50 + 1
    assign lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_a = {1'b0, i_arrayidx17_i_add0_mult_x_bs1_merged_bit_select_b};
    assign lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_b = {2'b00, lowRangeB_uid1422_i_arrayidx17_i_add0_mult_x_im0_merged_bit_select_c};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_o <= 19'b0;
        end
        else if (SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_backEN == 1'b1)
        begin
            lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_o <= $unsigned(lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_a) + $unsigned(lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_b);
        end
    end
    assign lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_q = lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_o[18:0];

    // redist7_lowRangeB_uid1422_i_arrayidx17_i_add0_mult_x_im0_merged_bit_select_b_1_0(REG,2583)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist7_lowRangeB_uid1422_i_arrayidx17_i_add0_mult_x_im0_merged_bit_select_b_1_0_q <= $unsigned(1'b0);
        end
        else if (SE_lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist7_lowRangeB_uid1422_i_arrayidx17_i_add0_mult_x_im0_merged_bit_select_b_1_0_q <= $unsigned(lowRangeB_uid1422_i_arrayidx17_i_add0_mult_x_im0_merged_bit_select_b);
        end
    end

    // lev1_a0_uid1425_i_arrayidx17_i_add0_mult_x_im0(BITJOIN,1424)@51
    assign lev1_a0_uid1425_i_arrayidx17_i_add0_mult_x_im0_q = {lev1_a0sumAHighB_uid1424_i_arrayidx17_i_add0_mult_x_im0_q, redist7_lowRangeB_uid1422_i_arrayidx17_i_add0_mult_x_im0_merged_bit_select_b_1_0_q};

    // sR_mergedSignalTM_uid1430_i_arrayidx17_i_add0_mult_x_im0(BITJOIN,1429)@51
    assign sR_mergedSignalTM_uid1430_i_arrayidx17_i_add0_mult_x_im0_q = {lev1_a0_uid1425_i_arrayidx17_i_add0_mult_x_im0_q, sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q};

    // i_arrayidx17_i_add0_mult_x_sums_join_1(BITJOIN,839)@51
    assign i_arrayidx17_i_add0_mult_x_sums_join_1_q = {i_arrayidx17_i_add0_mult_x_sums_align_0_q, sR_mergedSignalTM_uid1430_i_arrayidx17_i_add0_mult_x_im0_q};

    // i_arrayidx17_i_add0_mult_x_sums_result_add_0_0(ADD,843)@51
    assign i_arrayidx17_i_add0_mult_x_sums_result_add_0_0_a = {11'b00000000000, i_arrayidx17_i_add0_mult_x_sums_join_1_q};
    assign i_arrayidx17_i_add0_mult_x_sums_result_add_0_0_b = {1'b0, i_arrayidx17_i_add0_mult_x_sums_join_4_q};
    assign i_arrayidx17_i_add0_mult_x_sums_result_add_0_0_o = $unsigned(i_arrayidx17_i_add0_mult_x_sums_result_add_0_0_a) + $unsigned(i_arrayidx17_i_add0_mult_x_sums_result_add_0_0_b);
    assign i_arrayidx17_i_add0_mult_x_sums_result_add_0_0_q = i_arrayidx17_i_add0_mult_x_sums_result_add_0_0_o[78:0];

    // i_arrayidx17_i_add0_mult_extender_x(BITJOIN,101)@51
    assign i_arrayidx17_i_add0_mult_extender_x_q = {i_arrayidx17_i104_add0_mult_multconst_x_q, i_arrayidx17_i_add0_mult_x_sums_result_add_0_0_q[77:0]};

    // i_arrayidx17_i_add0_trunc_sel_x(BITSELECT,103)@51
    assign i_arrayidx17_i_add0_trunc_sel_x_b = i_arrayidx17_i_add0_mult_extender_x_q[63:0];

    // redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0(REG,2767)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_q <= $unsigned(64'b0000000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_backEN == 1'b1)
        begin
            redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_q <= $unsigned(i_arrayidx17_i_add0_trunc_sel_x_b);
        end
    end

    // bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34(BITJOIN,2958)
    assign bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_q = i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_out_dest_data_out_2_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34(BITSELECT,2959)
    assign bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_q[63:0]);

    // i_arrayidx17_i_add0_add_x(ADD,104)@52
    assign i_arrayidx17_i_add0_add_x_a = {1'b0, bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46826_add34_b};
    assign i_arrayidx17_i_add0_add_x_b = {1'b0, redist173_i_arrayidx17_i_add0_trunc_sel_x_b_1_0_q};
    assign i_arrayidx17_i_add0_add_x_o = $unsigned(i_arrayidx17_i_add0_add_x_a) + $unsigned(i_arrayidx17_i_add0_add_x_b);
    assign i_arrayidx17_i_add0_add_x_q = i_arrayidx17_i_add0_add_x_o[64:0];

    // i_arrayidx17_i_add0_dupName_0_trunc_sel_x(BITSELECT,92)@52
    assign i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b = i_arrayidx17_i_add0_add_x_q[63:0];

    // redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0(REG,2769)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_q <= $unsigned(64'b0000000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_backEN == 1'b1)
        begin
            redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_q <= $unsigned(i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b);
        end
    end

    // i_arrayidx17_i_add0_dupName_0_add_x(ADD,96)@53
    assign i_arrayidx17_i_add0_dupName_0_add_x_a = {1'b0, redist175_i_arrayidx17_i_add0_dupName_0_trunc_sel_x_b_1_0_q};
    assign i_arrayidx17_i_add0_dupName_0_add_x_b = {1'b0, i_arrayidx17_i159_add0_shift_join_x_q};
    assign i_arrayidx17_i_add0_dupName_0_add_x_o = $unsigned(i_arrayidx17_i_add0_dupName_0_add_x_a) + $unsigned(i_arrayidx17_i_add0_dupName_0_add_x_b);
    assign i_arrayidx17_i_add0_dupName_0_add_x_q = i_arrayidx17_i_add0_dupName_0_add_x_o[64:0];

    // i_arrayidx17_i_add0_dupName_2_trunc_sel_x(BITSELECT,93)@53
    assign i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b = i_arrayidx17_i_add0_dupName_0_add_x_q[63:0];

    // redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0(REG,2768)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_q <= $unsigned(64'b0000000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_backEN == 1'b1)
        begin
            redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_q <= $unsigned(i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b);
        end
    end

    // i_arrayidx17_i_add0_dupName_1_add_x(ADD,98)@54
    assign i_arrayidx17_i_add0_dupName_1_add_x_a = {1'b0, redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_q};
    assign i_arrayidx17_i_add0_dupName_1_add_x_b = {1'b0, i_arrayidx17_i104_add0_c_i64_123_x_q};
    assign i_arrayidx17_i_add0_dupName_1_add_x_o = $unsigned(i_arrayidx17_i_add0_dupName_1_add_x_a) + $unsigned(i_arrayidx17_i_add0_dupName_1_add_x_b);
    assign i_arrayidx17_i_add0_dupName_1_add_x_q = i_arrayidx17_i_add0_dupName_1_add_x_o[64:0];

    // i_arrayidx17_i_add0_dupName_3_trunc_sel_x(BITSELECT,94)@54
    assign i_arrayidx17_i_add0_dupName_3_trunc_sel_x_b = i_arrayidx17_i_add0_dupName_1_add_x_q[63:0];

    // bubble_join_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33(BITJOIN,2855)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_q = i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_out_dest_data_out_15_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33(BITSELECT,2856)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_q[0:0]);

    // bubble_join_i_llvm_fpga_ffwd_dest_i1_cmp_i65109_add28(BITJOIN,2849)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i1_cmp_i65109_add28_q = i_llvm_fpga_ffwd_dest_i1_cmp_i65109_add28_out_dest_data_out_39_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i1_cmp_i65109_add28(BITSELECT,2850)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i1_cmp_i65109_add28_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i1_cmp_i65109_add28_q[0:0]);

    // bubble_join_i_llvm_fpga_ffwd_dest_i32_lm74369_add27(BITJOIN,2901)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_q = i_llvm_fpga_ffwd_dest_i32_lm74369_add27_out_dest_data_out_17_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i32_lm74369_add27(BITSELECT,2902)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_q[31:0]);

    // i_cmp2_i_add220(COMPARE,348)@2
    assign i_cmp2_i_add220_a = {2'b00, bubble_select_i_llvm_fpga_pop_i32_j_0440_pop8_add49_b};
    assign i_cmp2_i_add220_b = {2'b00, bubble_select_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_b};
    assign i_cmp2_i_add220_o = $unsigned(i_cmp2_i_add220_a) - $unsigned(i_cmp2_i_add220_b);
    assign i_cmp2_i_add220_c[0] = i_cmp2_i_add220_o[33];

    // i_or_cond436_add238(LOGICAL,484)@2
    assign i_or_cond436_add238_q = i_cmp2_i_add220_c & bubble_select_i_llvm_fpga_ffwd_dest_i1_cmp_i65109_add28_b;

    // i_acl_26_add248(LOGICAL,335)@2 + 1
    assign i_acl_26_add248_qi = i_or_cond436_add238_q & bubble_select_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_b;
    dspba_delay_ver #( .width(1), .depth(1), .reset_kind("ASYNC"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_acl_26_add248_delay ( .xin(i_acl_26_add248_qi), .xout(i_acl_26_add248_q), .ena(SE_i_acl_26_add248_backEN[0]), .clk(clock), .aclr(resetn) );

    // SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37(STALLENABLE,3353)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_V0 = SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_backStall = SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_wireValid = i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_valid_out;

    // SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0(STALLENABLE,3841)
    // Valid signal propagation
    assign SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_V0 = SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_s_tv_0 = SE_i_unnamed_add263_backStall & SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_backEN = ~ (SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_v_s_0 = SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_backEN & SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_V0;
    // Backward Stall generation
    assign SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_backStall = ~ (SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_backEN == 1'b0)
            begin
                SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_R_v_0 <= SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_R_v_0 & SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_s_tv_0;
            end
            else
            begin
                SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_R_v_0 <= SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_v_s_0;
            end

        end
    end

    // SE_i_unnamed_add263(STALLENABLE,3544)
    // Valid signal propagation
    assign SE_i_unnamed_add263_V0 = SE_i_unnamed_add263_R_v_0;
    // Stall signal propagation
    assign SE_i_unnamed_add263_s_tv_0 = redist20_i_unnamed_add263_q_89_fifo_stall_out & SE_i_unnamed_add263_R_v_0;
    // Backward Enable generation
    assign SE_i_unnamed_add263_backEN = ~ (SE_i_unnamed_add263_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_unnamed_add263_and0 = SE_i_pred_sel29_add259_V0 & SE_i_unnamed_add263_backEN;
    assign SE_i_unnamed_add263_v_s_0 = SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_V0 & SE_i_unnamed_add263_and0;
    // Backward Stall generation
    assign SE_i_unnamed_add263_backStall = ~ (SE_i_unnamed_add263_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_unnamed_add263_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_unnamed_add263_backEN == 1'b0)
            begin
                SE_i_unnamed_add263_R_v_0 <= SE_i_unnamed_add263_R_v_0 & SE_i_unnamed_add263_s_tv_0;
            end
            else
            begin
                SE_i_unnamed_add263_R_v_0 <= SE_i_unnamed_add263_v_s_0;
            end

        end
    end

    // SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36(STALLENABLE,3321)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_V0 = SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_backStall = SE_i_unnamed_add254_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_wireValid = i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_out_valid_out;

    // SE_i_unnamed_add254(STALLENABLE,3541)
    // Valid signal propagation
    assign SE_i_unnamed_add254_V0 = SE_i_unnamed_add254_R_v_0;
    // Stall signal propagation
    assign SE_i_unnamed_add254_s_tv_0 = SE_i_pred_sel29_add259_backStall & SE_i_unnamed_add254_R_v_0;
    // Backward Enable generation
    assign SE_i_unnamed_add254_backEN = ~ (SE_i_unnamed_add254_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_unnamed_add254_and0 = SE_out_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_V0 & SE_i_unnamed_add254_backEN;
    assign SE_i_unnamed_add254_v_s_0 = SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_V0 & SE_i_unnamed_add254_and0;
    // Backward Stall generation
    assign SE_i_unnamed_add254_backStall = ~ (SE_i_unnamed_add254_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_unnamed_add254_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_unnamed_add254_backEN == 1'b0)
            begin
                SE_i_unnamed_add254_R_v_0 <= SE_i_unnamed_add254_R_v_0 & SE_i_unnamed_add254_s_tv_0;
            end
            else
            begin
                SE_i_unnamed_add254_R_v_0 <= SE_i_unnamed_add254_v_s_0;
            end

        end
    end

    // SE_i_pred_sel29_add259(STALLENABLE,3478)
    // Valid signal propagation
    assign SE_i_pred_sel29_add259_V0 = SE_i_pred_sel29_add259_wireValid;
    // Backward Stall generation
    assign SE_i_pred_sel29_add259_backStall = SE_i_unnamed_add263_backStall | ~ (SE_i_pred_sel29_add259_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_pred_sel29_add259_and0 = SE_i_acl_26_add248_V0;
    assign SE_i_pred_sel29_add259_wireValid = SE_i_unnamed_add254_V0 & SE_i_pred_sel29_add259_and0;

    // SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33(STALLENABLE,3323)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_V0 = SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_backStall = SE_i_acl_26_add248_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_wireValid = i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_out_valid_out;

    // SE_i_acl_26_add248(STALLENABLE,3262)
    // Valid signal propagation
    assign SE_i_acl_26_add248_V0 = SE_i_acl_26_add248_R_v_0;
    assign SE_i_acl_26_add248_V1 = SE_i_acl_26_add248_R_v_1;
    // Stall signal propagation
    assign SE_i_acl_26_add248_s_tv_0 = SE_i_pred_sel29_add259_backStall & SE_i_acl_26_add248_R_v_0;
    assign SE_i_acl_26_add248_s_tv_1 = redist117_i_acl_26_add248_q_52_fifo_stall_out & SE_i_acl_26_add248_R_v_1;
    // Backward Enable generation
    assign SE_i_acl_26_add248_or0 = SE_i_acl_26_add248_s_tv_0;
    assign SE_i_acl_26_add248_backEN = ~ (SE_i_acl_26_add248_s_tv_1 | SE_i_acl_26_add248_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_acl_26_add248_and0 = SE_out_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_V0 & SE_i_acl_26_add248_backEN;
    assign SE_i_acl_26_add248_v_s_0 = SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_V0 & SE_i_acl_26_add248_and0;
    // Backward Stall generation
    assign SE_i_acl_26_add248_backStall = ~ (SE_i_acl_26_add248_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_acl_26_add248_R_v_0 <= 1'b0;
            SE_i_acl_26_add248_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_i_acl_26_add248_backEN == 1'b0)
            begin
                SE_i_acl_26_add248_R_v_0 <= SE_i_acl_26_add248_R_v_0 & SE_i_acl_26_add248_s_tv_0;
            end
            else
            begin
                SE_i_acl_26_add248_R_v_0 <= SE_i_acl_26_add248_v_s_0;
            end

            if (SE_i_acl_26_add248_backEN == 1'b0)
            begin
                SE_i_acl_26_add248_R_v_1 <= SE_i_acl_26_add248_R_v_1 & SE_i_acl_26_add248_s_tv_1;
            end
            else
            begin
                SE_i_acl_26_add248_R_v_1 <= SE_i_acl_26_add248_v_s_0;
            end

        end
    end

    // redist117_i_acl_26_add248_q_52_fifo(STALLFIFO,2711)
    assign redist117_i_acl_26_add248_q_52_fifo_valid_in = SE_i_acl_26_add248_V1;
    assign redist117_i_acl_26_add248_q_52_fifo_stall_in = SE_out_redist117_i_acl_26_add248_q_52_fifo_backStall;
    assign redist117_i_acl_26_add248_q_52_fifo_data_in = i_acl_26_add248_q;
    assign redist117_i_acl_26_add248_q_52_fifo_valid_in_bitsignaltemp = redist117_i_acl_26_add248_q_52_fifo_valid_in[0];
    assign redist117_i_acl_26_add248_q_52_fifo_stall_in_bitsignaltemp = redist117_i_acl_26_add248_q_52_fifo_stall_in[0];
    assign redist117_i_acl_26_add248_q_52_fifo_valid_out[0] = redist117_i_acl_26_add248_q_52_fifo_valid_out_bitsignaltemp;
    assign redist117_i_acl_26_add248_q_52_fifo_stall_out[0] = redist117_i_acl_26_add248_q_52_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(52),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(1),
        .IMPL("ram")
    ) theredist117_i_acl_26_add248_q_52_fifo (
        .valid_in(redist117_i_acl_26_add248_q_52_fifo_valid_in_bitsignaltemp),
        .stall_in(redist117_i_acl_26_add248_q_52_fifo_stall_in_bitsignaltemp),
        .data_in(i_acl_26_add248_q),
        .valid_out(redist117_i_acl_26_add248_q_52_fifo_valid_out_bitsignaltemp),
        .stall_out(redist117_i_acl_26_add248_q_52_fifo_stall_out_bitsignaltemp),
        .data_out(redist117_i_acl_26_add248_q_52_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_redist117_i_acl_26_add248_q_52_fifo(BITJOIN,3069)
    assign bubble_join_redist117_i_acl_26_add248_q_52_fifo_q = redist117_i_acl_26_add248_q_52_fifo_data_out;

    // bubble_select_redist117_i_acl_26_add248_q_52_fifo(BITSELECT,3070)
    assign bubble_select_redist117_i_acl_26_add248_q_52_fifo_b = $unsigned(bubble_join_redist117_i_acl_26_add248_q_52_fifo_q[0:0]);

    // SE_out_redist117_i_acl_26_add248_q_52_fifo(STALLENABLE,3855)
    // Valid signal propagation
    assign SE_out_redist117_i_acl_26_add248_q_52_fifo_V0 = SE_out_redist117_i_acl_26_add248_q_52_fifo_wireValid;
    // Backward Stall generation
    assign SE_out_redist117_i_acl_26_add248_q_52_fifo_backStall = SR_SE_i_addr_add253_backStall | ~ (SE_out_redist117_i_acl_26_add248_q_52_fifo_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_redist117_i_acl_26_add248_q_52_fifo_wireValid = redist117_i_acl_26_add248_q_52_fifo_valid_out;

    // SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0(STALLENABLE,3913)
    // Valid signal propagation
    assign SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_V0 = SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_s_tv_0 = SR_SE_i_addr_add253_backStall & SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_backEN = ~ (SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_v_s_0 = SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_backEN & SE_i_arrayidx17_i_add0_dupName_0_add_x_V0;
    // Backward Stall generation
    assign SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_backStall = ~ (SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_backEN == 1'b0)
            begin
                SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0 <= SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0 & SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_s_tv_0;
            end
            else
            begin
                SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0 <= SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_v_s_0;
            end

        end
    end

    // SE_i_addr_add253(STALLENABLE,3265)
    // Valid signal propagation
    assign SE_i_addr_add253_V0 = SE_i_addr_add253_R_v_0;
    // Stall signal propagation
    assign SE_i_addr_add253_s_tv_0 = redist116_i_addr_add253_q_38_fifo_stall_out & SE_i_addr_add253_R_v_0;
    // Backward Enable generation
    assign SE_i_addr_add253_backEN = ~ (SE_i_addr_add253_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_addr_add253_v_s_0 = SE_i_addr_add253_backEN & SR_SE_i_addr_add253_V;
    // Backward Stall generation
    assign SE_i_addr_add253_backStall = ~ (SE_i_addr_add253_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_addr_add253_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_addr_add253_backEN == 1'b0)
            begin
                SE_i_addr_add253_R_v_0 <= SE_i_addr_add253_R_v_0 & SE_i_addr_add253_s_tv_0;
            end
            else
            begin
                SE_i_addr_add253_R_v_0 <= SE_i_addr_add253_v_s_0;
            end

        end
    end

    // SR_SE_i_addr_add253(STALLREG,4446)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_i_addr_add253_r_valid <= 1'b0;
            SR_SE_i_addr_add253_r_data0 <= 1'bx;
            SR_SE_i_addr_add253_r_data1 <= 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
            SR_SE_i_addr_add253_r_data2 <= 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_i_addr_add253_r_valid <= SE_i_addr_add253_backStall & (SR_SE_i_addr_add253_r_valid | SR_SE_i_addr_add253_i_valid);

            if (SR_SE_i_addr_add253_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_i_addr_add253_r_data0 <= $unsigned(bubble_select_redist117_i_acl_26_add248_q_52_fifo_b);
                SR_SE_i_addr_add253_r_data1 <= i_arrayidx17_i_add0_dupName_3_trunc_sel_x_b;
                SR_SE_i_addr_add253_r_data2 <= i_arrayidx5_i_add0_dupName_3_trunc_sel_x_b;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_i_addr_add253_and0 = SE_redist174_i_arrayidx17_i_add0_dupName_2_trunc_sel_x_b_1_0_V0;
    assign SR_SE_i_addr_add253_and1 = SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_V0 & SR_SE_i_addr_add253_and0;
    assign SR_SE_i_addr_add253_i_valid = SE_out_redist117_i_acl_26_add248_q_52_fifo_V0 & SR_SE_i_addr_add253_and1;
    // Stall signal propagation
    assign SR_SE_i_addr_add253_backStall = SR_SE_i_addr_add253_r_valid | ~ (SR_SE_i_addr_add253_i_valid);

    // Valid
    assign SR_SE_i_addr_add253_V = SR_SE_i_addr_add253_r_valid == 1'b1 ? SR_SE_i_addr_add253_r_valid : SR_SE_i_addr_add253_i_valid;

    // Data0
    assign SR_SE_i_addr_add253_D0 = SR_SE_i_addr_add253_r_valid == 1'b1 ? SR_SE_i_addr_add253_r_data0 : bubble_select_redist117_i_acl_26_add248_q_52_fifo_b;
    // Data1
    assign SR_SE_i_addr_add253_D1 = SR_SE_i_addr_add253_r_valid == 1'b1 ? SR_SE_i_addr_add253_r_data1 : i_arrayidx17_i_add0_dupName_3_trunc_sel_x_b;
    // Data2
    assign SR_SE_i_addr_add253_D2 = SR_SE_i_addr_add253_r_valid == 1'b1 ? SR_SE_i_addr_add253_r_data2 : i_arrayidx5_i_add0_dupName_3_trunc_sel_x_b;

    // SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0(STALLENABLE,3904)
    // Valid signal propagation
    assign SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_V0 = SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_s_tv_0 = SR_SE_i_addr_add253_backStall & SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_backEN = ~ (SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_v_s_0 = SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_backEN & SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_V0;
    // Backward Stall generation
    assign SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_backStall = ~ (SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_backEN == 1'b0)
            begin
                SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0 <= SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0 & SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_s_tv_0;
            end
            else
            begin
                SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0 <= SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_v_s_0;
            end

        end
    end

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_33(STALLENABLE,4016)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_33_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_33_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_33_backStall = i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_33_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_33_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_33_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32(BLACKBOX,427)@52
    // in in_stall_in@20000000
    // out out_dest_data_out_36_0@53
    // out out_stall_out@20000000
    // out out_valid_out@53
    add_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_0 thei_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32 (
        .in_intel_reserved_ffwd_36_0(in_intel_reserved_ffwd_36_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_33_V0),
        .out_dest_data_out_36_0(i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_out_dest_data_out_36_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32(STALLENABLE,3379)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_V0 = SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_backStall = SE_redist165_i_arrayidx5_i_add0_dupName_2_trunc_sel_x_b_1_0_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_and0 = i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_out_valid_out;
    assign SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_wireValid = SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_V0 & SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_and0;

    // SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0(STALLENABLE,3905)
    // Valid signal propagation
    assign SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_V0 = SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0 = SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156102_add32_backStall & SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_backEN = ~ (SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0 = SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_backEN & SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_V0;
    // Backward Stall generation
    assign SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_backStall = ~ (SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_backEN == 1'b0)
            begin
                SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 <= SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 & SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0;
            end
            else
            begin
                SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 <= SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0;
            end

        end
    end

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_32(STALLENABLE,4014)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_32_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_32_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_32_backStall = i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_32_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_32_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_32_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31(BLACKBOX,439)@51
    // in in_stall_in@20000000
    // out out_dest_data_out_2_0@52
    // out out_stall_out@20000000
    // out out_valid_out@52
    add_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_0 thei_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31 (
        .in_intel_reserved_ffwd_2_0(in_intel_reserved_ffwd_2_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_32_V0),
        .out_dest_data_out_2_0(i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_out_dest_data_out_2_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31(STALLENABLE,3403)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_V0 = SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_backStall = SE_redist166_i_arrayidx5_i_add0_dupName_0_trunc_sel_x_b_1_0_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_and0 = i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_out_valid_out;
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_wireValid = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_V1 & SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_and0;

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_9(STALLENABLE,3968)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_9_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_9_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_9_backStall = i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_9_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_9_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_9_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8(BLACKBOX,428)@49
    // in in_stall_in@20000000
    // out out_dest_data_out_36_0@50
    // out out_stall_out@20000000
    // out out_valid_out@50
    add_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_0 thei_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8 (
        .in_intel_reserved_ffwd_36_0(in_intel_reserved_ffwd_36_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_9_V0),
        .out_dest_data_out_36_0(i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_out_dest_data_out_36_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8(STALLENABLE,3381)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_V0 = SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_backStall = SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_wireValid = i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_out_valid_out;

    // SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0(STALLENABLE,3634)
    // Valid signal propagation
    assign SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_V0 = SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_R_v_0;
    // Stall signal propagation
    assign SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_s_tv_0 = SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_backStall & SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_R_v_0;
    // Backward Enable generation
    assign SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_backEN = ~ (SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_v_s_0 = SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_backEN & SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_V0;
    // Backward Stall generation
    assign SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_backStall = ~ (SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_backEN == 1'b0)
            begin
                SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_R_v_0 <= SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_R_v_0 & SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_s_tv_0;
            end
            else
            begin
                SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_R_v_0 <= SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_v_s_0;
            end

        end
    end

    // SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0(STALLENABLE,3918)
    // Valid signal propagation
    assign SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_V0 = SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_s_tv_0 = SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_backStall & SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_backEN = ~ (SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_v_s_0 = SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_backEN & SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_V0;
    // Backward Stall generation
    assign SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_backStall = ~ (SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_backEN == 1'b0)
            begin
                SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_R_v_0 <= SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_R_v_0 & SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_s_tv_0;
            end
            else
            begin
                SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_R_v_0 <= SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_v_s_0;
            end

        end
    end

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_8(STALLENABLE,3966)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_8_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_8_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_8_backStall = i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_8_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_8_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_8_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7(BLACKBOX,434)@51
    // in in_stall_in@20000000
    // out out_dest_data_out_0_0@52
    // out out_stall_out@20000000
    // out out_valid_out@52
    add_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_0 thei_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7 (
        .in_intel_reserved_ffwd_0_0(in_intel_reserved_ffwd_0_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_8_V0),
        .out_dest_data_out_0_0(i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_out_dest_data_out_0_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7(STALLENABLE,3393)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_V0 = SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_backStall = SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_and0 = i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_out_valid_out;
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_wireValid = SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_V0 & SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_and0;

    // SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0(STALLENABLE,3920)
    // Valid signal propagation
    assign SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_V0 = SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0 = SE_i_arrayidx17_i159_add0_dupName_0_add_x_backStall & SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_backEN = ~ (SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0 = SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_backEN & SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_V0;
    // Backward Stall generation
    assign SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_backStall = ~ (SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_backEN == 1'b0)
            begin
                SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 <= SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 & SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0;
            end
            else
            begin
                SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 <= SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0;
            end

        end
    end

    // SE_i_arrayidx17_i159_add0_dupName_0_add_x(STALLENABLE,3143)
    // Valid signal propagation
    assign SE_i_arrayidx17_i159_add0_dupName_0_add_x_V0 = SE_i_arrayidx17_i159_add0_dupName_0_add_x_wireValid;
    // Backward Stall generation
    assign SE_i_arrayidx17_i159_add0_dupName_0_add_x_backStall = SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_backStall | ~ (SE_i_arrayidx17_i159_add0_dupName_0_add_x_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_arrayidx17_i159_add0_dupName_0_add_x_and0 = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_V3;
    assign SE_i_arrayidx17_i159_add0_dupName_0_add_x_wireValid = SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_V0 & SE_i_arrayidx17_i159_add0_dupName_0_add_x_and0;

    // redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1(REG,2649)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_backEN == 1'b1)
        begin
            redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_q <= $unsigned(SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_D0);
        end
    end

    // redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2(REG,2650)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_backEN == 1'b1)
        begin
            redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_q <= $unsigned(redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_q);
        end
    end

    // c_i32_1302(CONSTANT,323)
    assign c_i32_1302_q = $unsigned(32'b00000000000000000000000000000001);

    // bubble_join_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo(BITJOIN,3036)
    assign bubble_join_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_q = redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_data_out;

    // bubble_select_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo(BITSELECT,3037)
    assign bubble_select_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_b = $unsigned(bubble_join_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_q[31:0]);

    // i_inc_add222(ADD,394)@104
    assign i_inc_add222_a = {1'b0, bubble_select_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_b};
    assign i_inc_add222_b = {1'b0, c_i32_1302_q};
    assign i_inc_add222_o = $unsigned(i_inc_add222_a) + $unsigned(i_inc_add222_b);
    assign i_inc_add222_q = i_inc_add222_o[32:0];

    // bgTrunc_i_inc_add222_sel_x(BITSELECT,3)@104
    assign bgTrunc_i_inc_add222_sel_x_b = i_inc_add222_q[31:0];

    // bubble_join_i_llvm_fpga_pop_i17_cleanups129_pop13_add44(BITJOIN,2991)
    assign bubble_join_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_q = i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out;

    // bubble_select_i_llvm_fpga_pop_i17_cleanups129_pop13_add44(BITSELECT,2992)
    assign bubble_select_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_b = $unsigned(bubble_join_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_q[16:0]);

    // i_first_cleanup131_add54_sel_x(BITSELECT,176)@92
    assign i_first_cleanup131_add54_sel_x_b = bubble_select_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_b[0:0];

    // i_first_cleanup_xor132_add227(LOGICAL,384)@92
    assign i_first_cleanup_xor132_add227_q = i_first_cleanup131_add54_sel_x_b ^ VCC_q;

    // redist115_i_first_cleanup_xor132_add227_q_63_fifo(STALLFIFO,2709)
    assign redist115_i_first_cleanup_xor132_add227_q_63_fifo_valid_in = SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_V3;
    assign redist115_i_first_cleanup_xor132_add227_q_63_fifo_stall_in = SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_backStall;
    assign redist115_i_first_cleanup_xor132_add227_q_63_fifo_data_in = i_first_cleanup_xor132_add227_q;
    assign redist115_i_first_cleanup_xor132_add227_q_63_fifo_valid_in_bitsignaltemp = redist115_i_first_cleanup_xor132_add227_q_63_fifo_valid_in[0];
    assign redist115_i_first_cleanup_xor132_add227_q_63_fifo_stall_in_bitsignaltemp = redist115_i_first_cleanup_xor132_add227_q_63_fifo_stall_in[0];
    assign redist115_i_first_cleanup_xor132_add227_q_63_fifo_valid_out[0] = redist115_i_first_cleanup_xor132_add227_q_63_fifo_valid_out_bitsignaltemp;
    assign redist115_i_first_cleanup_xor132_add227_q_63_fifo_stall_out[0] = redist115_i_first_cleanup_xor132_add227_q_63_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(64),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(1),
        .IMPL("ram")
    ) theredist115_i_first_cleanup_xor132_add227_q_63_fifo (
        .valid_in(redist115_i_first_cleanup_xor132_add227_q_63_fifo_valid_in_bitsignaltemp),
        .stall_in(redist115_i_first_cleanup_xor132_add227_q_63_fifo_stall_in_bitsignaltemp),
        .data_in(i_first_cleanup_xor132_add227_q),
        .valid_out(redist115_i_first_cleanup_xor132_add227_q_63_fifo_valid_out_bitsignaltemp),
        .stall_out(redist115_i_first_cleanup_xor132_add227_q_63_fifo_stall_out_bitsignaltemp),
        .data_out(redist115_i_first_cleanup_xor132_add227_q_63_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_redist115_i_first_cleanup_xor132_add227_q_63_fifo(BITJOIN,3063)
    assign bubble_join_redist115_i_first_cleanup_xor132_add227_q_63_fifo_q = redist115_i_first_cleanup_xor132_add227_q_63_fifo_data_out;

    // bubble_select_redist115_i_first_cleanup_xor132_add227_q_63_fifo(BITSELECT,3064)
    assign bubble_select_redist115_i_first_cleanup_xor132_add227_q_63_fifo_b = $unsigned(bubble_join_redist115_i_first_cleanup_xor132_add227_q_63_fifo_q[0:0]);

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_44(STALLENABLE,4038)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_44_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_44_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_44_backStall = i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_44_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_44_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_44_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43(BLACKBOX,400)@154
    // in in_stall_in@20000000
    // out out_dest_data_out_40_0@155
    // out out_stall_out@20000000
    // out out_valid_out@155
    add_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_0 thei_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43 (
        .in_intel_reserved_ffwd_40_0(in_intel_reserved_ffwd_40_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_44_V0),
        .out_dest_data_out_40_0(i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_out_dest_data_out_40_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43(BITJOIN,2858)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_q = i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_out_dest_data_out_40_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43(BITSELECT,2859)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_q[0:0]);

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_39(STALLENABLE,4028)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_39_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_39_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_39_backStall = i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_39_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_39_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_39_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38(BLACKBOX,433)@122
    // in in_stall_in@20000000
    // out out_dest_data_out_6_0@123
    // out out_stall_out@20000000
    // out out_valid_out@123
    add_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_0 thei_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38 (
        .in_intel_reserved_ffwd_6_0(in_intel_reserved_ffwd_6_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_39_V0),
        .out_dest_data_out_6_0(i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_out_dest_data_out_6_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38(BITJOIN,2943)
    assign bubble_join_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_q = i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_out_dest_data_out_6_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38(BITSELECT,2944)
    assign bubble_select_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_q[63:0]);

    // i_llvm_fpga_mem_lm13212_add275(BLACKBOX,444)@123
    // in in_i_stall@20000000
    // out out_lm13212_add_avm_address@20000000
    // out out_lm13212_add_avm_burstcount@20000000
    // out out_lm13212_add_avm_byteenable@20000000
    // out out_lm13212_add_avm_enable@20000000
    // out out_lm13212_add_avm_read@20000000
    // out out_lm13212_add_avm_write@20000000
    // out out_lm13212_add_avm_writedata@20000000
    // out out_o_readdata@155
    // out out_o_stall@20000000
    // out out_o_valid@155
    add_i_llvm_fpga_mem_lm13212_0 thei_llvm_fpga_mem_lm13212_add275 (
        .in_flush(in_flush),
        .in_i_address(bubble_select_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_b),
        .in_i_dependence(bubble_select_i_llvm_fpga_mem_memdep_16_add273_b),
        .in_i_predicate(GND_q),
        .in_i_stall(SE_out_i_llvm_fpga_mem_lm13212_add275_backStall),
        .in_i_valid(SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_V0),
        .in_lm13212_add_avm_readdata(in_lm13212_add_avm_readdata),
        .in_lm13212_add_avm_readdatavalid(in_lm13212_add_avm_readdatavalid),
        .in_lm13212_add_avm_waitrequest(in_lm13212_add_avm_waitrequest),
        .in_lm13212_add_avm_writeack(in_lm13212_add_avm_writeack),
        .out_lm13212_add_avm_address(i_llvm_fpga_mem_lm13212_add275_out_lm13212_add_avm_address),
        .out_lm13212_add_avm_burstcount(i_llvm_fpga_mem_lm13212_add275_out_lm13212_add_avm_burstcount),
        .out_lm13212_add_avm_byteenable(i_llvm_fpga_mem_lm13212_add275_out_lm13212_add_avm_byteenable),
        .out_lm13212_add_avm_enable(i_llvm_fpga_mem_lm13212_add275_out_lm13212_add_avm_enable),
        .out_lm13212_add_avm_read(i_llvm_fpga_mem_lm13212_add275_out_lm13212_add_avm_read),
        .out_lm13212_add_avm_write(i_llvm_fpga_mem_lm13212_add275_out_lm13212_add_avm_write),
        .out_lm13212_add_avm_writedata(i_llvm_fpga_mem_lm13212_add275_out_lm13212_add_avm_writedata),
        .out_o_readdata(i_llvm_fpga_mem_lm13212_add275_out_o_readdata),
        .out_o_stall(i_llvm_fpga_mem_lm13212_add275_out_o_stall),
        .out_o_valid(i_llvm_fpga_mem_lm13212_add275_out_o_valid),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_i_llvm_fpga_mem_lm13212_add275(BITJOIN,2972)
    assign bubble_join_i_llvm_fpga_mem_lm13212_add275_q = i_llvm_fpga_mem_lm13212_add275_out_o_readdata;

    // bubble_select_i_llvm_fpga_mem_lm13212_add275(BITSELECT,2973)
    assign bubble_select_i_llvm_fpga_mem_lm13212_add275_b = $unsigned(bubble_join_i_llvm_fpga_mem_lm13212_add275_q[31:0]);

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_41(STALLENABLE,4032)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_41_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_41_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_41_backStall = i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_41_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_41_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_41_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40(BLACKBOX,431)@122
    // in in_stall_in@20000000
    // out out_dest_data_out_4_0@123
    // out out_stall_out@20000000
    // out out_valid_out@123
    add_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_0 thei_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40 (
        .in_intel_reserved_ffwd_4_0(in_intel_reserved_ffwd_4_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_41_V0),
        .out_dest_data_out_4_0(i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_out_dest_data_out_4_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40(BITJOIN,2937)
    assign bubble_join_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_q = i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_out_dest_data_out_4_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40(BITSELECT,2938)
    assign bubble_select_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_q[63:0]);

    // i_llvm_fpga_mem_lm13413_add276(BLACKBOX,445)@123
    // in in_i_stall@20000000
    // out out_lm13413_add_avm_address@20000000
    // out out_lm13413_add_avm_burstcount@20000000
    // out out_lm13413_add_avm_byteenable@20000000
    // out out_lm13413_add_avm_enable@20000000
    // out out_lm13413_add_avm_read@20000000
    // out out_lm13413_add_avm_write@20000000
    // out out_lm13413_add_avm_writedata@20000000
    // out out_o_readdata@155
    // out out_o_stall@20000000
    // out out_o_valid@155
    add_i_llvm_fpga_mem_lm13413_0 thei_llvm_fpga_mem_lm13413_add276 (
        .in_flush(in_flush),
        .in_i_address(bubble_select_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_b),
        .in_i_dependence(bubble_select_i_llvm_fpga_mem_memdep_16_add273_b),
        .in_i_predicate(GND_q),
        .in_i_stall(SE_out_i_llvm_fpga_mem_lm13413_add276_backStall),
        .in_i_valid(SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_V0),
        .in_lm13413_add_avm_readdata(in_lm13413_add_avm_readdata),
        .in_lm13413_add_avm_readdatavalid(in_lm13413_add_avm_readdatavalid),
        .in_lm13413_add_avm_waitrequest(in_lm13413_add_avm_waitrequest),
        .in_lm13413_add_avm_writeack(in_lm13413_add_avm_writeack),
        .out_lm13413_add_avm_address(i_llvm_fpga_mem_lm13413_add276_out_lm13413_add_avm_address),
        .out_lm13413_add_avm_burstcount(i_llvm_fpga_mem_lm13413_add276_out_lm13413_add_avm_burstcount),
        .out_lm13413_add_avm_byteenable(i_llvm_fpga_mem_lm13413_add276_out_lm13413_add_avm_byteenable),
        .out_lm13413_add_avm_enable(i_llvm_fpga_mem_lm13413_add276_out_lm13413_add_avm_enable),
        .out_lm13413_add_avm_read(i_llvm_fpga_mem_lm13413_add276_out_lm13413_add_avm_read),
        .out_lm13413_add_avm_write(i_llvm_fpga_mem_lm13413_add276_out_lm13413_add_avm_write),
        .out_lm13413_add_avm_writedata(i_llvm_fpga_mem_lm13413_add276_out_lm13413_add_avm_writedata),
        .out_o_readdata(i_llvm_fpga_mem_lm13413_add276_out_o_readdata),
        .out_o_stall(i_llvm_fpga_mem_lm13413_add276_out_o_stall),
        .out_o_valid(i_llvm_fpga_mem_lm13413_add276_out_o_valid),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_i_llvm_fpga_mem_lm13413_add276(BITJOIN,2975)
    assign bubble_join_i_llvm_fpga_mem_lm13413_add276_q = i_llvm_fpga_mem_lm13413_add276_out_o_readdata;

    // bubble_select_i_llvm_fpga_mem_lm13413_add276(BITSELECT,2976)
    assign bubble_select_i_llvm_fpga_mem_lm13413_add276_b = $unsigned(bubble_join_i_llvm_fpga_mem_lm13413_add276_q[31:0]);

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_43(STALLENABLE,4036)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_43_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_43_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_43_backStall = i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_43_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_43_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_43_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42(BLACKBOX,405)@154
    // in in_stall_in@20000000
    // out out_dest_data_out_3_0@155
    // out out_stall_out@20000000
    // out out_valid_out@155
    add_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_0 thei_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42 (
        .in_intel_reserved_ffwd_3_0(in_intel_reserved_ffwd_3_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_43_V0),
        .out_dest_data_out_3_0(i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_out_dest_data_out_3_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42(BITJOIN,2872)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_q = i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_out_dest_data_out_3_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42(BITSELECT,2873)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_q[0:0]);

    // i_unnamed_add282(MUX,555)@155
    assign i_unnamed_add282_s = bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_b;
    always @(i_unnamed_add282_s or bubble_select_i_llvm_fpga_mem_lm13413_add276_b or bubble_select_i_llvm_fpga_mem_lm13212_add275_b)
    begin
        unique case (i_unnamed_add282_s)
            1'b0 : i_unnamed_add282_q = bubble_select_i_llvm_fpga_mem_lm13413_add276_b;
            1'b1 : i_unnamed_add282_q = bubble_select_i_llvm_fpga_mem_lm13212_add275_b;
            default : i_unnamed_add282_q = 32'b0;
        endcase
    end

    // bubble_join_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo(BITJOIN,3075)
    assign bubble_join_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_q = redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_data_out;

    // bubble_select_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo(BITSELECT,3076)
    assign bubble_select_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_b = $unsigned(bubble_join_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_q[31:0]);

    // i_cmp27_add286(COMPARE,345)@155
    assign i_cmp27_add286_a = {2'b00, bubble_select_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_b};
    assign i_cmp27_add286_b = {2'b00, i_unnamed_add282_q};
    assign i_cmp27_add286_o = $unsigned(i_cmp27_add286_a) - $unsigned(i_cmp27_add286_b);
    assign i_cmp27_add286_c[0] = i_cmp27_add286_o[33];

    // i_unnamed_add287(LOGICAL,556)@155
    assign i_unnamed_add287_q = i_cmp27_add286_c & bubble_select_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_b;

    // i_notcmp123_add288(LOGICAL,478)@155
    assign i_notcmp123_add288_q = i_unnamed_add287_q ^ VCC_q;

    // i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279(BLACKBOX,440)@155
    // in in_stall_in@20000000
    // out out_intel_reserved_ffwd_42_0@20000000
    // out out_stall_out@20000000
    add_i_llvm_fpga_ffwd_source_i32_unnamed_74_add0 thei_llvm_fpga_ffwd_source_i32_unnamed_add74_add279 (
        .in_predicate_in(bubble_select_redist115_i_first_cleanup_xor132_add227_q_63_fifo_b),
        .in_src_data_in_42_0(bubble_select_i_llvm_fpga_mem_lm13212_add275_b),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_backStall),
        .in_valid_in(SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_V0),
        .out_intel_reserved_ffwd_42_0(i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_out_intel_reserved_ffwd_42_0),
        .out_stall_out(i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279(STALLENABLE,3405)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_V0 = SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_backStall = bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_backStall | ~ (SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_wireValid = i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_out_valid_out;

    // bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg(STALLENABLE,4429)
    // Valid signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_V0 = bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_R_v_0;
    // Stall signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_s_tv_0 = SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_backStall & bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_R_v_0;
    // Backward Enable generation
    assign bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_backEN = ~ (bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_v_s_0 = bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_backEN & SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_V0;
    // Backward Stall generation
    assign bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_backStall = ~ (bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_R_v_0 <= 1'b0;
        end
        else
        begin
            if (bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_backEN == 1'b0)
            begin
                bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_R_v_0 & bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_s_tv_0;
            end
            else
            begin
                bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_v_s_0;
            end

        end
    end

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_42(STALLENABLE,4034)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_42_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_42_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_42_backStall = i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_42_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_42_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_42_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41(BLACKBOX,416)@154
    // in in_stall_in@20000000
    // out out_dest_data_out_35_0@155
    // out out_stall_out@20000000
    // out out_valid_out@155
    add_i_llvm_fpga_ffwd_dest_i1_unnamed_73_add0 thei_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41 (
        .in_intel_reserved_ffwd_35_0(in_intel_reserved_ffwd_35_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_42_V0),
        .out_dest_data_out_35_0(),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41(STALLENABLE,3357)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_V0 = SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_backStall = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_wireValid = i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_out_valid_out;

    // bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg(STALLENABLE,4428)
    // Valid signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_V0 = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_R_v_0;
    // Stall signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_s_tv_0 = SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_backStall & bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_R_v_0;
    // Backward Enable generation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_backEN = ~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_v_s_0 = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_backEN & SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_V0;
    // Backward Stall generation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_backStall = ~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_R_v_0 <= 1'b0;
        end
        else
        begin
            if (bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_backEN == 1'b0)
            begin
                bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_R_v_0 & bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_s_tv_0;
            end
            else
            begin
                bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_v_s_0;
            end

        end
    end

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_40(STALLENABLE,4030)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_40_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_40_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_40_backStall = i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_40_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_40_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_40_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39(BLACKBOX,415)@154
    // in in_stall_in@20000000
    // out out_dest_data_out_35_0@155
    // out out_stall_out@20000000
    // out out_valid_out@155
    add_i_llvm_fpga_ffwd_dest_i1_unnamed_72_add0 thei_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39 (
        .in_intel_reserved_ffwd_35_0(in_intel_reserved_ffwd_35_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_40_V0),
        .out_dest_data_out_35_0(),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39(STALLENABLE,3355)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_V0 = SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_backStall = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_wireValid = i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_out_valid_out;

    // bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg(STALLENABLE,4427)
    // Valid signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_V0 = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_R_v_0;
    // Stall signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_s_tv_0 = SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_backStall & bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_R_v_0;
    // Backward Enable generation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_backEN = ~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_v_s_0 = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_backEN & SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_V0;
    // Backward Stall generation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_backStall = ~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_R_v_0 <= 1'b0;
        end
        else
        begin
            if (bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_backEN == 1'b0)
            begin
                bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_R_v_0 & bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_s_tv_0;
            end
            else
            begin
                bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_v_s_0;
            end

        end
    end

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_26(STALLENABLE,4002)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_26_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_26_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_26_backStall = i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_26_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_26_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_26_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25(BLACKBOX,413)@154
    // in in_stall_in@20000000
    // out out_dest_data_out_35_0@155
    // out out_stall_out@20000000
    // out out_valid_out@155
    add_i_llvm_fpga_ffwd_dest_i1_unnamed_70_add0 thei_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25 (
        .in_intel_reserved_ffwd_35_0(in_intel_reserved_ffwd_35_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_26_V0),
        .out_dest_data_out_35_0(),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25(STALLENABLE,3351)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_V0 = SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_backStall = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_wireValid = i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_out_valid_out;

    // bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg(STALLENABLE,4426)
    // Valid signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_V0 = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_R_v_0;
    // Stall signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_s_tv_0 = SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_backStall & bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_R_v_0;
    // Backward Enable generation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_backEN = ~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_v_s_0 = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_backEN & SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_V0;
    // Backward Stall generation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_backStall = ~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_R_v_0 <= 1'b0;
        end
        else
        begin
            if (bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_backEN == 1'b0)
            begin
                bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_R_v_0 & bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_s_tv_0;
            end
            else
            begin
                bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_v_s_0;
            end

        end
    end

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_25(STALLENABLE,4000)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_25_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_25_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_25_backStall = i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_25_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_25_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_25_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24(BLACKBOX,402)@154
    // in in_stall_in@20000000
    // out out_dest_data_out_8_0@155
    // out out_stall_out@20000000
    // out out_valid_out@155
    add_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_0 thei_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24 (
        .in_intel_reserved_ffwd_8_0(in_intel_reserved_ffwd_8_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_25_V0),
        .out_dest_data_out_8_0(),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24(STALLENABLE,3329)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_V0 = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_backStall = bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_wireValid = i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_out_valid_out;

    // bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg(STALLENABLE,4420)
    // Valid signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_V0 = bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_R_v_0;
    // Stall signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_s_tv_0 = SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_backStall & bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_R_v_0;
    // Backward Enable generation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_backEN = ~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_v_s_0 = bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_backEN & SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_V0;
    // Backward Stall generation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_backStall = ~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_R_v_0 <= 1'b0;
        end
        else
        begin
            if (bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_backEN == 1'b0)
            begin
                bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_R_v_0 & bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_s_tv_0;
            end
            else
            begin
                bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_v_s_0;
            end

        end
    end

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_17(STALLENABLE,3984)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_17_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_17_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_17_backStall = i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_17_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_17_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_17_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16(BLACKBOX,412)@154
    // in in_stall_in@20000000
    // out out_dest_data_out_35_0@155
    // out out_stall_out@20000000
    // out out_valid_out@155
    add_i_llvm_fpga_ffwd_dest_i1_unnamed_69_add0 thei_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16 (
        .in_intel_reserved_ffwd_35_0(in_intel_reserved_ffwd_35_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_17_V0),
        .out_dest_data_out_35_0(),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16(STALLENABLE,3349)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_V0 = SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_backStall = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_wireValid = i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_out_valid_out;

    // bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg(STALLENABLE,4425)
    // Valid signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_V0 = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_R_v_0;
    // Stall signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_s_tv_0 = SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_backStall & bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_R_v_0;
    // Backward Enable generation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_backEN = ~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_v_s_0 = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_backEN & SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_V0;
    // Backward Stall generation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_backStall = ~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_R_v_0 <= 1'b0;
        end
        else
        begin
            if (bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_backEN == 1'b0)
            begin
                bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_R_v_0 & bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_s_tv_0;
            end
            else
            begin
                bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_v_s_0;
            end

        end
    end

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_15(STALLENABLE,3980)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_15_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_15_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_15_backStall = i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_15_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_15_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_15_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14(BLACKBOX,411)@154
    // in in_stall_in@20000000
    // out out_dest_data_out_35_0@155
    // out out_stall_out@20000000
    // out out_valid_out@155
    add_i_llvm_fpga_ffwd_dest_i1_unnamed_68_add0 thei_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14 (
        .in_intel_reserved_ffwd_35_0(in_intel_reserved_ffwd_35_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_15_V0),
        .out_dest_data_out_35_0(),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14(STALLENABLE,3347)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_V0 = SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_backStall = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_wireValid = i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_out_valid_out;

    // bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg(STALLENABLE,4424)
    // Valid signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_V0 = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_R_v_0;
    // Stall signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_s_tv_0 = SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_backStall & bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_R_v_0;
    // Backward Enable generation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_backEN = ~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_v_s_0 = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_backEN & SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_V0;
    // Backward Stall generation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_backStall = ~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_R_v_0 <= 1'b0;
        end
        else
        begin
            if (bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_backEN == 1'b0)
            begin
                bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_R_v_0 & bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_s_tv_0;
            end
            else
            begin
                bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_v_s_0;
            end

        end
    end

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_11(STALLENABLE,3972)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_11_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_11_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_11_backStall = i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_11_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_11_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_11_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10(BLACKBOX,410)@154
    // in in_stall_in@20000000
    // out out_dest_data_out_35_0@155
    // out out_stall_out@20000000
    // out out_valid_out@155
    add_i_llvm_fpga_ffwd_dest_i1_unnamed_67_add0 thei_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10 (
        .in_intel_reserved_ffwd_35_0(in_intel_reserved_ffwd_35_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_11_V0),
        .out_dest_data_out_35_0(),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10(STALLENABLE,3345)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_V0 = SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_backStall = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_wireValid = i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_out_valid_out;

    // bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg(STALLENABLE,4423)
    // Valid signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_V0 = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_R_v_0;
    // Stall signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_s_tv_0 = SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_backStall & bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_R_v_0;
    // Backward Enable generation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_backEN = ~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_v_s_0 = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_backEN & SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_V0;
    // Backward Stall generation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_backStall = ~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_R_v_0 <= 1'b0;
        end
        else
        begin
            if (bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_backEN == 1'b0)
            begin
                bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_R_v_0 & bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_s_tv_0;
            end
            else
            begin
                bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_v_s_0;
            end

        end
    end

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_10(STALLENABLE,3970)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_10_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_10_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_10_backStall = i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_10_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_10_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_10_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9(BLACKBOX,407)@154
    // in in_stall_in@20000000
    // out out_dest_data_out_3_0@155
    // out out_stall_out@20000000
    // out out_valid_out@155
    add_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_0 thei_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9 (
        .in_intel_reserved_ffwd_3_0(in_intel_reserved_ffwd_3_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_10_V0),
        .out_dest_data_out_3_0(),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9(STALLENABLE,3339)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_V0 = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_backStall = bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_wireValid = i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_out_valid_out;

    // bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg(STALLENABLE,4422)
    // Valid signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_V0 = bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_R_v_0;
    // Stall signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_s_tv_0 = SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_backStall & bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_R_v_0;
    // Backward Enable generation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_backEN = ~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_v_s_0 = bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_backEN & SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_V0;
    // Backward Stall generation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_backStall = ~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_R_v_0 <= 1'b0;
        end
        else
        begin
            if (bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_backEN == 1'b0)
            begin
                bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_R_v_0 & bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_s_tv_0;
            end
            else
            begin
                bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_v_s_0;
            end

        end
    end

    // SE_i_masked135_add291(STALLENABLE,3464)
    // Valid signal propagation
    assign SE_i_masked135_add291_V0 = SE_i_masked135_add291_R_v_0;
    // Stall signal propagation
    assign SE_i_masked135_add291_s_tv_0 = SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_backStall & SE_i_masked135_add291_R_v_0;
    // Backward Enable generation
    assign SE_i_masked135_add291_backEN = ~ (SE_i_masked135_add291_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_masked135_add291_v_s_0 = SE_i_masked135_add291_backEN & SR_SE_i_masked135_add291_V;
    // Backward Stall generation
    assign SE_i_masked135_add291_backStall = ~ (SE_i_masked135_add291_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_masked135_add291_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_masked135_add291_backEN == 1'b0)
            begin
                SE_i_masked135_add291_R_v_0 <= SE_i_masked135_add291_R_v_0 & SE_i_masked135_add291_s_tv_0;
            end
            else
            begin
                SE_i_masked135_add291_R_v_0 <= SE_i_masked135_add291_v_s_0;
            end

        end
    end

    // bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg(STALLENABLE,4419)
    // Valid signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_V0 = bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_R_v_0;
    // Stall signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_s_tv_0 = SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_backStall & bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_R_v_0;
    // Backward Enable generation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_backEN = ~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_v_s_0 = bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_backEN & SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_V0;
    // Backward Stall generation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_backStall = ~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_R_v_0 <= 1'b0;
        end
        else
        begin
            if (bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_backEN == 1'b0)
            begin
                bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_R_v_0 & bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_s_tv_0;
            end
            else
            begin
                bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_v_s_0;
            end

        end
    end

    // bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg(STALLENABLE,4421)
    // Valid signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_V0 = bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_R_v_0;
    // Stall signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_s_tv_0 = SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_backStall & bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_R_v_0;
    // Backward Enable generation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_backEN = ~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_v_s_0 = bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_backEN & SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_V0;
    // Backward Stall generation
    assign bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_backStall = ~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_R_v_0 <= 1'b0;
        end
        else
        begin
            if (bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_backEN == 1'b0)
            begin
                bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_R_v_0 & bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_s_tv_0;
            end
            else
            begin
                bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_v_s_0;
            end

        end
    end

    // SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo(STALLENABLE,3946)
    // Valid signal propagation
    assign SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_V0 = SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_wireValid;
    // Backward Stall generation
    assign SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_backStall = i_llvm_fpga_pop_i32_inc35145_pop14_add53_out_stall_out | ~ (SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_wireValid = SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_V;

    // SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53(STALLENABLE,3435)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_fromReg0 <= '0;
            SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_fromReg0 <= SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_toReg0;
            // Successor 1
            SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_fromReg1 <= SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_toReg1;
        end
    end
    // Input Stall processing
    assign SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_consumed0 = (~ (bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_backStall) & SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_wireValid) | SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_fromReg0;
    assign SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_consumed1 = (~ (SE_in_i_llvm_fpga_push_i32_inc35145_push14_add226_backStall) & SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_wireValid) | SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_fromReg1;
    // Consuming
    assign SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_StallValid = SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_backStall & SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_wireValid;
    assign SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_toReg0 = SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_StallValid & SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_consumed0;
    assign SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_toReg1 = SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_StallValid & SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_consumed1;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_or0 = SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_consumed0;
    assign SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_wireStall = ~ (SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_consumed1 & SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_or0);
    assign SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_backStall = SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_wireStall;
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_V0 = SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_wireValid & ~ (SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_fromReg0);
    assign SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_V1 = SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_wireValid & ~ (SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_fromReg1);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_wireValid = i_llvm_fpga_pop_i32_inc35145_pop14_add53_out_valid_out;

    // i_llvm_fpga_pop_i32_inc35145_pop14_add53(BLACKBOX,455)@154
    // in in_stall_in@20000000
    // out out_data_out@155
    // out out_feedback_stall_out_14@20000000
    // out out_stall_out@20000000
    // out out_valid_out@155
    add_i_llvm_fpga_pop_i32_inc35145_pop14_0 thei_llvm_fpga_pop_i32_inc35145_pop14_add53 (
        .in_data_in(SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_D0),
        .in_dir(SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_D1),
        .in_feedback_in_14(i_llvm_fpga_push_i32_inc35145_push14_add226_out_feedback_out_14),
        .in_feedback_valid_in_14(i_llvm_fpga_push_i32_inc35145_push14_add226_out_feedback_valid_out_14),
        .in_predicate(GND_q),
        .in_stall_in(SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_backStall),
        .in_valid_in(SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_V0),
        .out_data_out(i_llvm_fpga_pop_i32_inc35145_pop14_add53_out_data_out),
        .out_feedback_stall_out_14(i_llvm_fpga_pop_i32_inc35145_pop14_add53_out_feedback_stall_out_14),
        .out_stall_out(i_llvm_fpga_pop_i32_inc35145_pop14_add53_out_stall_out),
        .out_valid_out(i_llvm_fpga_pop_i32_inc35145_pop14_add53_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_i_llvm_fpga_pop_i32_inc35145_pop14_add53(BITJOIN,3007)
    assign bubble_join_i_llvm_fpga_pop_i32_inc35145_pop14_add53_q = i_llvm_fpga_pop_i32_inc35145_pop14_add53_out_data_out;

    // bubble_select_i_llvm_fpga_pop_i32_inc35145_pop14_add53(BITSELECT,3008)
    assign bubble_select_i_llvm_fpga_pop_i32_inc35145_pop14_add53_b = $unsigned(bubble_join_i_llvm_fpga_pop_i32_inc35145_pop14_add53_q[31:0]);

    // i_llvm_fpga_push_i32_inc35145_push14_add226(BLACKBOX,466)@155
    // in in_stall_in@20000000
    // out out_data_out@156
    // out out_feedback_out_14@20000000
    // out out_feedback_valid_out_14@20000000
    // out out_stall_out@20000000
    // out out_valid_out@156
    add_i_llvm_fpga_push_i32_inc35145_push14_0 thei_llvm_fpga_push_i32_inc35145_push14_add226 (
        .in_data_in(bubble_select_i_llvm_fpga_pop_i32_inc35145_pop14_add53_b),
        .in_feedback_stall_in_14(i_llvm_fpga_pop_i32_inc35145_pop14_add53_out_feedback_stall_out_14),
        .in_keep_going126(bubble_select_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_b),
        .in_stall_in(SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_backStall),
        .in_valid_in(SE_in_i_llvm_fpga_push_i32_inc35145_push14_add226_V0),
        .out_data_out(i_llvm_fpga_push_i32_inc35145_push14_add226_out_data_out),
        .out_feedback_out_14(i_llvm_fpga_push_i32_inc35145_push14_add226_out_feedback_out_14),
        .out_feedback_valid_out_14(i_llvm_fpga_push_i32_inc35145_push14_add226_out_feedback_valid_out_14),
        .out_stall_out(i_llvm_fpga_push_i32_inc35145_push14_add226_out_stall_out),
        .out_valid_out(i_llvm_fpga_push_i32_inc35145_push14_add226_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg(STALLFIFO,4431)
    assign bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_valid_in = SE_out_i_llvm_fpga_pipeline_keep_going126_add45_V0;
    assign bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_stall_in = SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_backStall;
    assign bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_valid_in_bitsignaltemp = bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_valid_in[0];
    assign bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_stall_in_bitsignaltemp = bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_stall_in[0];
    assign bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_valid_out[0] = bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_valid_out_bitsignaltemp;
    assign bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_stall_out[0] = bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(53),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg (
        .valid_in(bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg(STALLENABLE,4433)
    // Valid signal propagation
    assign bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_V0 = bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_R_v_0;
    // Stall signal propagation
    assign bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_s_tv_0 = SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_backStall & bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_R_v_0;
    // Backward Enable generation
    assign bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_backEN = ~ (bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_v_s_0 = bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_backEN & SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_V0;
    // Backward Stall generation
    assign bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_backStall = ~ (bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_R_v_0 <= 1'b0;
        end
        else
        begin
            if (bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_backEN == 1'b0)
            begin
                bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_R_v_0 & bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_s_tv_0;
            end
            else
            begin
                bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_v_s_0;
            end

        end
    end

    // SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1(STALLENABLE,4272)
    // Valid signal propagation
    assign SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_V0 = SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_backStall = in_stall_in | ~ (SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and0 = bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_reg_V0;
    assign SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and1 = bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_V0 & SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and0;
    assign SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and2 = bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_valid_out & SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and1;
    assign SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and3 = i_llvm_fpga_push_i32_inc35145_push14_add226_out_valid_out & SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and2;
    assign SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and4 = bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_V0 & SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and3;
    assign SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and5 = bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_V0 & SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and4;
    assign SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and6 = SE_i_masked135_add291_V0 & SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and5;
    assign SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and7 = bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i33_add9_1_reg_V0 & SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and6;
    assign SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and8 = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add67_add10_1_reg_V0 & SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and7;
    assign SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and9 = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add68_add14_1_reg_V0 & SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and8;
    assign SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and10 = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add69_add16_1_reg_V0 & SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and9;
    assign SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and11 = bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i53_add24_1_reg_V0 & SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and10;
    assign SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and12 = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add70_add25_1_reg_V0 & SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and11;
    assign SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and13 = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add72_add39_1_reg_V0 & SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and12;
    assign SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and14 = bubble_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add73_add41_1_reg_V0 & SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and13;
    assign SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and15 = bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_1_reg_V0 & SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and14;
    assign SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_wireValid = bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_V0 & SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_and15;

    // bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg(STALLENABLE,4430)
    // Valid signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_V0 = bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_R_v_0;
    // Stall signal propagation
    assign bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_s_tv_0 = SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_backStall & bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_R_v_0;
    // Backward Enable generation
    assign bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_backEN = ~ (bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_v_s_0 = bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_backEN & SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_V0;
    // Backward Stall generation
    assign bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_backStall = ~ (bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_R_v_0 <= 1'b0;
        end
        else
        begin
            if (bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_backEN == 1'b0)
            begin
                bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_R_v_0 & bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_s_tv_0;
            end
            else
            begin
                bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_v_s_0;
            end

        end
    end

    // SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283(STALLENABLE,3407)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_V0 = SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_backStall = bubble_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_1_reg_backStall | ~ (SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_wireValid = i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_out_valid_out;

    // i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283(BLACKBOX,441)@155
    // in in_stall_in@20000000
    // out out_intel_reserved_ffwd_43_0@20000000
    // out out_stall_out@20000000
    add_i_llvm_fpga_ffwd_source_i32_unnamed_75_add0 thei_llvm_fpga_ffwd_source_i32_unnamed_add75_add283 (
        .in_predicate_in(bubble_select_redist115_i_first_cleanup_xor132_add227_q_63_fifo_b),
        .in_src_data_in_43_0(bubble_select_i_llvm_fpga_mem_lm13413_add276_b),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_backStall),
        .in_valid_in(SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_V0),
        .out_intel_reserved_ffwd_43_0(i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_out_intel_reserved_ffwd_43_0),
        .out_stall_out(i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283(STALLENABLE,3406)
    // Valid signal propagation
    assign SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_V0 = SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_wireValid;
    // Backward Stall generation
    assign SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_backStall = i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_out_stall_out | ~ (SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_wireValid);
    // Computing multiple Valid(s)
    assign SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_and0 = SE_out_i_llvm_fpga_mem_lm13413_add276_V1;
    assign SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_wireValid = SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_V1 & SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_and0;

    // SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279(STALLENABLE,3404)
    // Valid signal propagation
    assign SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_V0 = SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_wireValid;
    // Backward Stall generation
    assign SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_backStall = i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_out_stall_out | ~ (SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_wireValid);
    // Computing multiple Valid(s)
    assign SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_and0 = SE_out_i_llvm_fpga_mem_lm13212_add275_V1;
    assign SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_wireValid = SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_V0 & SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_and0;

    // SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo(STALLENABLE,3851)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_fromReg0 <= '0;
            SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_fromReg1 <= '0;
            SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_fromReg2 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_fromReg0 <= SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_toReg0;
            // Successor 1
            SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_fromReg1 <= SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_toReg1;
            // Successor 2
            SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_fromReg2 <= SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_toReg2;
        end
    end
    // Input Stall processing
    assign SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_consumed0 = (~ (SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_backStall) & SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_wireValid) | SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_fromReg0;
    assign SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_consumed1 = (~ (SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_backStall) & SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_wireValid) | SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_fromReg1;
    assign SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_consumed2 = (~ (SR_SE_i_or133_add290_backStall) & SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_wireValid) | SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_fromReg2;
    // Consuming
    assign SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_StallValid = SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_backStall & SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_wireValid;
    assign SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_toReg0 = SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_StallValid & SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_consumed0;
    assign SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_toReg1 = SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_StallValid & SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_consumed1;
    assign SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_toReg2 = SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_StallValid & SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_consumed2;
    // Backward Stall generation
    assign SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_or0 = SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_consumed0;
    assign SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_or1 = SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_consumed1 & SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_or0;
    assign SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_wireStall = ~ (SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_consumed2 & SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_or1);
    assign SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_backStall = SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_wireStall;
    // Valid signal propagation
    assign SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_V0 = SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_wireValid & ~ (SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_fromReg0);
    assign SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_V1 = SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_wireValid & ~ (SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_fromReg1);
    assign SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_V2 = SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_wireValid & ~ (SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_fromReg2);
    // Computing multiple Valid(s)
    assign SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_wireValid = redist115_i_first_cleanup_xor132_add227_q_63_fifo_valid_out;

    // SR_SE_i_or133_add290(STALLREG,4498)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_i_or133_add290_r_valid <= 1'b0;
            SR_SE_i_or133_add290_r_data0 <= 1'bx;
            SR_SE_i_or133_add290_r_data1 <= 1'bx;
        end
        else
        begin
            // Valid
            SR_SE_i_or133_add290_r_valid <= SE_i_or133_add290_backStall & (SR_SE_i_or133_add290_r_valid | SR_SE_i_or133_add290_i_valid);

            if (SR_SE_i_or133_add290_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_i_or133_add290_r_data0 <= i_notcmp123_add288_q;
                SR_SE_i_or133_add290_r_data1 <= $unsigned(bubble_select_redist115_i_first_cleanup_xor132_add227_q_63_fifo_b);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_i_or133_add290_and0 = SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_V2;
    assign SR_SE_i_or133_add290_i_valid = SE_out_redist115_i_first_cleanup_xor132_add227_q_63_fifo_V2 & SR_SE_i_or133_add290_and0;
    // Stall signal propagation
    assign SR_SE_i_or133_add290_backStall = SR_SE_i_or133_add290_r_valid | ~ (SR_SE_i_or133_add290_i_valid);

    // Valid
    assign SR_SE_i_or133_add290_V = SR_SE_i_or133_add290_r_valid == 1'b1 ? SR_SE_i_or133_add290_r_valid : SR_SE_i_or133_add290_i_valid;

    // Data0
    assign SR_SE_i_or133_add290_D0 = SR_SE_i_or133_add290_r_valid == 1'b1 ? SR_SE_i_or133_add290_r_data0 : i_notcmp123_add288_q;
    // Data1
    assign SR_SE_i_or133_add290_D1 = SR_SE_i_or133_add290_r_valid == 1'b1 ? SR_SE_i_or133_add290_r_data1 : bubble_select_redist115_i_first_cleanup_xor132_add227_q_63_fifo_b;

    // redist163_i_first_cleanup131_add54_sel_x_b_63_fifo(STALLFIFO,2757)
    assign redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_valid_in = SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_V2;
    assign redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_stall_in = SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_backStall;
    assign redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_data_in = i_first_cleanup131_add54_sel_x_b;
    assign redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_valid_in_bitsignaltemp = redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_valid_in[0];
    assign redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_stall_in_bitsignaltemp = redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_stall_in[0];
    assign redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_valid_out[0] = redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_valid_out_bitsignaltemp;
    assign redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_stall_out[0] = redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(64),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(1),
        .IMPL("ram")
    ) theredist163_i_first_cleanup131_add54_sel_x_b_63_fifo (
        .valid_in(redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_valid_in_bitsignaltemp),
        .stall_in(redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_stall_in_bitsignaltemp),
        .data_in(i_first_cleanup131_add54_sel_x_b),
        .valid_out(redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_valid_out_bitsignaltemp),
        .stall_out(redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_stall_out_bitsignaltemp),
        .data_out(redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo(BITJOIN,3072)
    assign bubble_join_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_q = redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_data_out;

    // bubble_select_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo(BITSELECT,3073)
    assign bubble_select_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_b = $unsigned(bubble_join_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_q[0:0]);

    // SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo(STALLENABLE,3902)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_fromReg0 <= '0;
            SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_fromReg0 <= SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_toReg0;
            // Successor 1
            SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_fromReg1 <= SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_toReg1;
        end
    end
    // Input Stall processing
    assign SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_consumed0 = (~ (SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_backStall) & SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_wireValid) | SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_fromReg0;
    assign SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_consumed1 = (~ (SR_SE_i_masked135_add291_backStall) & SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_wireValid) | SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_fromReg1;
    // Consuming
    assign SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_StallValid = SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_backStall & SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_wireValid;
    assign SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_toReg0 = SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_StallValid & SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_consumed0;
    assign SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_toReg1 = SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_StallValid & SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_consumed1;
    // Backward Stall generation
    assign SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_or0 = SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_consumed0;
    assign SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_wireStall = ~ (SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_consumed1 & SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_or0);
    assign SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_backStall = SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_wireStall;
    // Valid signal propagation
    assign SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_V0 = SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_wireValid & ~ (SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_fromReg0);
    assign SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_V1 = SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_wireValid & ~ (SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_fromReg1);
    // Computing multiple Valid(s)
    assign SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_wireValid = redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_valid_out;

    // SR_SE_i_masked135_add291(STALLREG,4497)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_i_masked135_add291_r_valid <= 1'b0;
            SR_SE_i_masked135_add291_r_data0 <= 1'bx;
            SR_SE_i_masked135_add291_r_data1 <= 1'bx;
        end
        else
        begin
            // Valid
            SR_SE_i_masked135_add291_r_valid <= SE_i_masked135_add291_backStall & (SR_SE_i_masked135_add291_r_valid | SR_SE_i_masked135_add291_i_valid);

            if (SR_SE_i_masked135_add291_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_i_masked135_add291_r_data0 <= i_notcmp123_add288_q;
                SR_SE_i_masked135_add291_r_data1 <= $unsigned(bubble_select_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_b);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_i_masked135_add291_and0 = SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_V1;
    assign SR_SE_i_masked135_add291_i_valid = SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_V1 & SR_SE_i_masked135_add291_and0;
    // Stall signal propagation
    assign SR_SE_i_masked135_add291_backStall = SR_SE_i_masked135_add291_r_valid | ~ (SR_SE_i_masked135_add291_i_valid);

    // Valid
    assign SR_SE_i_masked135_add291_V = SR_SE_i_masked135_add291_r_valid == 1'b1 ? SR_SE_i_masked135_add291_r_valid : SR_SE_i_masked135_add291_i_valid;

    // Data0
    assign SR_SE_i_masked135_add291_D0 = SR_SE_i_masked135_add291_r_valid == 1'b1 ? SR_SE_i_masked135_add291_r_data0 : i_notcmp123_add288_q;
    // Data1
    assign SR_SE_i_masked135_add291_D1 = SR_SE_i_masked135_add291_r_valid == 1'b1 ? SR_SE_i_masked135_add291_r_data1 : bubble_select_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_b;

    // SE_in_i_llvm_fpga_push_i1_notexitcond136_add289(STALLENABLE,3454)
    // Valid signal propagation
    assign SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_V0 = SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_wireValid;
    // Backward Stall generation
    assign SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_backStall = i_llvm_fpga_push_i1_notexitcond136_add289_out_stall_out | ~ (SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_wireValid);
    // Computing multiple Valid(s)
    assign SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_wireValid = SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_V;

    // SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289(STALLREG,4499)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_r_valid <= 1'b0;
            SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_r_data0 <= 1'bx;
            SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_r_data1 <= 1'bx;
        end
        else
        begin
            // Valid
            SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_r_valid <= SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_backStall & (SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_r_valid | SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_i_valid);

            if (SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_r_data0 <= i_unnamed_add287_q;
                SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_r_data1 <= $unsigned(bubble_select_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_b);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_and0 = SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_V0;
    assign SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_i_valid = SE_out_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_V0 & SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_and0;
    // Stall signal propagation
    assign SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_backStall = SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_r_valid | ~ (SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_i_valid);

    // Valid
    assign SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_V = SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_r_valid == 1'b1 ? SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_r_valid : SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_i_valid;

    // Data0
    assign SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_D0 = SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_r_valid == 1'b1 ? SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_r_data0 : i_unnamed_add287_q;
    // Data1
    assign SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_D1 = SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_r_valid == 1'b1 ? SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_r_data1 : bubble_select_redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_b;

    // SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43(STALLENABLE,3325)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_fromReg0 <= '0;
            SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_fromReg0 <= SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_toReg0;
            // Successor 1
            SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_fromReg1 <= SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_toReg1;
        end
    end
    // Input Stall processing
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_consumed0 = (~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_1_reg_backStall) & SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_wireValid) | SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_fromReg0;
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_consumed1 = (~ (SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_backStall) & SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_wireValid) | SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_fromReg1;
    // Consuming
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_StallValid = SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_backStall & SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_wireValid;
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_toReg0 = SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_StallValid & SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_consumed0;
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_toReg1 = SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_StallValid & SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_consumed1;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_or0 = SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_consumed0;
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_wireStall = ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_consumed1 & SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_or0);
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_backStall = SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_wireStall;
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_V0 = SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_wireValid & ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_fromReg0);
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_V1 = SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_wireValid & ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_fromReg1);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_wireValid = i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_out_valid_out;

    // SE_out_i_llvm_fpga_mem_lm13413_add276(STALLENABLE,3415)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_i_llvm_fpga_mem_lm13413_add276_fromReg0 <= '0;
            SE_out_i_llvm_fpga_mem_lm13413_add276_fromReg1 <= '0;
            SE_out_i_llvm_fpga_mem_lm13413_add276_fromReg2 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_i_llvm_fpga_mem_lm13413_add276_fromReg0 <= SE_out_i_llvm_fpga_mem_lm13413_add276_toReg0;
            // Successor 1
            SE_out_i_llvm_fpga_mem_lm13413_add276_fromReg1 <= SE_out_i_llvm_fpga_mem_lm13413_add276_toReg1;
            // Successor 2
            SE_out_i_llvm_fpga_mem_lm13413_add276_fromReg2 <= SE_out_i_llvm_fpga_mem_lm13413_add276_toReg2;
        end
    end
    // Input Stall processing
    assign SE_out_i_llvm_fpga_mem_lm13413_add276_consumed0 = (~ (SE_i_lm13413_toi1_intcast_add281_sel_x_backStall) & SE_out_i_llvm_fpga_mem_lm13413_add276_wireValid) | SE_out_i_llvm_fpga_mem_lm13413_add276_fromReg0;
    assign SE_out_i_llvm_fpga_mem_lm13413_add276_consumed1 = (~ (SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_backStall) & SE_out_i_llvm_fpga_mem_lm13413_add276_wireValid) | SE_out_i_llvm_fpga_mem_lm13413_add276_fromReg1;
    assign SE_out_i_llvm_fpga_mem_lm13413_add276_consumed2 = (~ (SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_backStall) & SE_out_i_llvm_fpga_mem_lm13413_add276_wireValid) | SE_out_i_llvm_fpga_mem_lm13413_add276_fromReg2;
    // Consuming
    assign SE_out_i_llvm_fpga_mem_lm13413_add276_StallValid = SE_out_i_llvm_fpga_mem_lm13413_add276_backStall & SE_out_i_llvm_fpga_mem_lm13413_add276_wireValid;
    assign SE_out_i_llvm_fpga_mem_lm13413_add276_toReg0 = SE_out_i_llvm_fpga_mem_lm13413_add276_StallValid & SE_out_i_llvm_fpga_mem_lm13413_add276_consumed0;
    assign SE_out_i_llvm_fpga_mem_lm13413_add276_toReg1 = SE_out_i_llvm_fpga_mem_lm13413_add276_StallValid & SE_out_i_llvm_fpga_mem_lm13413_add276_consumed1;
    assign SE_out_i_llvm_fpga_mem_lm13413_add276_toReg2 = SE_out_i_llvm_fpga_mem_lm13413_add276_StallValid & SE_out_i_llvm_fpga_mem_lm13413_add276_consumed2;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_mem_lm13413_add276_or0 = SE_out_i_llvm_fpga_mem_lm13413_add276_consumed0;
    assign SE_out_i_llvm_fpga_mem_lm13413_add276_or1 = SE_out_i_llvm_fpga_mem_lm13413_add276_consumed1 & SE_out_i_llvm_fpga_mem_lm13413_add276_or0;
    assign SE_out_i_llvm_fpga_mem_lm13413_add276_wireStall = ~ (SE_out_i_llvm_fpga_mem_lm13413_add276_consumed2 & SE_out_i_llvm_fpga_mem_lm13413_add276_or1);
    assign SE_out_i_llvm_fpga_mem_lm13413_add276_backStall = SE_out_i_llvm_fpga_mem_lm13413_add276_wireStall;
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_mem_lm13413_add276_V0 = SE_out_i_llvm_fpga_mem_lm13413_add276_wireValid & ~ (SE_out_i_llvm_fpga_mem_lm13413_add276_fromReg0);
    assign SE_out_i_llvm_fpga_mem_lm13413_add276_V1 = SE_out_i_llvm_fpga_mem_lm13413_add276_wireValid & ~ (SE_out_i_llvm_fpga_mem_lm13413_add276_fromReg1);
    assign SE_out_i_llvm_fpga_mem_lm13413_add276_V2 = SE_out_i_llvm_fpga_mem_lm13413_add276_wireValid & ~ (SE_out_i_llvm_fpga_mem_lm13413_add276_fromReg2);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_mem_lm13413_add276_wireValid = i_llvm_fpga_mem_lm13413_add276_out_o_valid;

    // SE_out_i_llvm_fpga_mem_lm13212_add275(STALLENABLE,3413)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_i_llvm_fpga_mem_lm13212_add275_fromReg0 <= '0;
            SE_out_i_llvm_fpga_mem_lm13212_add275_fromReg1 <= '0;
            SE_out_i_llvm_fpga_mem_lm13212_add275_fromReg2 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_i_llvm_fpga_mem_lm13212_add275_fromReg0 <= SE_out_i_llvm_fpga_mem_lm13212_add275_toReg0;
            // Successor 1
            SE_out_i_llvm_fpga_mem_lm13212_add275_fromReg1 <= SE_out_i_llvm_fpga_mem_lm13212_add275_toReg1;
            // Successor 2
            SE_out_i_llvm_fpga_mem_lm13212_add275_fromReg2 <= SE_out_i_llvm_fpga_mem_lm13212_add275_toReg2;
        end
    end
    // Input Stall processing
    assign SE_out_i_llvm_fpga_mem_lm13212_add275_consumed0 = (~ (SE_i_lm13212_toi1_intcast_add278_sel_x_backStall) & SE_out_i_llvm_fpga_mem_lm13212_add275_wireValid) | SE_out_i_llvm_fpga_mem_lm13212_add275_fromReg0;
    assign SE_out_i_llvm_fpga_mem_lm13212_add275_consumed1 = (~ (SE_in_i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_backStall) & SE_out_i_llvm_fpga_mem_lm13212_add275_wireValid) | SE_out_i_llvm_fpga_mem_lm13212_add275_fromReg1;
    assign SE_out_i_llvm_fpga_mem_lm13212_add275_consumed2 = (~ (SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_backStall) & SE_out_i_llvm_fpga_mem_lm13212_add275_wireValid) | SE_out_i_llvm_fpga_mem_lm13212_add275_fromReg2;
    // Consuming
    assign SE_out_i_llvm_fpga_mem_lm13212_add275_StallValid = SE_out_i_llvm_fpga_mem_lm13212_add275_backStall & SE_out_i_llvm_fpga_mem_lm13212_add275_wireValid;
    assign SE_out_i_llvm_fpga_mem_lm13212_add275_toReg0 = SE_out_i_llvm_fpga_mem_lm13212_add275_StallValid & SE_out_i_llvm_fpga_mem_lm13212_add275_consumed0;
    assign SE_out_i_llvm_fpga_mem_lm13212_add275_toReg1 = SE_out_i_llvm_fpga_mem_lm13212_add275_StallValid & SE_out_i_llvm_fpga_mem_lm13212_add275_consumed1;
    assign SE_out_i_llvm_fpga_mem_lm13212_add275_toReg2 = SE_out_i_llvm_fpga_mem_lm13212_add275_StallValid & SE_out_i_llvm_fpga_mem_lm13212_add275_consumed2;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_mem_lm13212_add275_or0 = SE_out_i_llvm_fpga_mem_lm13212_add275_consumed0;
    assign SE_out_i_llvm_fpga_mem_lm13212_add275_or1 = SE_out_i_llvm_fpga_mem_lm13212_add275_consumed1 & SE_out_i_llvm_fpga_mem_lm13212_add275_or0;
    assign SE_out_i_llvm_fpga_mem_lm13212_add275_wireStall = ~ (SE_out_i_llvm_fpga_mem_lm13212_add275_consumed2 & SE_out_i_llvm_fpga_mem_lm13212_add275_or1);
    assign SE_out_i_llvm_fpga_mem_lm13212_add275_backStall = SE_out_i_llvm_fpga_mem_lm13212_add275_wireStall;
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_mem_lm13212_add275_V0 = SE_out_i_llvm_fpga_mem_lm13212_add275_wireValid & ~ (SE_out_i_llvm_fpga_mem_lm13212_add275_fromReg0);
    assign SE_out_i_llvm_fpga_mem_lm13212_add275_V1 = SE_out_i_llvm_fpga_mem_lm13212_add275_wireValid & ~ (SE_out_i_llvm_fpga_mem_lm13212_add275_fromReg1);
    assign SE_out_i_llvm_fpga_mem_lm13212_add275_V2 = SE_out_i_llvm_fpga_mem_lm13212_add275_wireValid & ~ (SE_out_i_llvm_fpga_mem_lm13212_add275_fromReg2);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_mem_lm13212_add275_wireValid = i_llvm_fpga_mem_lm13212_add275_out_o_valid;

    // SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42(STALLENABLE,3335)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_fromReg0 <= '0;
            SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_fromReg0 <= SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_toReg0;
            // Successor 1
            SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_fromReg1 <= SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_toReg1;
        end
    end
    // Input Stall processing
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_consumed0 = (~ (bubble_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_1_reg_backStall) & SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_wireValid) | SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_fromReg0;
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_consumed1 = (~ (SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_backStall) & SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_wireValid) | SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_fromReg1;
    // Consuming
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_StallValid = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_backStall & SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_wireValid;
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_toReg0 = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_StallValid & SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_consumed0;
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_toReg1 = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_StallValid & SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_consumed1;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_or0 = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_consumed0;
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_wireStall = ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_consumed1 & SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_or0);
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_backStall = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_wireStall;
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_V0 = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_wireValid & ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_fromReg0);
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_V1 = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_wireValid & ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_fromReg1);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_wireValid = i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_out_valid_out;

    // SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo(STALLENABLE,3933)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_fromReg0 <= '0;
            SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_fromReg1 <= '0;
            SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_fromReg2 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_fromReg0 <= SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_toReg0;
            // Successor 1
            SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_fromReg1 <= SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_toReg1;
            // Successor 2
            SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_fromReg2 <= SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_toReg2;
        end
    end
    // Input Stall processing
    assign SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_consumed0 = (~ (SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_backStall) & SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_wireValid) | SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_fromReg0;
    assign SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_consumed1 = (~ (SR_SE_i_masked135_add291_backStall) & SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_wireValid) | SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_fromReg1;
    assign SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_consumed2 = (~ (SR_SE_i_or133_add290_backStall) & SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_wireValid) | SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_fromReg2;
    // Consuming
    assign SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_StallValid = SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_backStall & SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_wireValid;
    assign SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_toReg0 = SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_StallValid & SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_consumed0;
    assign SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_toReg1 = SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_StallValid & SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_consumed1;
    assign SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_toReg2 = SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_StallValid & SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_consumed2;
    // Backward Stall generation
    assign SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_or0 = SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_consumed0;
    assign SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_or1 = SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_consumed1 & SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_or0;
    assign SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_wireStall = ~ (SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_consumed2 & SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_or1);
    assign SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_backStall = SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_wireStall;
    // Valid signal propagation
    assign SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_V0 = SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_wireValid & ~ (SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_fromReg0);
    assign SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_V1 = SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_wireValid & ~ (SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_fromReg1);
    assign SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_V2 = SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_wireValid & ~ (SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_fromReg2);
    // Computing multiple Valid(s)
    assign SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_and0 = redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_valid_out;
    assign SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_and1 = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i31_add42_V1 & SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_and0;
    assign SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_and2 = SE_out_i_llvm_fpga_mem_lm13212_add275_V2 & SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_and1;
    assign SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_and3 = SE_out_i_llvm_fpga_mem_lm13413_add276_V2 & SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_and2;
    assign SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_wireValid = SE_out_i_llvm_fpga_ffwd_dest_i1_phi_decision125_xor110_add43_V1 & SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_and3;

    // redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo(STALLFIFO,2787)
    assign redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_valid_in = SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_V1;
    assign redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_stall_in = SE_out_redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_backStall;
    assign redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_data_in = bgTrunc_i_inc_add222_sel_x_b;
    assign redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_valid_in_bitsignaltemp = redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_valid_in[0];
    assign redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_stall_in_bitsignaltemp = redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_stall_in[0];
    assign redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_valid_out[0] = redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_valid_out_bitsignaltemp;
    assign redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_stall_out[0] = redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(52),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(32),
        .IMPL("ram")
    ) theredist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo (
        .valid_in(redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_valid_in_bitsignaltemp),
        .stall_in(redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_stall_in_bitsignaltemp),
        .data_in(bgTrunc_i_inc_add222_sel_x_b),
        .valid_out(redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_valid_out_bitsignaltemp),
        .stall_out(redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_stall_out_bitsignaltemp),
        .data_out(redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_in_i_llvm_fpga_push_i32_j_0440_push8_add240(STALLENABLE,3458)
    // Valid signal propagation
    assign SE_in_i_llvm_fpga_push_i32_j_0440_push8_add240_V0 = SE_in_i_llvm_fpga_push_i32_j_0440_push8_add240_wireValid;
    // Backward Stall generation
    assign SE_in_i_llvm_fpga_push_i32_j_0440_push8_add240_backStall = i_llvm_fpga_push_i32_j_0440_push8_add240_out_stall_out | ~ (SE_in_i_llvm_fpga_push_i32_j_0440_push8_add240_wireValid);
    // Computing multiple Valid(s)
    assign SE_in_i_llvm_fpga_push_i32_j_0440_push8_add240_and0 = SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_V0;
    assign SE_in_i_llvm_fpga_push_i32_j_0440_push8_add240_wireValid = SE_out_i_llvm_fpga_pipeline_keep_going126_add45_V1 & SE_in_i_llvm_fpga_push_i32_j_0440_push8_add240_and0;

    // SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo(STALLENABLE,3784)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_fromReg0 <= '0;
            SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_fromReg0 <= SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_toReg0;
            // Successor 1
            SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_fromReg1 <= SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_toReg1;
        end
    end
    // Input Stall processing
    assign SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_consumed0 = (~ (SE_in_i_llvm_fpga_push_i32_j_0440_push8_add240_backStall) & SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_wireValid) | SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_fromReg0;
    assign SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_consumed1 = (~ (redist187_bgTrunc_i_inc_add222_sel_x_b_51_fifo_stall_out) & SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_wireValid) | SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_fromReg1;
    // Consuming
    assign SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_StallValid = SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_backStall & SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_wireValid;
    assign SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_toReg0 = SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_StallValid & SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_consumed0;
    assign SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_toReg1 = SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_StallValid & SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_consumed1;
    // Backward Stall generation
    assign SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_or0 = SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_consumed0;
    assign SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_wireStall = ~ (SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_consumed1 & SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_or0);
    assign SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_backStall = SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_wireStall;
    // Valid signal propagation
    assign SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_V0 = SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_wireValid & ~ (SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_fromReg0);
    assign SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_V1 = SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_wireValid & ~ (SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_fromReg1);
    // Computing multiple Valid(s)
    assign SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_wireValid = redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_valid_out;

    // redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo(STALLFIFO,2651)
    assign redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_valid_in = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_V2;
    assign redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_stall_in = SE_out_redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_backStall;
    assign redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_data_in = redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_q;
    assign redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_valid_in_bitsignaltemp = redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_valid_in[0];
    assign redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_stall_in_bitsignaltemp = redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_stall_in[0];
    assign redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_valid_out[0] = redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_valid_out_bitsignaltemp;
    assign redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_stall_out[0] = redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(52),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(32),
        .IMPL("ram")
    ) theredist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo (
        .valid_in(redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_valid_in_bitsignaltemp),
        .stall_in(redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_stall_in_bitsignaltemp),
        .data_in(redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_q),
        .valid_out(redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_valid_out_bitsignaltemp),
        .stall_out(redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_stall_out_bitsignaltemp),
        .data_out(redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_1(STALLENABLE,3952)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_1_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_1_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_1_backStall = i_llvm_fpga_ffwd_dest_i32_replace_phi100_add0_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_1_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_1_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_1_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i32_replace_phi100_add0(BLACKBOX,421)@52
    // in in_stall_in@20000000
    // out out_dest_data_out_34_0@53
    // out out_stall_out@20000000
    // out out_valid_out@53
    add_i_llvm_fpga_ffwd_dest_i32_replace_phi100_0 thei_llvm_fpga_ffwd_dest_i32_replace_phi100_add0 (
        .in_intel_reserved_ffwd_34_0(in_intel_reserved_ffwd_34_0),
        .in_stall_in(SE_out_i_llvm_fpga_pop_i32_pop6_add47_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_1_V0),
        .out_dest_data_out_34_0(i_llvm_fpga_ffwd_dest_i32_replace_phi100_add0_out_dest_data_out_34_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i32_replace_phi100_add0_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i32_replace_phi100_add0_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_i_llvm_fpga_ffwd_dest_i32_replace_phi100_add0(BITJOIN,2907)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i32_replace_phi100_add0_q = i_llvm_fpga_ffwd_dest_i32_replace_phi100_add0_out_dest_data_out_34_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i32_replace_phi100_add0(BITSELECT,2908)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i32_replace_phi100_add0_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i32_replace_phi100_add0_q[31:0]);

    // SE_out_i_llvm_fpga_push_i32_push6_add280(STALLENABLE,3461)
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_push_i32_push6_add280_backStall = $unsigned(1'b0);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_push_i32_push6_add280_wireValid = i_llvm_fpga_push_i32_push6_add280_out_valid_out;

    // i_llvm_fpga_push_i32_push6_add280(BLACKBOX,468)@155
    // in in_stall_in@20000000
    // out out_data_out@156
    // out out_feedback_out_6@20000000
    // out out_feedback_valid_out_6@20000000
    // out out_stall_out@20000000
    // out out_valid_out@156
    add_i_llvm_fpga_push_i32_push6_0 thei_llvm_fpga_push_i32_push6_add280 (
        .in_data_in(bubble_select_i_llvm_fpga_mem_lm13413_add276_b),
        .in_feedback_stall_in_6(i_llvm_fpga_pop_i32_pop6_add47_out_feedback_stall_out_6),
        .in_keep_going126(bubble_select_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_b),
        .in_stall_in(SE_out_i_llvm_fpga_push_i32_push6_add280_backStall),
        .in_valid_in(SE_i_lm13413_toi1_intcast_add281_sel_x_V1),
        .out_data_out(),
        .out_feedback_out_6(i_llvm_fpga_push_i32_push6_add280_out_feedback_out_6),
        .out_feedback_valid_out_6(i_llvm_fpga_push_i32_push6_add280_out_feedback_valid_out_6),
        .out_stall_out(i_llvm_fpga_push_i32_push6_add280_out_stall_out),
        .out_valid_out(i_llvm_fpga_push_i32_push6_add280_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_pop_i32_pop6_add47(BLACKBOX,457)@52
    // in in_stall_in@20000000
    // out out_data_out@53
    // out out_feedback_stall_out_6@20000000
    // out out_stall_out@20000000
    // out out_valid_out@53
    add_i_llvm_fpga_pop_i32_pop6_0 thei_llvm_fpga_pop_i32_pop6_add47 (
        .in_data_in(c_i32_0297_q),
        .in_dir(bubble_select_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_b),
        .in_feedback_in_6(i_llvm_fpga_push_i32_push6_add280_out_feedback_out_6),
        .in_feedback_valid_in_6(i_llvm_fpga_push_i32_push6_add280_out_feedback_valid_out_6),
        .in_predicate(GND_q),
        .in_stall_in(SE_out_i_llvm_fpga_pop_i32_pop6_add47_backStall),
        .in_valid_in(SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_V1),
        .out_data_out(i_llvm_fpga_pop_i32_pop6_add47_out_data_out),
        .out_feedback_stall_out_6(i_llvm_fpga_pop_i32_pop6_add47_out_feedback_stall_out_6),
        .out_stall_out(i_llvm_fpga_pop_i32_pop6_add47_out_stall_out),
        .out_valid_out(i_llvm_fpga_pop_i32_pop6_add47_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_i_llvm_fpga_pop_i32_pop6_add47(BITJOIN,3014)
    assign bubble_join_i_llvm_fpga_pop_i32_pop6_add47_q = i_llvm_fpga_pop_i32_pop6_add47_out_data_out;

    // bubble_select_i_llvm_fpga_pop_i32_pop6_add47(BITSELECT,3015)
    assign bubble_select_i_llvm_fpga_pop_i32_pop6_add47_b = $unsigned(bubble_join_i_llvm_fpga_pop_i32_pop6_add47_q[31:0]);

    // i_replace_phi99_add57(MUX,489)@53
    assign i_replace_phi99_add57_s = redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_q;
    always @(i_replace_phi99_add57_s or bubble_select_i_llvm_fpga_pop_i32_pop6_add47_b or bubble_select_i_llvm_fpga_ffwd_dest_i32_replace_phi100_add0_b)
    begin
        unique case (i_replace_phi99_add57_s)
            1'b0 : i_replace_phi99_add57_q = bubble_select_i_llvm_fpga_pop_i32_pop6_add47_b;
            1'b1 : i_replace_phi99_add57_q = bubble_select_i_llvm_fpga_ffwd_dest_i32_replace_phi100_add0_b;
            default : i_replace_phi99_add57_q = 32'b0;
        endcase
    end

    // bubble_join_i_llvm_fpga_ffwd_dest_i32_replace_phi5097_add1(BITJOIN,2910)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i32_replace_phi5097_add1_q = i_llvm_fpga_ffwd_dest_i32_replace_phi5097_add1_out_dest_data_out_33_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i32_replace_phi5097_add1(BITSELECT,2911)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i32_replace_phi5097_add1_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i32_replace_phi5097_add1_q[31:0]);

    // bubble_join_i_llvm_fpga_pop_i32_pop7_add48(BITJOIN,3017)
    assign bubble_join_i_llvm_fpga_pop_i32_pop7_add48_q = i_llvm_fpga_pop_i32_pop7_add48_out_data_out;

    // bubble_select_i_llvm_fpga_pop_i32_pop7_add48(BITSELECT,3018)
    assign bubble_select_i_llvm_fpga_pop_i32_pop7_add48_b = $unsigned(bubble_join_i_llvm_fpga_pop_i32_pop7_add48_q[31:0]);

    // i_replace_phi96_add58(MUX,488)@53
    assign i_replace_phi96_add58_s = redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_q;
    always @(i_replace_phi96_add58_s or bubble_select_i_llvm_fpga_pop_i32_pop7_add48_b or bubble_select_i_llvm_fpga_ffwd_dest_i32_replace_phi5097_add1_b)
    begin
        unique case (i_replace_phi96_add58_s)
            1'b0 : i_replace_phi96_add58_q = bubble_select_i_llvm_fpga_pop_i32_pop7_add48_b;
            1'b1 : i_replace_phi96_add58_q = bubble_select_i_llvm_fpga_ffwd_dest_i32_replace_phi5097_add1_b;
            default : i_replace_phi96_add58_q = 32'b0;
        endcase
    end

    // bubble_join_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo(BITJOIN,3051)
    assign bubble_join_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_q = redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_data_out;

    // bubble_select_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo(BITSELECT,3052)
    assign bubble_select_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_b = $unsigned(bubble_join_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_q[0:0]);

    // i_unnamed_add231(MUX,549)@53
    assign i_unnamed_add231_s = bubble_select_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_b;
    always @(i_unnamed_add231_s or i_replace_phi96_add58_q or i_replace_phi99_add57_q)
    begin
        unique case (i_unnamed_add231_s)
            1'b0 : i_unnamed_add231_q = i_replace_phi96_add58_q;
            1'b1 : i_unnamed_add231_q = i_replace_phi99_add57_q;
            default : i_unnamed_add231_q = 32'b0;
        endcase
    end

    // bubble_join_i_llvm_fpga_ffwd_dest_i32_i_044393_add3(BITJOIN,2895)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i32_i_044393_add3_q = i_llvm_fpga_ffwd_dest_i32_i_044393_add3_out_dest_data_out_32_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i32_i_044393_add3(BITSELECT,2896)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i32_i_044393_add3_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i32_i_044393_add3_q[31:0]);

    // i_cmp_i116_add245(COMPARE,381)@53
    assign i_cmp_i116_add245_a = {2'b00, bubble_select_i_llvm_fpga_ffwd_dest_i32_i_044393_add3_b};
    assign i_cmp_i116_add245_b = {2'b00, i_unnamed_add231_q};
    assign i_cmp_i116_add245_o = $unsigned(i_cmp_i116_add245_a) - $unsigned(i_cmp_i116_add245_b);
    assign i_cmp_i116_add245_c[0] = i_cmp_i116_add245_o[33];

    // i_cmp2_i126_add232(COMPARE,346)@53
    assign i_cmp2_i126_add232_a = {2'b00, redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_q};
    assign i_cmp2_i126_add232_b = {2'b00, i_replace_phi96_add58_q};
    assign i_cmp2_i126_add232_o = $unsigned(i_cmp2_i126_add232_a) - $unsigned(i_cmp2_i126_add232_b);
    assign i_cmp2_i126_add232_c[0] = i_cmp2_i126_add232_o[33];

    // i_or_cond432_add251(LOGICAL,480)@53 + 1
    assign i_or_cond432_add251_qi = i_cmp2_i126_add232_c & i_cmp_i116_add245_c;
    dspba_delay_ver #( .width(1), .depth(1), .reset_kind("ASYNC"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_or_cond432_add251_delay ( .xin(i_or_cond432_add251_qi), .xout(i_or_cond432_add251_q), .ena(SE_i_or_cond432_add251_backEN[0]), .clk(clock), .aclr(resetn) );

    // i_cmp11_i153_add230(COMPARE,342)@53
    assign i_cmp11_i153_add230_a = {2'b00, redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_q};
    assign i_cmp11_i153_add230_b = {2'b00, i_replace_phi99_add57_q};
    assign i_cmp11_i153_add230_o = $unsigned(i_cmp11_i153_add230_a) - $unsigned(i_cmp11_i153_add230_b);
    assign i_cmp11_i153_add230_c[0] = i_cmp11_i153_add230_o[33];

    // i_or_cond433_add252(LOGICAL,481)@53 + 1
    assign i_or_cond433_add252_qi = i_cmp11_i153_add230_c & i_cmp_i116_add245_c;
    dspba_delay_ver #( .width(1), .depth(1), .reset_kind("ASYNC"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_or_cond433_add252_delay ( .xin(i_or_cond433_add252_qi), .xout(i_or_cond433_add252_q), .ena(SE_i_or_cond433_add252_backEN[0]), .clk(clock), .aclr(resetn) );

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_12(STALLENABLE,3974)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_12_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_12_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_12_backStall = i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_12_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_12_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_12_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11(BLACKBOX,406)@53
    // in in_stall_in@20000000
    // out out_dest_data_out_3_0@54
    // out out_stall_out@20000000
    // out out_valid_out@54
    add_i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_0 thei_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11 (
        .in_intel_reserved_ffwd_3_0(in_intel_reserved_ffwd_3_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_12_V0),
        .out_dest_data_out_3_0(i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_out_dest_data_out_3_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11(BITJOIN,2876)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_q = i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_out_dest_data_out_3_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11(BITSELECT,2877)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_q[0:0]);

    // SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11(STALLENABLE,3337)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_V0 = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_backStall = SR_SE_i_unnamed_add258_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_wireValid = i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_out_valid_out;

    // SE_i_unnamed_add258(STALLENABLE,3542)
    // Valid signal propagation
    assign SE_i_unnamed_add258_V0 = SE_i_unnamed_add258_R_v_0;
    // Stall signal propagation
    assign SE_i_unnamed_add258_s_tv_0 = redist22_i_unnamed_add258_q_32_fifo_stall_out & SE_i_unnamed_add258_R_v_0;
    // Backward Enable generation
    assign SE_i_unnamed_add258_backEN = ~ (SE_i_unnamed_add258_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_unnamed_add258_v_s_0 = SE_i_unnamed_add258_backEN & SR_SE_i_unnamed_add258_V;
    // Backward Stall generation
    assign SE_i_unnamed_add258_backStall = ~ (SE_i_unnamed_add258_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_unnamed_add258_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_unnamed_add258_backEN == 1'b0)
            begin
                SE_i_unnamed_add258_R_v_0 <= SE_i_unnamed_add258_R_v_0 & SE_i_unnamed_add258_s_tv_0;
            end
            else
            begin
                SE_i_unnamed_add258_R_v_0 <= SE_i_unnamed_add258_v_s_0;
            end

        end
    end

    // SR_SE_i_unnamed_add258(STALLREG,4447)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_i_unnamed_add258_r_valid <= 1'b0;
            SR_SE_i_unnamed_add258_r_data0 <= 1'bx;
            SR_SE_i_unnamed_add258_r_data1 <= 1'bx;
            SR_SE_i_unnamed_add258_r_data2 <= 1'bx;
        end
        else
        begin
            // Valid
            SR_SE_i_unnamed_add258_r_valid <= SE_i_unnamed_add258_backStall & (SR_SE_i_unnamed_add258_r_valid | SR_SE_i_unnamed_add258_i_valid);

            if (SR_SE_i_unnamed_add258_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_i_unnamed_add258_r_data0 <= $unsigned(bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_b);
                SR_SE_i_unnamed_add258_r_data1 <= i_or_cond433_add252_q;
                SR_SE_i_unnamed_add258_r_data2 <= i_or_cond432_add251_q;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_i_unnamed_add258_and0 = SE_i_or_cond432_add251_V1;
    assign SR_SE_i_unnamed_add258_and1 = SE_i_or_cond433_add252_V0 & SR_SE_i_unnamed_add258_and0;
    assign SR_SE_i_unnamed_add258_i_valid = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_V0 & SR_SE_i_unnamed_add258_and1;
    // Stall signal propagation
    assign SR_SE_i_unnamed_add258_backStall = SR_SE_i_unnamed_add258_r_valid | ~ (SR_SE_i_unnamed_add258_i_valid);

    // Valid
    assign SR_SE_i_unnamed_add258_V = SR_SE_i_unnamed_add258_r_valid == 1'b1 ? SR_SE_i_unnamed_add258_r_valid : SR_SE_i_unnamed_add258_i_valid;

    // Data0
    assign SR_SE_i_unnamed_add258_D0 = SR_SE_i_unnamed_add258_r_valid == 1'b1 ? SR_SE_i_unnamed_add258_r_data0 : bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i_i32_add11_b;
    // Data1
    assign SR_SE_i_unnamed_add258_D1 = SR_SE_i_unnamed_add258_r_valid == 1'b1 ? SR_SE_i_unnamed_add258_r_data1 : i_or_cond433_add252_q;
    // Data2
    assign SR_SE_i_unnamed_add258_D2 = SR_SE_i_unnamed_add258_r_valid == 1'b1 ? SR_SE_i_unnamed_add258_r_data2 : i_or_cond432_add251_q;

    // SE_i_or_cond433_add252(STALLENABLE,3472)
    // Valid signal propagation
    assign SE_i_or_cond433_add252_V0 = SE_i_or_cond433_add252_R_v_0;
    // Stall signal propagation
    assign SE_i_or_cond433_add252_s_tv_0 = SR_SE_i_unnamed_add258_backStall & SE_i_or_cond433_add252_R_v_0;
    // Backward Enable generation
    assign SE_i_or_cond433_add252_backEN = ~ (SE_i_or_cond433_add252_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_or_cond433_add252_and0 = SE_i_cmp11_i153_add230_V0 & SE_i_or_cond433_add252_backEN;
    assign SE_i_or_cond433_add252_v_s_0 = SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_V1 & SE_i_or_cond433_add252_and0;
    // Backward Stall generation
    assign SE_i_or_cond433_add252_backStall = ~ (SE_i_or_cond433_add252_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_or_cond433_add252_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_or_cond433_add252_backEN == 1'b0)
            begin
                SE_i_or_cond433_add252_R_v_0 <= SE_i_or_cond433_add252_R_v_0 & SE_i_or_cond433_add252_s_tv_0;
            end
            else
            begin
                SE_i_or_cond433_add252_R_v_0 <= SE_i_or_cond433_add252_v_s_0;
            end

        end
    end

    // SE_out_i_llvm_fpga_pop_i32_pop6_add47(STALLENABLE,3439)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_i_llvm_fpga_pop_i32_pop6_add47_fromReg0 <= '0;
            SE_out_i_llvm_fpga_pop_i32_pop6_add47_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_i_llvm_fpga_pop_i32_pop6_add47_fromReg0 <= SE_out_i_llvm_fpga_pop_i32_pop6_add47_toReg0;
            // Successor 1
            SE_out_i_llvm_fpga_pop_i32_pop6_add47_fromReg1 <= SE_out_i_llvm_fpga_pop_i32_pop6_add47_toReg1;
        end
    end
    // Input Stall processing
    assign SE_out_i_llvm_fpga_pop_i32_pop6_add47_consumed0 = (~ (SE_i_cmp11_i153_add230_backStall) & SE_out_i_llvm_fpga_pop_i32_pop6_add47_wireValid) | SE_out_i_llvm_fpga_pop_i32_pop6_add47_fromReg0;
    assign SE_out_i_llvm_fpga_pop_i32_pop6_add47_consumed1 = (~ (SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_backStall) & SE_out_i_llvm_fpga_pop_i32_pop6_add47_wireValid) | SE_out_i_llvm_fpga_pop_i32_pop6_add47_fromReg1;
    // Consuming
    assign SE_out_i_llvm_fpga_pop_i32_pop6_add47_StallValid = SE_out_i_llvm_fpga_pop_i32_pop6_add47_backStall & SE_out_i_llvm_fpga_pop_i32_pop6_add47_wireValid;
    assign SE_out_i_llvm_fpga_pop_i32_pop6_add47_toReg0 = SE_out_i_llvm_fpga_pop_i32_pop6_add47_StallValid & SE_out_i_llvm_fpga_pop_i32_pop6_add47_consumed0;
    assign SE_out_i_llvm_fpga_pop_i32_pop6_add47_toReg1 = SE_out_i_llvm_fpga_pop_i32_pop6_add47_StallValid & SE_out_i_llvm_fpga_pop_i32_pop6_add47_consumed1;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_pop_i32_pop6_add47_or0 = SE_out_i_llvm_fpga_pop_i32_pop6_add47_consumed0;
    assign SE_out_i_llvm_fpga_pop_i32_pop6_add47_wireStall = ~ (SE_out_i_llvm_fpga_pop_i32_pop6_add47_consumed1 & SE_out_i_llvm_fpga_pop_i32_pop6_add47_or0);
    assign SE_out_i_llvm_fpga_pop_i32_pop6_add47_backStall = SE_out_i_llvm_fpga_pop_i32_pop6_add47_wireStall;
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_pop_i32_pop6_add47_V0 = SE_out_i_llvm_fpga_pop_i32_pop6_add47_wireValid & ~ (SE_out_i_llvm_fpga_pop_i32_pop6_add47_fromReg0);
    assign SE_out_i_llvm_fpga_pop_i32_pop6_add47_V1 = SE_out_i_llvm_fpga_pop_i32_pop6_add47_wireValid & ~ (SE_out_i_llvm_fpga_pop_i32_pop6_add47_fromReg1);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_pop_i32_pop6_add47_and0 = i_llvm_fpga_pop_i32_pop6_add47_out_valid_out;
    assign SE_out_i_llvm_fpga_pop_i32_pop6_add47_and1 = i_llvm_fpga_ffwd_dest_i32_replace_phi100_add0_out_valid_out & SE_out_i_llvm_fpga_pop_i32_pop6_add47_and0;
    assign SE_out_i_llvm_fpga_pop_i32_pop6_add47_wireValid = SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_V1 & SE_out_i_llvm_fpga_pop_i32_pop6_add47_and1;

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_4(STALLENABLE,3958)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_4_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_4_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_4_backStall = i_llvm_fpga_ffwd_dest_i32_i_044393_add3_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_4_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_4_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_4_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i32_i_044393_add3(BLACKBOX,417)@52
    // in in_stall_in@20000000
    // out out_dest_data_out_32_0@53
    // out out_stall_out@20000000
    // out out_valid_out@53
    add_i_llvm_fpga_ffwd_dest_i32_i_044393_0 thei_llvm_fpga_ffwd_dest_i32_i_044393_add3 (
        .in_intel_reserved_ffwd_32_0(in_intel_reserved_ffwd_32_0),
        .in_stall_in(SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_4_V0),
        .out_dest_data_out_32_0(i_llvm_fpga_ffwd_dest_i32_i_044393_add3_out_dest_data_out_32_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i32_i_044393_add3_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i32_i_044393_add3_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2(BITJOIN,2883)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_q = i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2(BITSELECT,2884)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_q[0:0]);

    // SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2(STALLENABLE,3343)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_V0 = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_backStall = redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_stall_out | ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_wireValid = i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_valid_out;

    // redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo(STALLFIFO,2705)
    assign redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_valid_in = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_V0;
    assign redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_stall_in = SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_backStall;
    assign redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_data_in = bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_b;
    assign redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_valid_in_bitsignaltemp = redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_valid_in[0];
    assign redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_stall_in_bitsignaltemp = redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_stall_in[0];
    assign redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_valid_out[0] = redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_valid_out_bitsignaltemp;
    assign redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_stall_out[0] = redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(52),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(1),
        .IMPL("ram")
    ) theredist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo (
        .valid_in(redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_valid_in_bitsignaltemp),
        .stall_in(redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_stall_in_bitsignaltemp),
        .data_in(bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_b),
        .valid_out(redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_valid_out_bitsignaltemp),
        .stall_out(redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_stall_out_bitsignaltemp),
        .data_out(redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo(STALLENABLE,3843)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_fromReg0 <= '0;
            SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_fromReg0 <= SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_toReg0;
            // Successor 1
            SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_fromReg1 <= SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_toReg1;
        end
    end
    // Input Stall processing
    assign SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_consumed0 = (~ (SE_i_or_cond432_add251_backStall) & SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_wireValid) | SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_fromReg0;
    assign SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_consumed1 = (~ (SE_i_or_cond433_add252_backStall) & SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_wireValid) | SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_fromReg1;
    // Consuming
    assign SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_StallValid = SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_backStall & SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_wireValid;
    assign SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_toReg0 = SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_StallValid & SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_consumed0;
    assign SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_toReg1 = SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_StallValid & SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_consumed1;
    // Backward Stall generation
    assign SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_or0 = SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_consumed0;
    assign SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_wireStall = ~ (SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_consumed1 & SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_or0);
    assign SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_backStall = SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_wireStall;
    // Valid signal propagation
    assign SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_V0 = SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_wireValid & ~ (SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_fromReg0);
    assign SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_V1 = SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_wireValid & ~ (SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_fromReg1);
    // Computing multiple Valid(s)
    assign SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_and0 = redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_valid_out;
    assign SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_and1 = i_llvm_fpga_ffwd_dest_i32_i_044393_add3_out_valid_out & SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_and0;
    assign SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_and2 = SE_out_i_llvm_fpga_pop_i32_pop7_add48_V1 & SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_and1;
    assign SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_wireValid = SE_out_i_llvm_fpga_pop_i32_pop6_add47_V1 & SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_and2;

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_2(STALLENABLE,3954)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_2_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_2_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_2_backStall = i_llvm_fpga_ffwd_dest_i32_replace_phi5097_add1_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_2_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_2_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_2_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i32_replace_phi5097_add1(BLACKBOX,422)@52
    // in in_stall_in@20000000
    // out out_dest_data_out_33_0@53
    // out out_stall_out@20000000
    // out out_valid_out@53
    add_i_llvm_fpga_ffwd_dest_i32_replace_phi5097_0 thei_llvm_fpga_ffwd_dest_i32_replace_phi5097_add1 (
        .in_intel_reserved_ffwd_33_0(in_intel_reserved_ffwd_33_0),
        .in_stall_in(SE_out_i_llvm_fpga_pop_i32_pop7_add48_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_2_V0),
        .out_dest_data_out_33_0(i_llvm_fpga_ffwd_dest_i32_replace_phi5097_add1_out_dest_data_out_33_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i32_replace_phi5097_add1_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i32_replace_phi5097_add1_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_push_i32_push7_add277(STALLENABLE,3463)
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_push_i32_push7_add277_backStall = $unsigned(1'b0);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_push_i32_push7_add277_wireValid = i_llvm_fpga_push_i32_push7_add277_out_valid_out;

    // i_llvm_fpga_push_i32_push7_add277(BLACKBOX,469)@155
    // in in_stall_in@20000000
    // out out_data_out@156
    // out out_feedback_out_7@20000000
    // out out_feedback_valid_out_7@20000000
    // out out_stall_out@20000000
    // out out_valid_out@156
    add_i_llvm_fpga_push_i32_push7_0 thei_llvm_fpga_push_i32_push7_add277 (
        .in_data_in(bubble_select_i_llvm_fpga_mem_lm13212_add275_b),
        .in_feedback_stall_in_7(i_llvm_fpga_pop_i32_pop7_add48_out_feedback_stall_out_7),
        .in_keep_going126(bubble_select_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_b),
        .in_stall_in(SE_out_i_llvm_fpga_push_i32_push7_add277_backStall),
        .in_valid_in(SE_i_lm13212_toi1_intcast_add278_sel_x_V1),
        .out_data_out(),
        .out_feedback_out_7(i_llvm_fpga_push_i32_push7_add277_out_feedback_out_7),
        .out_feedback_valid_out_7(i_llvm_fpga_push_i32_push7_add277_out_feedback_valid_out_7),
        .out_stall_out(i_llvm_fpga_push_i32_push7_add277_out_stall_out),
        .out_valid_out(i_llvm_fpga_push_i32_push7_add277_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_pop_i32_pop7_add48(BLACKBOX,458)@52
    // in in_stall_in@20000000
    // out out_data_out@53
    // out out_feedback_stall_out_7@20000000
    // out out_stall_out@20000000
    // out out_valid_out@53
    add_i_llvm_fpga_pop_i32_pop7_0 thei_llvm_fpga_pop_i32_pop7_add48 (
        .in_data_in(c_i32_0297_q),
        .in_dir(bubble_select_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_b),
        .in_feedback_in_7(i_llvm_fpga_push_i32_push7_add277_out_feedback_out_7),
        .in_feedback_valid_in_7(i_llvm_fpga_push_i32_push7_add277_out_feedback_valid_out_7),
        .in_predicate(GND_q),
        .in_stall_in(SE_out_i_llvm_fpga_pop_i32_pop7_add48_backStall),
        .in_valid_in(SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_V2),
        .out_data_out(i_llvm_fpga_pop_i32_pop7_add48_out_data_out),
        .out_feedback_stall_out_7(i_llvm_fpga_pop_i32_pop7_add48_out_feedback_stall_out_7),
        .out_stall_out(i_llvm_fpga_pop_i32_pop7_add48_out_stall_out),
        .out_valid_out(i_llvm_fpga_pop_i32_pop7_add48_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_pop_i32_pop7_add48(STALLENABLE,3441)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_i_llvm_fpga_pop_i32_pop7_add48_fromReg0 <= '0;
            SE_out_i_llvm_fpga_pop_i32_pop7_add48_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_i_llvm_fpga_pop_i32_pop7_add48_fromReg0 <= SE_out_i_llvm_fpga_pop_i32_pop7_add48_toReg0;
            // Successor 1
            SE_out_i_llvm_fpga_pop_i32_pop7_add48_fromReg1 <= SE_out_i_llvm_fpga_pop_i32_pop7_add48_toReg1;
        end
    end
    // Input Stall processing
    assign SE_out_i_llvm_fpga_pop_i32_pop7_add48_consumed0 = (~ (SE_i_cmp2_i126_add232_backStall) & SE_out_i_llvm_fpga_pop_i32_pop7_add48_wireValid) | SE_out_i_llvm_fpga_pop_i32_pop7_add48_fromReg0;
    assign SE_out_i_llvm_fpga_pop_i32_pop7_add48_consumed1 = (~ (SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_backStall) & SE_out_i_llvm_fpga_pop_i32_pop7_add48_wireValid) | SE_out_i_llvm_fpga_pop_i32_pop7_add48_fromReg1;
    // Consuming
    assign SE_out_i_llvm_fpga_pop_i32_pop7_add48_StallValid = SE_out_i_llvm_fpga_pop_i32_pop7_add48_backStall & SE_out_i_llvm_fpga_pop_i32_pop7_add48_wireValid;
    assign SE_out_i_llvm_fpga_pop_i32_pop7_add48_toReg0 = SE_out_i_llvm_fpga_pop_i32_pop7_add48_StallValid & SE_out_i_llvm_fpga_pop_i32_pop7_add48_consumed0;
    assign SE_out_i_llvm_fpga_pop_i32_pop7_add48_toReg1 = SE_out_i_llvm_fpga_pop_i32_pop7_add48_StallValid & SE_out_i_llvm_fpga_pop_i32_pop7_add48_consumed1;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_pop_i32_pop7_add48_or0 = SE_out_i_llvm_fpga_pop_i32_pop7_add48_consumed0;
    assign SE_out_i_llvm_fpga_pop_i32_pop7_add48_wireStall = ~ (SE_out_i_llvm_fpga_pop_i32_pop7_add48_consumed1 & SE_out_i_llvm_fpga_pop_i32_pop7_add48_or0);
    assign SE_out_i_llvm_fpga_pop_i32_pop7_add48_backStall = SE_out_i_llvm_fpga_pop_i32_pop7_add48_wireStall;
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_pop_i32_pop7_add48_V0 = SE_out_i_llvm_fpga_pop_i32_pop7_add48_wireValid & ~ (SE_out_i_llvm_fpga_pop_i32_pop7_add48_fromReg0);
    assign SE_out_i_llvm_fpga_pop_i32_pop7_add48_V1 = SE_out_i_llvm_fpga_pop_i32_pop7_add48_wireValid & ~ (SE_out_i_llvm_fpga_pop_i32_pop7_add48_fromReg1);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_pop_i32_pop7_add48_and0 = i_llvm_fpga_pop_i32_pop7_add48_out_valid_out;
    assign SE_out_i_llvm_fpga_pop_i32_pop7_add48_and1 = i_llvm_fpga_ffwd_dest_i32_replace_phi5097_add1_out_valid_out & SE_out_i_llvm_fpga_pop_i32_pop7_add48_and0;
    assign SE_out_i_llvm_fpga_pop_i32_pop7_add48_wireValid = SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_V0 & SE_out_i_llvm_fpga_pop_i32_pop7_add48_and1;

    // SE_i_cmp2_i126_add232(STALLENABLE,3272)
    // Valid signal propagation
    assign SE_i_cmp2_i126_add232_V0 = SE_i_cmp2_i126_add232_wireValid;
    // Backward Stall generation
    assign SE_i_cmp2_i126_add232_backStall = SE_i_or_cond432_add251_backStall | ~ (SE_i_cmp2_i126_add232_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_cmp2_i126_add232_and0 = SE_out_i_llvm_fpga_pop_i32_pop7_add48_V0;
    assign SE_i_cmp2_i126_add232_wireValid = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_V1 & SE_i_cmp2_i126_add232_and0;

    // SE_i_cmp11_i153_add230(STALLENABLE,3268)
    // Valid signal propagation
    assign SE_i_cmp11_i153_add230_V0 = SE_i_cmp11_i153_add230_wireValid;
    // Backward Stall generation
    assign SE_i_cmp11_i153_add230_backStall = SE_i_or_cond433_add252_backStall | ~ (SE_i_cmp11_i153_add230_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_cmp11_i153_add230_and0 = SE_out_i_llvm_fpga_pop_i32_pop6_add47_V0;
    assign SE_i_cmp11_i153_add230_wireValid = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_V0 & SE_i_cmp11_i153_add230_and0;

    // SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2(STALLENABLE,3782)
    // Valid signal propagation
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_V0 = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_0;
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_V1 = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_1;
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_V2 = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_2;
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_V3 = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_3;
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_V4 = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_4;
    // Stall signal propagation
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_s_tv_0 = SE_i_cmp11_i153_add230_backStall & SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_0;
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_s_tv_1 = SE_i_cmp2_i126_add232_backStall & SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_1;
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_s_tv_2 = redist57_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_102_fifo_stall_out & SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_2;
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_s_tv_3 = SE_i_arrayidx17_i159_add0_dupName_0_add_x_backStall & SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_3;
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_s_tv_4 = SE_i_arrayidx17_i_add0_dupName_0_add_x_backStall & SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_4;
    // Backward Enable generation
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_or0 = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_s_tv_0;
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_or1 = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_s_tv_1 | SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_or0;
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_or2 = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_s_tv_2 | SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_or1;
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_or3 = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_s_tv_3 | SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_or2;
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_backEN = ~ (SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_s_tv_4 | SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_or3);
    // Determine whether to write valid data into the first register stage
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_v_s_0 = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_backEN & SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_V0;
    // Backward Stall generation
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_backStall = ~ (SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_0 <= 1'b0;
            SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_1 <= 1'b0;
            SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_2 <= 1'b0;
            SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_3 <= 1'b0;
            SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_4 <= 1'b0;
        end
        else
        begin
            if (SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_backEN == 1'b0)
            begin
                SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_0 <= SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_0 & SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_s_tv_0;
            end
            else
            begin
                SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_0 <= SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_v_s_0;
            end

            if (SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_backEN == 1'b0)
            begin
                SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_1 <= SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_1 & SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_s_tv_1;
            end
            else
            begin
                SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_1 <= SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_v_s_0;
            end

            if (SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_backEN == 1'b0)
            begin
                SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_2 <= SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_2 & SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_s_tv_2;
            end
            else
            begin
                SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_2 <= SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_v_s_0;
            end

            if (SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_backEN == 1'b0)
            begin
                SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_3 <= SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_3 & SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_s_tv_3;
            end
            else
            begin
                SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_3 <= SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_v_s_0;
            end

            if (SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_backEN == 1'b0)
            begin
                SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_4 <= SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_4 & SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_s_tv_4;
            end
            else
            begin
                SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_R_v_4 <= SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_v_s_0;
            end

        end
    end

    // SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1(STALLENABLE,3781)
    // Valid signal propagation
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_V0 = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_R_v_0;
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_V1 = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_R_v_1;
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_V2 = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_R_v_2;
    // Stall signal propagation
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_s_tv_0 = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_2_backStall & SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_R_v_0;
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_s_tv_1 = SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_c46827_add31_backStall & SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_R_v_1;
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_s_tv_2 = SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_backStall & SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_R_v_2;
    // Backward Enable generation
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_or0 = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_s_tv_0;
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_or1 = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_s_tv_1 | SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_or0;
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_backEN = ~ (SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_s_tv_2 | SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_or1);
    // Determine whether to write valid data into the first register stage
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_v_s_0 = SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_backEN & SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_V;
    // Backward Stall generation
    assign SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_backStall = ~ (SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_R_v_0 <= 1'b0;
            SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_R_v_1 <= 1'b0;
            SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_R_v_2 <= 1'b0;
        end
        else
        begin
            if (SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_backEN == 1'b0)
            begin
                SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_R_v_0 <= SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_R_v_0 & SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_s_tv_0;
            end
            else
            begin
                SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_R_v_0 <= SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_v_s_0;
            end

            if (SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_backEN == 1'b0)
            begin
                SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_R_v_1 <= SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_R_v_1 & SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_s_tv_1;
            end
            else
            begin
                SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_R_v_1 <= SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_v_s_0;
            end

            if (SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_backEN == 1'b0)
            begin
                SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_R_v_2 <= SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_R_v_2 & SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_s_tv_2;
            end
            else
            begin
                SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_R_v_2 <= SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_v_s_0;
            end

        end
    end

    // SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1(STALLREG,4445)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_valid <= 1'b0;
            SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
            SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_data1 <= 62'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
            SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_data2 <= 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
            SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_data3 <= 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_valid <= SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_backStall & (SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_valid | SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_i_valid);

            if (SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_data0 <= $unsigned(redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_0_q);
                SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_data1 <= $unsigned(redist176_i_arrayidx17_i159_add0_narrow_x_b_3_0_q);
                SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_data2 <= i_arrayidx5_i_add0_trunc_sel_x_b;
                SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_data3 <= i_arrayidx5_i132_add0_trunc_sel_x_b;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_i_valid = SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_V0;
    // Stall signal propagation
    assign SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_backStall = SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_valid | ~ (SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_i_valid);

    // Valid
    assign SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_V = SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_valid == 1'b1 ? SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_valid : SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_i_valid;

    // Data0
    assign SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_D0 = SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_valid == 1'b1 ? SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_data0 : redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_0_q;
    // Data1
    assign SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_D1 = SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_valid == 1'b1 ? SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_data1 : redist176_i_arrayidx17_i159_add0_narrow_x_b_3_0_q;
    // Data2
    assign SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_D2 = SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_valid == 1'b1 ? SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_data2 : i_arrayidx5_i_add0_trunc_sel_x_b;
    // Data3
    assign SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_D3 = SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_valid == 1'b1 ? SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_r_data3 : i_arrayidx5_i132_add0_trunc_sel_x_b;

    // SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0(STALLENABLE,3658)
    // Valid signal propagation
    assign SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_V0 = SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_R_v_0;
    // Stall signal propagation
    assign SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_s_tv_0 = SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_backStall & SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_R_v_0;
    // Backward Enable generation
    assign SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_backEN = ~ (SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_v_s_0 = SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_backEN & SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_V0;
    // Backward Stall generation
    assign SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_backStall = ~ (SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_backEN == 1'b0)
            begin
                SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_R_v_0 <= SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_R_v_0 & SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_s_tv_0;
            end
            else
            begin
                SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_R_v_0 <= SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_v_s_0;
            end

        end
    end

    // SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1(STALLENABLE,3779)
    // Valid signal propagation
    assign SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_V0 = SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_R_v_0;
    // Stall signal propagation
    assign SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_s_tv_0 = SE_lev1_a0sumAHighB_uid1660_i_arrayidx5_i132_add0_mult_x_im0_backStall & SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_R_v_0;
    // Backward Enable generation
    assign SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_backEN = ~ (SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_v_s_0 = SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_backEN & SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_V0;
    // Backward Stall generation
    assign SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_backStall = ~ (SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_backEN == 1'b0)
            begin
                SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_R_v_0 <= SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_R_v_0 & SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_s_tv_0;
            end
            else
            begin
                SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_R_v_0 <= SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_v_s_0;
            end

        end
    end

    // SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0(STALLENABLE,3778)
    // Valid signal propagation
    assign SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_V0 = SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_R_v_0;
    // Stall signal propagation
    assign SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_s_tv_0 = SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_1_backStall & SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_R_v_0;
    // Backward Enable generation
    assign SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_backEN = ~ (SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_v_s_0 = SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_backEN & SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_V1;
    // Backward Stall generation
    assign SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_backStall = ~ (SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_backEN == 1'b0)
            begin
                SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_R_v_0 <= SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_R_v_0 & SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_s_tv_0;
            end
            else
            begin
                SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_R_v_0 <= SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_v_s_0;
            end

        end
    end

    // c_i8_265(CONSTANT,326)
    assign c_i8_265_q = $unsigned(8'b00000010);

    // SE_i_unnamed_add208(STALLENABLE,3536)
    // Valid signal propagation
    assign SE_i_unnamed_add208_V0 = SE_i_unnamed_add208_R_v_0;
    // Stall signal propagation
    assign SE_i_unnamed_add208_s_tv_0 = SE_i_sub4_i_29_i177_add209_backStall & SE_i_unnamed_add208_R_v_0;
    // Backward Enable generation
    assign SE_i_unnamed_add208_backEN = ~ (SE_i_unnamed_add208_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_unnamed_add208_and0 = SE_i_cmp3_i_29_i176_add207_V0 & SE_i_unnamed_add208_backEN;
    assign SE_i_unnamed_add208_v_s_0 = SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_V1 & SE_i_unnamed_add208_and0;
    // Backward Stall generation
    assign SE_i_unnamed_add208_backStall = ~ (SE_i_unnamed_add208_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_unnamed_add208_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_unnamed_add208_backEN == 1'b0)
            begin
                SE_i_unnamed_add208_R_v_0 <= SE_i_unnamed_add208_R_v_0 & SE_i_unnamed_add208_s_tv_0;
            end
            else
            begin
                SE_i_unnamed_add208_R_v_0 <= SE_i_unnamed_add208_v_s_0;
            end

        end
    end

    // SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0(STALLENABLE,3872)
    // Valid signal propagation
    assign SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_V0 = SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_R_v_0;
    // Stall signal propagation
    assign SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_s_tv_0 = SE_i_sub4_i_29_i177_add209_backStall & SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_R_v_0;
    // Backward Enable generation
    assign SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_backEN = ~ (SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_v_s_0 = SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_backEN & SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_V1;
    // Backward Stall generation
    assign SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_backStall = ~ (SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_backEN == 1'b0)
            begin
                SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_R_v_0 & SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_s_tv_0;
            end
            else
            begin
                SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_v_s_0;
            end

        end
    end

    // SE_i_cmp3_i_28_i170_add202(STALLENABLE,3294)
    // Valid signal propagation
    assign SE_i_cmp3_i_28_i170_add202_V0 = SE_i_cmp3_i_28_i170_add202_R_v_0;
    // Stall signal propagation
    assign SE_i_cmp3_i_28_i170_add202_s_tv_0 = SE_i_unnamed_add203_backStall & SE_i_cmp3_i_28_i170_add202_R_v_0;
    // Backward Enable generation
    assign SE_i_cmp3_i_28_i170_add202_backEN = ~ (SE_i_cmp3_i_28_i170_add202_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_cmp3_i_28_i170_add202_and0 = SE_i_sub4_i_27_i165_add199_V0 & SE_i_cmp3_i_28_i170_add202_backEN;
    assign SE_i_cmp3_i_28_i170_add202_v_s_0 = SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_V0 & SE_i_cmp3_i_28_i170_add202_and0;
    // Backward Stall generation
    assign SE_i_cmp3_i_28_i170_add202_backStall = ~ (SE_i_cmp3_i_28_i170_add202_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_cmp3_i_28_i170_add202_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_cmp3_i_28_i170_add202_backEN == 1'b0)
            begin
                SE_i_cmp3_i_28_i170_add202_R_v_0 <= SE_i_cmp3_i_28_i170_add202_R_v_0 & SE_i_cmp3_i_28_i170_add202_s_tv_0;
            end
            else
            begin
                SE_i_cmp3_i_28_i170_add202_R_v_0 <= SE_i_cmp3_i_28_i170_add202_v_s_0;
            end

        end
    end

    // redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0(REG,2697)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_backEN == 1'b1)
        begin
            redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_q <= $unsigned(SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_D0);
        end
    end

    // SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0(STALLENABLE,3875)
    // Valid signal propagation
    assign SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_V0 = SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_R_v_0;
    // Stall signal propagation
    assign SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_s_tv_0 = SE_i_sub4_i_27_i165_add199_backStall & SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_R_v_0;
    // Backward Enable generation
    assign SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_backEN = ~ (SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_v_s_0 = SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_backEN & SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_V;
    // Backward Stall generation
    assign SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_backStall = ~ (SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_backEN == 1'b0)
            begin
                SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_R_v_0 & SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_s_tv_0;
            end
            else
            begin
                SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_v_s_0;
            end

        end
    end

    // SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0(STALLREG,4489)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_r_valid <= 1'b0;
            SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_r_valid <= SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_backStall & (SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_r_valid | SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_i_valid);

            if (SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_r_data0 <= $unsigned(redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_i_valid = SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_V1;
    // Stall signal propagation
    assign SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_backStall = SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_r_valid | ~ (SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_i_valid);

    // Valid
    assign SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_V = SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_r_valid == 1'b1 ? SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_r_valid : SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_i_valid;

    assign SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_D0 = SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_r_valid == 1'b1 ? SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_r_data0 : redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_q;

    // SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0(STALLENABLE,3874)
    // Valid signal propagation
    assign SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_V0 = SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_V1 = SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_R_v_1;
    // Stall signal propagation
    assign SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_cmp3_i_27_i164_add197_backStall & SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_s_tv_1 = SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_backStall & SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_R_v_1;
    // Backward Enable generation
    assign SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_or0 = SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_s_tv_0;
    assign SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_s_tv_1 | SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_backEN & SE_i_unnamed_add193_V0;
    // Backward Stall generation
    assign SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
            SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_v_s_0;
            end

            if (SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_R_v_1 & SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_s_tv_1;
            end
            else
            begin
                SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // SE_i_cmp3_i_24_i146_add182(STALLENABLE,3290)
    // Valid signal propagation
    assign SE_i_cmp3_i_24_i146_add182_V0 = SE_i_cmp3_i_24_i146_add182_R_v_0;
    // Stall signal propagation
    assign SE_i_cmp3_i_24_i146_add182_s_tv_0 = SE_i_unnamed_add183_backStall & SE_i_cmp3_i_24_i146_add182_R_v_0;
    // Backward Enable generation
    assign SE_i_cmp3_i_24_i146_add182_backEN = ~ (SE_i_cmp3_i_24_i146_add182_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_cmp3_i_24_i146_add182_and0 = SE_i_sub4_i_23_i141_add179_V0 & SE_i_cmp3_i_24_i146_add182_backEN;
    assign SE_i_cmp3_i_24_i146_add182_v_s_0 = SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_V0 & SE_i_cmp3_i_24_i146_add182_and0;
    // Backward Stall generation
    assign SE_i_cmp3_i_24_i146_add182_backStall = ~ (SE_i_cmp3_i_24_i146_add182_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_cmp3_i_24_i146_add182_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_cmp3_i_24_i146_add182_backEN == 1'b0)
            begin
                SE_i_cmp3_i_24_i146_add182_R_v_0 <= SE_i_cmp3_i_24_i146_add182_R_v_0 & SE_i_cmp3_i_24_i146_add182_s_tv_0;
            end
            else
            begin
                SE_i_cmp3_i_24_i146_add182_R_v_0 <= SE_i_cmp3_i_24_i146_add182_v_s_0;
            end

        end
    end

    // SE_i_unnamed_add178(STALLENABLE,3530)
    // Valid signal propagation
    assign SE_i_unnamed_add178_V0 = SE_i_unnamed_add178_R_v_0;
    // Stall signal propagation
    assign SE_i_unnamed_add178_s_tv_0 = SE_i_sub4_i_23_i141_add179_backStall & SE_i_unnamed_add178_R_v_0;
    // Backward Enable generation
    assign SE_i_unnamed_add178_backEN = ~ (SE_i_unnamed_add178_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_unnamed_add178_and0 = SE_i_cmp3_i_23_i140_add177_V0 & SE_i_unnamed_add178_backEN;
    assign SE_i_unnamed_add178_v_s_0 = SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_V1 & SE_i_unnamed_add178_and0;
    // Backward Stall generation
    assign SE_i_unnamed_add178_backStall = ~ (SE_i_unnamed_add178_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_unnamed_add178_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_unnamed_add178_backEN == 1'b0)
            begin
                SE_i_unnamed_add178_R_v_0 <= SE_i_unnamed_add178_R_v_0 & SE_i_unnamed_add178_s_tv_0;
            end
            else
            begin
                SE_i_unnamed_add178_R_v_0 <= SE_i_unnamed_add178_v_s_0;
            end

        end
    end

    // SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0(STALLENABLE,3881)
    // Valid signal propagation
    assign SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_V0 = SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_R_v_0;
    // Stall signal propagation
    assign SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_s_tv_0 = SE_i_sub4_i_23_i141_add179_backStall & SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_R_v_0;
    // Backward Enable generation
    assign SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_backEN = ~ (SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_v_s_0 = SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_backEN & SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_V1;
    // Backward Stall generation
    assign SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_backStall = ~ (SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_backEN == 1'b0)
            begin
                SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_R_v_0 & SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_s_tv_0;
            end
            else
            begin
                SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_v_s_0;
            end

        end
    end

    // SE_i_cmp3_i_20_i122_add162(STALLENABLE,3286)
    // Valid signal propagation
    assign SE_i_cmp3_i_20_i122_add162_V0 = SE_i_cmp3_i_20_i122_add162_R_v_0;
    // Stall signal propagation
    assign SE_i_cmp3_i_20_i122_add162_s_tv_0 = SE_i_unnamed_add163_backStall & SE_i_cmp3_i_20_i122_add162_R_v_0;
    // Backward Enable generation
    assign SE_i_cmp3_i_20_i122_add162_backEN = ~ (SE_i_cmp3_i_20_i122_add162_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_cmp3_i_20_i122_add162_and0 = SE_i_sub4_i_19_i117_add159_V0 & SE_i_cmp3_i_20_i122_add162_backEN;
    assign SE_i_cmp3_i_20_i122_add162_v_s_0 = SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_V0 & SE_i_cmp3_i_20_i122_add162_and0;
    // Backward Stall generation
    assign SE_i_cmp3_i_20_i122_add162_backStall = ~ (SE_i_cmp3_i_20_i122_add162_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_cmp3_i_20_i122_add162_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_cmp3_i_20_i122_add162_backEN == 1'b0)
            begin
                SE_i_cmp3_i_20_i122_add162_R_v_0 <= SE_i_cmp3_i_20_i122_add162_R_v_0 & SE_i_cmp3_i_20_i122_add162_s_tv_0;
            end
            else
            begin
                SE_i_cmp3_i_20_i122_add162_R_v_0 <= SE_i_cmp3_i_20_i122_add162_v_s_0;
            end

        end
    end

    // SE_i_unnamed_add158(STALLENABLE,3526)
    // Valid signal propagation
    assign SE_i_unnamed_add158_V0 = SE_i_unnamed_add158_R_v_0;
    // Stall signal propagation
    assign SE_i_unnamed_add158_s_tv_0 = SE_i_sub4_i_19_i117_add159_backStall & SE_i_unnamed_add158_R_v_0;
    // Backward Enable generation
    assign SE_i_unnamed_add158_backEN = ~ (SE_i_unnamed_add158_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_unnamed_add158_and0 = SE_i_cmp3_i_19_i116_add157_V0 & SE_i_unnamed_add158_backEN;
    assign SE_i_unnamed_add158_v_s_0 = SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_V1 & SE_i_unnamed_add158_and0;
    // Backward Stall generation
    assign SE_i_unnamed_add158_backStall = ~ (SE_i_unnamed_add158_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_unnamed_add158_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_unnamed_add158_backEN == 1'b0)
            begin
                SE_i_unnamed_add158_R_v_0 <= SE_i_unnamed_add158_R_v_0 & SE_i_unnamed_add158_s_tv_0;
            end
            else
            begin
                SE_i_unnamed_add158_R_v_0 <= SE_i_unnamed_add158_v_s_0;
            end

        end
    end

    // SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0(STALLENABLE,3888)
    // Valid signal propagation
    assign SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_V0 = SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_R_v_0;
    // Stall signal propagation
    assign SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_s_tv_0 = SE_i_sub4_i_19_i117_add159_backStall & SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_R_v_0;
    // Backward Enable generation
    assign SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_backEN = ~ (SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_v_s_0 = SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_backEN & SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_V1;
    // Backward Stall generation
    assign SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_backStall = ~ (SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_backEN == 1'b0)
            begin
                SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_R_v_0 & SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_s_tv_0;
            end
            else
            begin
                SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_v_s_0;
            end

        end
    end

    // SE_i_cmp3_i_18_i110_add152(STALLENABLE,3283)
    // Valid signal propagation
    assign SE_i_cmp3_i_18_i110_add152_V0 = SE_i_cmp3_i_18_i110_add152_R_v_0;
    // Stall signal propagation
    assign SE_i_cmp3_i_18_i110_add152_s_tv_0 = SE_i_unnamed_add153_backStall & SE_i_cmp3_i_18_i110_add152_R_v_0;
    // Backward Enable generation
    assign SE_i_cmp3_i_18_i110_add152_backEN = ~ (SE_i_cmp3_i_18_i110_add152_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_cmp3_i_18_i110_add152_and0 = SE_i_sub4_i_17_i105_add149_V0 & SE_i_cmp3_i_18_i110_add152_backEN;
    assign SE_i_cmp3_i_18_i110_add152_v_s_0 = SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_V0 & SE_i_cmp3_i_18_i110_add152_and0;
    // Backward Stall generation
    assign SE_i_cmp3_i_18_i110_add152_backStall = ~ (SE_i_cmp3_i_18_i110_add152_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_cmp3_i_18_i110_add152_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_cmp3_i_18_i110_add152_backEN == 1'b0)
            begin
                SE_i_cmp3_i_18_i110_add152_R_v_0 <= SE_i_cmp3_i_18_i110_add152_R_v_0 & SE_i_cmp3_i_18_i110_add152_s_tv_0;
            end
            else
            begin
                SE_i_cmp3_i_18_i110_add152_R_v_0 <= SE_i_cmp3_i_18_i110_add152_v_s_0;
            end

        end
    end

    // redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0(REG,2682)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_backEN == 1'b1)
        begin
            redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_q <= $unsigned(SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_D0);
        end
    end

    // SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0(STALLENABLE,3891)
    // Valid signal propagation
    assign SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_V0 = SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_R_v_0;
    // Stall signal propagation
    assign SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_s_tv_0 = SE_i_sub4_i_17_i105_add149_backStall & SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_R_v_0;
    // Backward Enable generation
    assign SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_backEN = ~ (SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_v_s_0 = SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_backEN & SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_V;
    // Backward Stall generation
    assign SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_backStall = ~ (SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_backEN == 1'b0)
            begin
                SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_R_v_0 & SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_s_tv_0;
            end
            else
            begin
                SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_v_s_0;
            end

        end
    end

    // SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0(STALLREG,4479)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_r_valid <= 1'b0;
            SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_r_valid <= SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_backStall & (SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_r_valid | SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_i_valid);

            if (SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_r_data0 <= $unsigned(redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_i_valid = SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_V1;
    // Stall signal propagation
    assign SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_backStall = SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_r_valid | ~ (SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_i_valid);

    // Valid
    assign SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_V = SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_r_valid == 1'b1 ? SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_r_valid : SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_i_valid;

    assign SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_D0 = SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_r_valid == 1'b1 ? SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_r_data0 : redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_q;

    // SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0(STALLENABLE,3890)
    // Valid signal propagation
    assign SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_V0 = SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_V1 = SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_R_v_1;
    // Stall signal propagation
    assign SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_cmp3_i_17_i104_add147_backStall & SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_s_tv_1 = SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_backStall & SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_R_v_1;
    // Backward Enable generation
    assign SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_or0 = SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_s_tv_0;
    assign SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_s_tv_1 | SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_backEN & SE_i_unnamed_add143_V0;
    // Backward Stall generation
    assign SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
            SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_v_s_0;
            end

            if (SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_R_v_1 & SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_s_tv_1;
            end
            else
            begin
                SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // SE_i_cmp3_i_14_i86_add132(STALLENABLE,3279)
    // Valid signal propagation
    assign SE_i_cmp3_i_14_i86_add132_V0 = SE_i_cmp3_i_14_i86_add132_R_v_0;
    // Stall signal propagation
    assign SE_i_cmp3_i_14_i86_add132_s_tv_0 = SE_i_unnamed_add133_backStall & SE_i_cmp3_i_14_i86_add132_R_v_0;
    // Backward Enable generation
    assign SE_i_cmp3_i_14_i86_add132_backEN = ~ (SE_i_cmp3_i_14_i86_add132_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_cmp3_i_14_i86_add132_and0 = SE_i_sub4_i_13_i81_add129_V0 & SE_i_cmp3_i_14_i86_add132_backEN;
    assign SE_i_cmp3_i_14_i86_add132_v_s_0 = SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_V0 & SE_i_cmp3_i_14_i86_add132_and0;
    // Backward Stall generation
    assign SE_i_cmp3_i_14_i86_add132_backStall = ~ (SE_i_cmp3_i_14_i86_add132_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_cmp3_i_14_i86_add132_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_cmp3_i_14_i86_add132_backEN == 1'b0)
            begin
                SE_i_cmp3_i_14_i86_add132_R_v_0 <= SE_i_cmp3_i_14_i86_add132_R_v_0 & SE_i_cmp3_i_14_i86_add132_s_tv_0;
            end
            else
            begin
                SE_i_cmp3_i_14_i86_add132_R_v_0 <= SE_i_cmp3_i_14_i86_add132_v_s_0;
            end

        end
    end

    // SE_i_unnamed_add128(STALLENABLE,3520)
    // Valid signal propagation
    assign SE_i_unnamed_add128_V0 = SE_i_unnamed_add128_R_v_0;
    // Stall signal propagation
    assign SE_i_unnamed_add128_s_tv_0 = SE_i_sub4_i_13_i81_add129_backStall & SE_i_unnamed_add128_R_v_0;
    // Backward Enable generation
    assign SE_i_unnamed_add128_backEN = ~ (SE_i_unnamed_add128_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_unnamed_add128_and0 = SE_i_cmp3_i_13_i80_add127_V0 & SE_i_unnamed_add128_backEN;
    assign SE_i_unnamed_add128_v_s_0 = SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_V1 & SE_i_unnamed_add128_and0;
    // Backward Stall generation
    assign SE_i_unnamed_add128_backStall = ~ (SE_i_unnamed_add128_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_unnamed_add128_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_unnamed_add128_backEN == 1'b0)
            begin
                SE_i_unnamed_add128_R_v_0 <= SE_i_unnamed_add128_R_v_0 & SE_i_unnamed_add128_s_tv_0;
            end
            else
            begin
                SE_i_unnamed_add128_R_v_0 <= SE_i_unnamed_add128_v_s_0;
            end

        end
    end

    // SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0(STALLENABLE,3897)
    // Valid signal propagation
    assign SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_V0 = SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_R_v_0;
    // Stall signal propagation
    assign SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_s_tv_0 = SE_i_sub4_i_13_i81_add129_backStall & SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_R_v_0;
    // Backward Enable generation
    assign SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_backEN = ~ (SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_v_s_0 = SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_backEN & SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_V1;
    // Backward Stall generation
    assign SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_backStall = ~ (SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_backEN == 1'b0)
            begin
                SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_R_v_0 & SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_s_tv_0;
            end
            else
            begin
                SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_v_s_0;
            end

        end
    end

    // SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0(STALLENABLE,3857)
    // Valid signal propagation
    assign SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_V0 = SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_R_v_0;
    // Stall signal propagation
    assign SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_s_tv_0 = SE_i_sub4_i_9_i57_add109_backStall & SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_R_v_0;
    // Backward Enable generation
    assign SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_backEN = ~ (SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_v_s_0 = SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_backEN & SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_V1;
    // Backward Stall generation
    assign SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_backStall = ~ (SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_backEN == 1'b0)
            begin
                SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_R_v_0 & SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_s_tv_0;
            end
            else
            begin
                SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_v_s_0;
            end

        end
    end

    // SE_i_cmp3_i_9_i56_add107(STALLENABLE,3305)
    // Valid signal propagation
    assign SE_i_cmp3_i_9_i56_add107_V0 = SE_i_cmp3_i_9_i56_add107_wireValid;
    // Backward Stall generation
    assign SE_i_cmp3_i_9_i56_add107_backStall = SE_i_unnamed_add108_backStall | ~ (SE_i_cmp3_i_9_i56_add107_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_cmp3_i_9_i56_add107_and0 = SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_V0;
    assign SE_i_cmp3_i_9_i56_add107_wireValid = SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_V0 & SE_i_cmp3_i_9_i56_add107_and0;

    // SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0(STALLENABLE,3856)
    // Valid signal propagation
    assign SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_V0 = SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_V1 = SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_R_v_1;
    // Stall signal propagation
    assign SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_cmp3_i_9_i56_add107_backStall & SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_s_tv_1 = SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_backStall & SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_R_v_1;
    // Backward Enable generation
    assign SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_or0 = SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_s_tv_0;
    assign SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_s_tv_1 | SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_backEN & SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_V;
    // Backward Stall generation
    assign SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
            SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_v_s_0;
            end

            if (SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_R_v_1 & SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_s_tv_1;
            end
            else
            begin
                SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0(STALLREG,4451)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_r_valid <= 1'b0;
            SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_r_valid <= SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_backStall & (SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_r_valid | SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_i_valid);

            if (SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_r_data0 <= $unsigned(redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_i_valid = SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_V1;
    // Stall signal propagation
    assign SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_backStall = SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_r_valid | ~ (SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_i_valid);

    // Valid
    assign SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_V = SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_r_valid == 1'b1 ? SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_r_valid : SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_i_valid;

    assign SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_D0 = SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_r_valid == 1'b1 ? SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_r_data0 : redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_q;

    // SE_i_cmp3_i_8_i50_add102(STALLENABLE,3304)
    // Valid signal propagation
    assign SE_i_cmp3_i_8_i50_add102_V0 = SE_i_cmp3_i_8_i50_add102_R_v_0;
    // Stall signal propagation
    assign SE_i_cmp3_i_8_i50_add102_s_tv_0 = SE_i_unnamed_add103_backStall & SE_i_cmp3_i_8_i50_add102_R_v_0;
    // Backward Enable generation
    assign SE_i_cmp3_i_8_i50_add102_backEN = ~ (SE_i_cmp3_i_8_i50_add102_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_cmp3_i_8_i50_add102_and0 = SE_i_sub4_i_7_i45_add99_V0 & SE_i_cmp3_i_8_i50_add102_backEN;
    assign SE_i_cmp3_i_8_i50_add102_v_s_0 = SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_V0 & SE_i_cmp3_i_8_i50_add102_and0;
    // Backward Stall generation
    assign SE_i_cmp3_i_8_i50_add102_backStall = ~ (SE_i_cmp3_i_8_i50_add102_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_cmp3_i_8_i50_add102_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_cmp3_i_8_i50_add102_backEN == 1'b0)
            begin
                SE_i_cmp3_i_8_i50_add102_R_v_0 <= SE_i_cmp3_i_8_i50_add102_R_v_0 & SE_i_cmp3_i_8_i50_add102_s_tv_0;
            end
            else
            begin
                SE_i_cmp3_i_8_i50_add102_R_v_0 <= SE_i_cmp3_i_8_i50_add102_v_s_0;
            end

        end
    end

    // redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0(REG,2667)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_backEN == 1'b1)
        begin
            redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_q <= $unsigned(SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_D0);
        end
    end

    // SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0(STALLENABLE,3860)
    // Valid signal propagation
    assign SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_V0 = SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_R_v_0;
    // Stall signal propagation
    assign SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_s_tv_0 = SE_i_sub4_i_7_i45_add99_backStall & SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_R_v_0;
    // Backward Enable generation
    assign SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_backEN = ~ (SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_v_s_0 = SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_backEN & SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_V;
    // Backward Stall generation
    assign SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_backStall = ~ (SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_backEN == 1'b0)
            begin
                SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_R_v_0 & SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_s_tv_0;
            end
            else
            begin
                SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_v_s_0;
            end

        end
    end

    // SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0(STALLREG,4469)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_r_valid <= 1'b0;
            SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_r_valid <= SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_backStall & (SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_r_valid | SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_i_valid);

            if (SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_r_data0 <= $unsigned(redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_i_valid = SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_V1;
    // Stall signal propagation
    assign SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_backStall = SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_r_valid | ~ (SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_i_valid);

    // Valid
    assign SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_V = SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_r_valid == 1'b1 ? SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_r_valid : SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_i_valid;

    assign SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_D0 = SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_r_valid == 1'b1 ? SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_r_data0 : redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_q;

    // SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0(STALLENABLE,3859)
    // Valid signal propagation
    assign SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_V0 = SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_V1 = SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_R_v_1;
    // Stall signal propagation
    assign SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_cmp3_i_7_i44_add97_backStall & SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_s_tv_1 = SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_backStall & SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_R_v_1;
    // Backward Enable generation
    assign SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_or0 = SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_s_tv_0;
    assign SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_s_tv_1 | SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_backEN & SE_i_unnamed_add93_V0;
    // Backward Stall generation
    assign SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
            SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_v_s_0;
            end

            if (SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_R_v_1 & SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_s_tv_1;
            end
            else
            begin
                SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // SE_i_cmp3_i_4_i26_add82(STALLENABLE,3300)
    // Valid signal propagation
    assign SE_i_cmp3_i_4_i26_add82_V0 = SE_i_cmp3_i_4_i26_add82_R_v_0;
    // Stall signal propagation
    assign SE_i_cmp3_i_4_i26_add82_s_tv_0 = SE_i_unnamed_add83_backStall & SE_i_cmp3_i_4_i26_add82_R_v_0;
    // Backward Enable generation
    assign SE_i_cmp3_i_4_i26_add82_backEN = ~ (SE_i_cmp3_i_4_i26_add82_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_cmp3_i_4_i26_add82_and0 = SE_i_sub4_i_3_i21_add79_V0 & SE_i_cmp3_i_4_i26_add82_backEN;
    assign SE_i_cmp3_i_4_i26_add82_v_s_0 = SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_V0 & SE_i_cmp3_i_4_i26_add82_and0;
    // Backward Stall generation
    assign SE_i_cmp3_i_4_i26_add82_backStall = ~ (SE_i_cmp3_i_4_i26_add82_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_cmp3_i_4_i26_add82_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_cmp3_i_4_i26_add82_backEN == 1'b0)
            begin
                SE_i_cmp3_i_4_i26_add82_R_v_0 <= SE_i_cmp3_i_4_i26_add82_R_v_0 & SE_i_cmp3_i_4_i26_add82_s_tv_0;
            end
            else
            begin
                SE_i_cmp3_i_4_i26_add82_R_v_0 <= SE_i_cmp3_i_4_i26_add82_v_s_0;
            end

        end
    end

    // SE_i_unnamed_add78(STALLENABLE,3550)
    // Valid signal propagation
    assign SE_i_unnamed_add78_V0 = SE_i_unnamed_add78_R_v_0;
    // Stall signal propagation
    assign SE_i_unnamed_add78_s_tv_0 = SE_i_sub4_i_3_i21_add79_backStall & SE_i_unnamed_add78_R_v_0;
    // Backward Enable generation
    assign SE_i_unnamed_add78_backEN = ~ (SE_i_unnamed_add78_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_unnamed_add78_and0 = SE_i_cmp3_i_3_i20_add77_V0 & SE_i_unnamed_add78_backEN;
    assign SE_i_unnamed_add78_v_s_0 = SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_V1 & SE_i_unnamed_add78_and0;
    // Backward Stall generation
    assign SE_i_unnamed_add78_backStall = ~ (SE_i_unnamed_add78_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_unnamed_add78_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_unnamed_add78_backEN == 1'b0)
            begin
                SE_i_unnamed_add78_R_v_0 <= SE_i_unnamed_add78_R_v_0 & SE_i_unnamed_add78_s_tv_0;
            end
            else
            begin
                SE_i_unnamed_add78_R_v_0 <= SE_i_unnamed_add78_v_s_0;
            end

        end
    end

    // SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0(STALLENABLE,3866)
    // Valid signal propagation
    assign SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_V0 = SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_R_v_0;
    // Stall signal propagation
    assign SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_s_tv_0 = SE_i_sub4_i_3_i21_add79_backStall & SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_R_v_0;
    // Backward Enable generation
    assign SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_backEN = ~ (SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_v_s_0 = SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_backEN & SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_V1;
    // Backward Stall generation
    assign SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_backStall = ~ (SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_backEN == 1'b0)
            begin
                SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_R_v_0 & SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_s_tv_0;
            end
            else
            begin
                SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_v_s_0;
            end

        end
    end

    // SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12(STALLENABLE,3371)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_fromReg0 <= '0;
            SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_fromReg0 <= SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_toReg0;
            // Successor 1
            SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_fromReg1 <= SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_toReg1;
        end
    end
    // Input Stall processing
    assign SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_consumed0 = (~ (SE_i_cmp3_i_i2_add61_backStall) & SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_wireValid) | SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_fromReg0;
    assign SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_consumed1 = (~ (SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_backStall) & SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_wireValid) | SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_fromReg1;
    // Consuming
    assign SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_StallValid = SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_backStall & SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_wireValid;
    assign SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_toReg0 = SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_StallValid & SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_consumed0;
    assign SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_toReg1 = SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_StallValid & SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_consumed1;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_or0 = SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_consumed0;
    assign SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_wireStall = ~ (SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_consumed1 & SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_or0);
    assign SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_backStall = SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_wireStall;
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_V0 = SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_wireValid & ~ (SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_fromReg0);
    assign SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_V1 = SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_wireValid & ~ (SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_fromReg1);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_wireValid = i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_valid_out;

    // SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0(STALLENABLE,3794)
    // Valid signal propagation
    assign SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_V0 = SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_R_v_0;
    assign SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_V1 = SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_R_v_1;
    // Stall signal propagation
    assign SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_s_tv_0 = SE_i_unnamed_add62_backStall & SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_R_v_0;
    assign SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_s_tv_1 = SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_backStall & SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_R_v_1;
    // Backward Enable generation
    assign SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_or0 = SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_s_tv_0;
    assign SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_backEN = ~ (SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_s_tv_1 | SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_v_s_0 = SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_backEN & SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_V1;
    // Backward Stall generation
    assign SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_backStall = ~ (SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_R_v_0 <= 1'b0;
            SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_backEN == 1'b0)
            begin
                SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_R_v_0 <= SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_R_v_0 & SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_s_tv_0;
            end
            else
            begin
                SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_R_v_0 <= SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_v_s_0;
            end

            if (SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_backEN == 1'b0)
            begin
                SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_R_v_1 <= SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_R_v_1 & SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_s_tv_1;
            end
            else
            begin
                SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_R_v_1 <= SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_v_s_0;
            end

        end
    end

    // bubble_join_i_llvm_fpga_ffwd_dest_i32_select6359_add12(BITJOIN,2913)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i32_select6359_add12_q = i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i32_select6359_add12(BITSELECT,2914)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i32_select6359_add12_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i32_select6359_add12_q[31:0]);

    // redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0(REG,2657)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_backEN == 1'b1)
        begin
            redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_q <= $unsigned(bubble_select_i_llvm_fpga_ffwd_dest_i32_select6359_add12_b);
        end
    end

    // redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0(REG,2658)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_backEN == 1'b1)
        begin
            redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_q <= $unsigned(redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_q);
        end
    end

    // SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0(STALLENABLE,3927)
    // Valid signal propagation
    assign SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_V0 = SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_s_tv_0 = SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_backStall & SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_backEN = ~ (SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_v_s_0 = SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_backEN & SE_i_unnamed_add62_V0;
    // Backward Stall generation
    assign SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_backStall = ~ (SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_backEN == 1'b0)
            begin
                SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_R_v_0 <= SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_R_v_0 & SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_s_tv_0;
            end
            else
            begin
                SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_R_v_0 <= SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_v_s_0;
            end

        end
    end

    // i_shr_i_i1_add60_vt_const_31(CONSTANT,490)
    assign i_shr_i_i1_add60_vt_const_31_q = $unsigned(31'b0000000000000000000000000000000);

    // rightShiftStage4Idx1Pad16_uid938_i_shr_i_i1_add0_shift_x(CONSTANT,937)
    assign rightShiftStage4Idx1Pad16_uid938_i_shr_i_i1_add0_shift_x_q = $unsigned(16'b0000000000000000);

    // rightShiftStage4Idx1Rng16_uid937_i_shr_i_i1_add0_shift_x(BITSELECT,936)@2
    assign rightShiftStage4Idx1Rng16_uid937_i_shr_i_i1_add0_shift_x_b = rightShiftStage3_uid936_i_shr_i_i1_add0_shift_x_q[31:16];

    // rightShiftStage4Idx1_uid939_i_shr_i_i1_add0_shift_x(BITJOIN,938)@2
    assign rightShiftStage4Idx1_uid939_i_shr_i_i1_add0_shift_x_q = {rightShiftStage4Idx1Pad16_uid938_i_shr_i_i1_add0_shift_x_q, rightShiftStage4Idx1Rng16_uid937_i_shr_i_i1_add0_shift_x_b};

    // rightShiftStage3Idx1Pad8_uid933_i_shr_i_i1_add0_shift_x(CONSTANT,932)
    assign rightShiftStage3Idx1Pad8_uid933_i_shr_i_i1_add0_shift_x_q = $unsigned(8'b00000000);

    // rightShiftStage3Idx1Rng8_uid932_i_shr_i_i1_add0_shift_x(BITSELECT,931)@2
    assign rightShiftStage3Idx1Rng8_uid932_i_shr_i_i1_add0_shift_x_b = rightShiftStage2_uid931_i_shr_i_i1_add0_shift_x_q[31:8];

    // rightShiftStage3Idx1_uid934_i_shr_i_i1_add0_shift_x(BITJOIN,933)@2
    assign rightShiftStage3Idx1_uid934_i_shr_i_i1_add0_shift_x_q = {rightShiftStage3Idx1Pad8_uid933_i_shr_i_i1_add0_shift_x_q, rightShiftStage3Idx1Rng8_uid932_i_shr_i_i1_add0_shift_x_b};

    // rightShiftStage2Idx1Pad4_uid928_i_shr_i_i1_add0_shift_x(CONSTANT,927)
    assign rightShiftStage2Idx1Pad4_uid928_i_shr_i_i1_add0_shift_x_q = $unsigned(4'b0000);

    // rightShiftStage2Idx1Rng4_uid927_i_shr_i_i1_add0_shift_x(BITSELECT,926)@2
    assign rightShiftStage2Idx1Rng4_uid927_i_shr_i_i1_add0_shift_x_b = rightShiftStage1_uid926_i_shr_i_i1_add0_shift_x_q[31:4];

    // rightShiftStage2Idx1_uid929_i_shr_i_i1_add0_shift_x(BITJOIN,928)@2
    assign rightShiftStage2Idx1_uid929_i_shr_i_i1_add0_shift_x_q = {rightShiftStage2Idx1Pad4_uid928_i_shr_i_i1_add0_shift_x_q, rightShiftStage2Idx1Rng4_uid927_i_shr_i_i1_add0_shift_x_b};

    // rightShiftStage1Idx1Rng2_uid922_i_shr_i_i1_add0_shift_x(BITSELECT,921)@2
    assign rightShiftStage1Idx1Rng2_uid922_i_shr_i_i1_add0_shift_x_b = rightShiftStage0_uid921_i_shr_i_i1_add0_shift_x_q[31:2];

    // rightShiftStage1Idx1_uid924_i_shr_i_i1_add0_shift_x(BITJOIN,923)@2
    assign rightShiftStage1Idx1_uid924_i_shr_i_i1_add0_shift_x_q = {i_arrayidx17_i104_add0_c_i2_02_x_q, rightShiftStage1Idx1Rng2_uid922_i_shr_i_i1_add0_shift_x_b};

    // rightShiftStage0Idx1Rng1_uid917_i_shr_i_i1_add0_shift_x(BITSELECT,916)@2
    assign rightShiftStage0Idx1Rng1_uid917_i_shr_i_i1_add0_shift_x_b = bubble_select_i_llvm_fpga_pop_i32_j_0440_pop8_add49_b[31:1];

    // rightShiftStage0Idx1_uid919_i_shr_i_i1_add0_shift_x(BITJOIN,918)@2
    assign rightShiftStage0Idx1_uid919_i_shr_i_i1_add0_shift_x_q = {GND_q, rightShiftStage0Idx1Rng1_uid917_i_shr_i_i1_add0_shift_x_b};

    // rightShiftStage0_uid921_i_shr_i_i1_add0_shift_x(MUX,920)@2
    assign rightShiftStage0_uid921_i_shr_i_i1_add0_shift_x_s = VCC_q;
    always @(rightShiftStage0_uid921_i_shr_i_i1_add0_shift_x_s or bubble_select_i_llvm_fpga_pop_i32_j_0440_pop8_add49_b or rightShiftStage0Idx1_uid919_i_shr_i_i1_add0_shift_x_q)
    begin
        unique case (rightShiftStage0_uid921_i_shr_i_i1_add0_shift_x_s)
            1'b0 : rightShiftStage0_uid921_i_shr_i_i1_add0_shift_x_q = bubble_select_i_llvm_fpga_pop_i32_j_0440_pop8_add49_b;
            1'b1 : rightShiftStage0_uid921_i_shr_i_i1_add0_shift_x_q = rightShiftStage0Idx1_uid919_i_shr_i_i1_add0_shift_x_q;
            default : rightShiftStage0_uid921_i_shr_i_i1_add0_shift_x_q = 32'b0;
        endcase
    end

    // rightShiftStage1_uid926_i_shr_i_i1_add0_shift_x(MUX,925)@2
    assign rightShiftStage1_uid926_i_shr_i_i1_add0_shift_x_s = VCC_q;
    always @(rightShiftStage1_uid926_i_shr_i_i1_add0_shift_x_s or rightShiftStage0_uid921_i_shr_i_i1_add0_shift_x_q or rightShiftStage1Idx1_uid924_i_shr_i_i1_add0_shift_x_q)
    begin
        unique case (rightShiftStage1_uid926_i_shr_i_i1_add0_shift_x_s)
            1'b0 : rightShiftStage1_uid926_i_shr_i_i1_add0_shift_x_q = rightShiftStage0_uid921_i_shr_i_i1_add0_shift_x_q;
            1'b1 : rightShiftStage1_uid926_i_shr_i_i1_add0_shift_x_q = rightShiftStage1Idx1_uid924_i_shr_i_i1_add0_shift_x_q;
            default : rightShiftStage1_uid926_i_shr_i_i1_add0_shift_x_q = 32'b0;
        endcase
    end

    // rightShiftStage2_uid931_i_shr_i_i1_add0_shift_x(MUX,930)@2
    assign rightShiftStage2_uid931_i_shr_i_i1_add0_shift_x_s = VCC_q;
    always @(rightShiftStage2_uid931_i_shr_i_i1_add0_shift_x_s or rightShiftStage1_uid926_i_shr_i_i1_add0_shift_x_q or rightShiftStage2Idx1_uid929_i_shr_i_i1_add0_shift_x_q)
    begin
        unique case (rightShiftStage2_uid931_i_shr_i_i1_add0_shift_x_s)
            1'b0 : rightShiftStage2_uid931_i_shr_i_i1_add0_shift_x_q = rightShiftStage1_uid926_i_shr_i_i1_add0_shift_x_q;
            1'b1 : rightShiftStage2_uid931_i_shr_i_i1_add0_shift_x_q = rightShiftStage2Idx1_uid929_i_shr_i_i1_add0_shift_x_q;
            default : rightShiftStage2_uid931_i_shr_i_i1_add0_shift_x_q = 32'b0;
        endcase
    end

    // rightShiftStage3_uid936_i_shr_i_i1_add0_shift_x(MUX,935)@2
    assign rightShiftStage3_uid936_i_shr_i_i1_add0_shift_x_s = VCC_q;
    always @(rightShiftStage3_uid936_i_shr_i_i1_add0_shift_x_s or rightShiftStage2_uid931_i_shr_i_i1_add0_shift_x_q or rightShiftStage3Idx1_uid934_i_shr_i_i1_add0_shift_x_q)
    begin
        unique case (rightShiftStage3_uid936_i_shr_i_i1_add0_shift_x_s)
            1'b0 : rightShiftStage3_uid936_i_shr_i_i1_add0_shift_x_q = rightShiftStage2_uid931_i_shr_i_i1_add0_shift_x_q;
            1'b1 : rightShiftStage3_uid936_i_shr_i_i1_add0_shift_x_q = rightShiftStage3Idx1_uid934_i_shr_i_i1_add0_shift_x_q;
            default : rightShiftStage3_uid936_i_shr_i_i1_add0_shift_x_q = 32'b0;
        endcase
    end

    // rightShiftStage4_uid941_i_shr_i_i1_add0_shift_x(MUX,940)@2
    assign rightShiftStage4_uid941_i_shr_i_i1_add0_shift_x_s = VCC_q;
    always @(rightShiftStage4_uid941_i_shr_i_i1_add0_shift_x_s or rightShiftStage3_uid936_i_shr_i_i1_add0_shift_x_q or rightShiftStage4Idx1_uid939_i_shr_i_i1_add0_shift_x_q)
    begin
        unique case (rightShiftStage4_uid941_i_shr_i_i1_add0_shift_x_s)
            1'b0 : rightShiftStage4_uid941_i_shr_i_i1_add0_shift_x_q = rightShiftStage3_uid936_i_shr_i_i1_add0_shift_x_q;
            1'b1 : rightShiftStage4_uid941_i_shr_i_i1_add0_shift_x_q = rightShiftStage4Idx1_uid939_i_shr_i_i1_add0_shift_x_q;
            default : rightShiftStage4_uid941_i_shr_i_i1_add0_shift_x_q = 32'b0;
        endcase
    end

    // i_shr_i_i1_add60_vt_select_0(BITSELECT,492)@2
    assign i_shr_i_i1_add60_vt_select_0_b = rightShiftStage4_uid941_i_shr_i_i1_add0_shift_x_q[0:0];

    // i_shr_i_i1_add60_vt_join(BITJOIN,491)@2
    assign i_shr_i_i1_add60_vt_join_q = {i_shr_i_i1_add60_vt_const_31_q, i_shr_i_i1_add60_vt_select_0_b};

    // i_cmp3_i_i2_add61(COMPARE,380)@2 + 1
    assign i_cmp3_i_i2_add61_a = {2'b00, i_shr_i_i1_add60_vt_join_q};
    assign i_cmp3_i_i2_add61_b = {2'b00, bubble_select_i_llvm_fpga_ffwd_dest_i32_select6359_add12_b};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_cmp3_i_i2_add61_o <= 34'b0;
        end
        else if (SE_i_cmp3_i_i2_add61_backEN == 1'b1)
        begin
            i_cmp3_i_i2_add61_o <= $unsigned(i_cmp3_i_i2_add61_a) - $unsigned(i_cmp3_i_i2_add61_b);
        end
    end
    assign i_cmp3_i_i2_add61_c[0] = i_cmp3_i_i2_add61_o[33];

    // i_unnamed_add62(MUX,557)@3
    assign i_unnamed_add62_s = i_cmp3_i_i2_add61_c;
    always @(i_unnamed_add62_s or redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_q or c_i32_0297_q)
    begin
        unique case (i_unnamed_add62_s)
            1'b0 : i_unnamed_add62_q = redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_q;
            1'b1 : i_unnamed_add62_q = c_i32_0297_q;
            default : i_unnamed_add62_q = 32'b0;
        endcase
    end

    // redist23_i_shr_i_i1_add60_vt_join_q_1_0(REG,2599)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist23_i_shr_i_i1_add60_vt_join_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_backEN == 1'b1)
        begin
            redist23_i_shr_i_i1_add60_vt_join_q_1_0_q <= $unsigned(i_shr_i_i1_add60_vt_join_q);
        end
    end

    // i_sub4_i_i3_add63(SUB,524)@3
    assign i_sub4_i_i3_add63_a = {1'b0, redist23_i_shr_i_i1_add60_vt_join_q_1_0_q};
    assign i_sub4_i_i3_add63_b = {1'b0, i_unnamed_add62_q};
    assign i_sub4_i_i3_add63_o = $unsigned(i_sub4_i_i3_add63_a) - $unsigned(i_sub4_i_i3_add63_b);
    assign i_sub4_i_i3_add63_q = i_sub4_i_i3_add63_o[32:0];

    // bgTrunc_i_sub4_i_i3_add63_sel_x(BITSELECT,35)@3
    assign bgTrunc_i_sub4_i_i3_add63_sel_x_b = $unsigned(i_sub4_i_i3_add63_q[31:0]);

    // redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0(REG,2782)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_backEN == 1'b1)
        begin
            redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_q <= $unsigned(bgTrunc_i_sub4_i_i3_add63_sel_x_b);
        end
    end

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,211)@4
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_q, redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x(CHOOSEBITS,210)@4
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_a[30:30]};

    // i_cmp3_i_1_i8_add67(COMPARE,359)@4
    assign i_cmp3_i_1_i8_add67_a = {2'b00, i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q};
    assign i_cmp3_i_1_i8_add67_b = {2'b00, redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_q};
    assign i_cmp3_i_1_i8_add67_o = $unsigned(i_cmp3_i_1_i8_add67_a) - $unsigned(i_cmp3_i_1_i8_add67_b);
    assign i_cmp3_i_1_i8_add67_c[0] = i_cmp3_i_1_i8_add67_o[33];

    // SE_i_cmp3_i_1_i8_add67(STALLENABLE,3285)
    // Valid signal propagation
    assign SE_i_cmp3_i_1_i8_add67_V0 = SE_i_cmp3_i_1_i8_add67_wireValid;
    // Backward Stall generation
    assign SE_i_cmp3_i_1_i8_add67_backStall = SE_i_unnamed_add68_backStall | ~ (SE_i_cmp3_i_1_i8_add67_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_cmp3_i_1_i8_add67_and0 = SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_V0;
    assign SE_i_cmp3_i_1_i8_add67_wireValid = SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_V0 & SE_i_cmp3_i_1_i8_add67_and0;

    // SE_i_unnamed_add68(STALLENABLE,3548)
    // Valid signal propagation
    assign SE_i_unnamed_add68_V0 = SE_i_unnamed_add68_R_v_0;
    // Stall signal propagation
    assign SE_i_unnamed_add68_s_tv_0 = SE_i_sub4_i_1_i9_add69_backStall & SE_i_unnamed_add68_R_v_0;
    // Backward Enable generation
    assign SE_i_unnamed_add68_backEN = ~ (SE_i_unnamed_add68_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_unnamed_add68_and0 = SE_i_cmp3_i_1_i8_add67_V0 & SE_i_unnamed_add68_backEN;
    assign SE_i_unnamed_add68_v_s_0 = SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_V1 & SE_i_unnamed_add68_and0;
    // Backward Stall generation
    assign SE_i_unnamed_add68_backStall = ~ (SE_i_unnamed_add68_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_unnamed_add68_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_unnamed_add68_backEN == 1'b0)
            begin
                SE_i_unnamed_add68_R_v_0 <= SE_i_unnamed_add68_R_v_0 & SE_i_unnamed_add68_s_tv_0;
            end
            else
            begin
                SE_i_unnamed_add68_R_v_0 <= SE_i_unnamed_add68_v_s_0;
            end

        end
    end

    // i_unnamed_add68(MUX,558)@4 + 1
    assign i_unnamed_add68_s = i_cmp3_i_1_i8_add67_c;
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_unnamed_add68_q <= 32'b0;
        end
        else if (SE_i_unnamed_add68_backEN == 1'b1)
        begin
            unique case (i_unnamed_add68_s)
                1'b0 : i_unnamed_add68_q <= redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_q;
                1'b1 : i_unnamed_add68_q <= c_i32_0297_q;
                default : i_unnamed_add68_q <= 32'b0;
            endcase
        end
    end

    // SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0(STALLENABLE,3886)
    // Valid signal propagation
    assign SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_V0 = SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_sub4_i_1_i9_add69_backStall & SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_backEN & SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_V1;
    // Backward Stall generation
    assign SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0(REG,2742)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_q <= $unsigned(i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q);
        end
    end

    // i_sub4_i_1_i9_add69(SUB,503)@5
    assign i_sub4_i_1_i9_add69_a = {1'b0, redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_q};
    assign i_sub4_i_1_i9_add69_b = {1'b0, i_unnamed_add68_q};
    assign i_sub4_i_1_i9_add69_o = $unsigned(i_sub4_i_1_i9_add69_a) - $unsigned(i_sub4_i_1_i9_add69_b);
    assign i_sub4_i_1_i9_add69_q = i_sub4_i_1_i9_add69_o[32:0];

    // bgTrunc_i_sub4_i_1_i9_add69_sel_x(BITSELECT,14)@5
    assign bgTrunc_i_sub4_i_1_i9_add69_sel_x_b = $unsigned(i_sub4_i_1_i9_add69_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,244)@5
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_1_i9_add69_sel_x_b, redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x(CHOOSEBITS,243)@5
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_a[29:29]};

    // SE_i_cmp3_i_2_i14_add72(STALLENABLE,3296)
    // Valid signal propagation
    assign SE_i_cmp3_i_2_i14_add72_V0 = SE_i_cmp3_i_2_i14_add72_R_v_0;
    // Stall signal propagation
    assign SE_i_cmp3_i_2_i14_add72_s_tv_0 = SE_i_unnamed_add73_backStall & SE_i_cmp3_i_2_i14_add72_R_v_0;
    // Backward Enable generation
    assign SE_i_cmp3_i_2_i14_add72_backEN = ~ (SE_i_cmp3_i_2_i14_add72_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_cmp3_i_2_i14_add72_v_s_0 = SE_i_cmp3_i_2_i14_add72_backEN & SR_SE_i_cmp3_i_2_i14_add72_V;
    // Backward Stall generation
    assign SE_i_cmp3_i_2_i14_add72_backStall = ~ (SE_i_cmp3_i_2_i14_add72_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_cmp3_i_2_i14_add72_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_cmp3_i_2_i14_add72_backEN == 1'b0)
            begin
                SE_i_cmp3_i_2_i14_add72_R_v_0 <= SE_i_cmp3_i_2_i14_add72_R_v_0 & SE_i_cmp3_i_2_i14_add72_s_tv_0;
            end
            else
            begin
                SE_i_cmp3_i_2_i14_add72_R_v_0 <= SE_i_cmp3_i_2_i14_add72_v_s_0;
            end

        end
    end

    // SR_SE_i_cmp3_i_2_i14_add72(STALLREG,4462)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_i_cmp3_i_2_i14_add72_r_valid <= 1'b0;
            SR_SE_i_cmp3_i_2_i14_add72_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
            SR_SE_i_cmp3_i_2_i14_add72_r_data1 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_i_cmp3_i_2_i14_add72_r_valid <= SE_i_cmp3_i_2_i14_add72_backStall & (SR_SE_i_cmp3_i_2_i14_add72_r_valid | SR_SE_i_cmp3_i_2_i14_add72_i_valid);

            if (SR_SE_i_cmp3_i_2_i14_add72_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_i_cmp3_i_2_i14_add72_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q;
                SR_SE_i_cmp3_i_2_i14_add72_r_data1 <= $unsigned(redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_i_cmp3_i_2_i14_add72_and0 = SE_i_sub4_i_1_i9_add69_V0;
    assign SR_SE_i_cmp3_i_2_i14_add72_i_valid = SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_V0 & SR_SE_i_cmp3_i_2_i14_add72_and0;
    // Stall signal propagation
    assign SR_SE_i_cmp3_i_2_i14_add72_backStall = SR_SE_i_cmp3_i_2_i14_add72_r_valid | ~ (SR_SE_i_cmp3_i_2_i14_add72_i_valid);

    // Valid
    assign SR_SE_i_cmp3_i_2_i14_add72_V = SR_SE_i_cmp3_i_2_i14_add72_r_valid == 1'b1 ? SR_SE_i_cmp3_i_2_i14_add72_r_valid : SR_SE_i_cmp3_i_2_i14_add72_i_valid;

    // Data0
    assign SR_SE_i_cmp3_i_2_i14_add72_D0 = SR_SE_i_cmp3_i_2_i14_add72_r_valid == 1'b1 ? SR_SE_i_cmp3_i_2_i14_add72_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q;
    // Data1
    assign SR_SE_i_cmp3_i_2_i14_add72_D1 = SR_SE_i_cmp3_i_2_i14_add72_r_valid == 1'b1 ? SR_SE_i_cmp3_i_2_i14_add72_r_data1 : redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_q;

    // SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0(STALLENABLE,3795)
    // Valid signal propagation
    assign SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_V0 = SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_R_v_0;
    assign SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_V1 = SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_R_v_1;
    assign SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_V2 = SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_R_v_2;
    // Stall signal propagation
    assign SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_s_tv_0 = SE_i_cmp3_i_1_i8_add67_backStall & SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_R_v_0;
    assign SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_s_tv_1 = SE_i_unnamed_add68_backStall & SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_R_v_1;
    assign SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_s_tv_2 = SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_backStall & SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_R_v_2;
    // Backward Enable generation
    assign SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_or0 = SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_s_tv_0;
    assign SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_or1 = SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_s_tv_1 | SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_or0;
    assign SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_backEN = ~ (SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_s_tv_2 | SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_or1);
    // Determine whether to write valid data into the first register stage
    assign SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_v_s_0 = SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_backEN & SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_V1;
    // Backward Stall generation
    assign SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_backStall = ~ (SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_R_v_0 <= 1'b0;
            SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_R_v_1 <= 1'b0;
            SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_R_v_2 <= 1'b0;
        end
        else
        begin
            if (SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_backEN == 1'b0)
            begin
                SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_R_v_0 <= SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_R_v_0 & SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_s_tv_0;
            end
            else
            begin
                SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_R_v_0 <= SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_v_s_0;
            end

            if (SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_backEN == 1'b0)
            begin
                SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_R_v_1 <= SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_R_v_1 & SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_s_tv_1;
            end
            else
            begin
                SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_R_v_1 <= SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_v_s_0;
            end

            if (SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_backEN == 1'b0)
            begin
                SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_R_v_2 <= SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_R_v_2 & SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_s_tv_2;
            end
            else
            begin
                SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_R_v_2 <= SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_v_s_0;
            end

        end
    end

    // SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0(STALLENABLE,3796)
    // Valid signal propagation
    assign SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_V0 = SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_R_v_0;
    assign SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_V1 = SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_R_v_1;
    // Stall signal propagation
    assign SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_s_tv_0 = SR_SE_i_cmp3_i_2_i14_add72_backStall & SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_R_v_0;
    assign SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_s_tv_1 = SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_backStall & SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_R_v_1;
    // Backward Enable generation
    assign SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_or0 = SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_s_tv_0;
    assign SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_backEN = ~ (SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_s_tv_1 | SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_v_s_0 = SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_backEN & SE_redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_V2;
    // Backward Stall generation
    assign SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_backStall = ~ (SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_R_v_0 <= 1'b0;
            SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_backEN == 1'b0)
            begin
                SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_R_v_0 <= SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_R_v_0 & SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_s_tv_0;
            end
            else
            begin
                SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_R_v_0 <= SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_v_s_0;
            end

            if (SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_backEN == 1'b0)
            begin
                SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_R_v_1 <= SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_R_v_1 & SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_s_tv_1;
            end
            else
            begin
                SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_R_v_1 <= SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_v_s_0;
            end

        end
    end

    // SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0(STALLENABLE,3797)
    // Valid signal propagation
    assign SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_V0 = SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_R_v_0;
    assign SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_V1 = SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_R_v_1;
    // Stall signal propagation
    assign SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_s_tv_0 = SE_i_unnamed_add73_backStall & SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_R_v_0;
    assign SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_s_tv_1 = SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_backStall & SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_R_v_1;
    // Backward Enable generation
    assign SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_or0 = SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_s_tv_0;
    assign SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_backEN = ~ (SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_s_tv_1 | SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_v_s_0 = SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_backEN & SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_V1;
    // Backward Stall generation
    assign SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_backStall = ~ (SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_R_v_0 <= 1'b0;
            SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_backEN == 1'b0)
            begin
                SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_R_v_0 <= SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_R_v_0 & SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_s_tv_0;
            end
            else
            begin
                SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_R_v_0 <= SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_v_s_0;
            end

            if (SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_backEN == 1'b0)
            begin
                SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_R_v_1 <= SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_R_v_1 & SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_s_tv_1;
            end
            else
            begin
                SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_R_v_1 <= SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_v_s_0;
            end

        end
    end

    // redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0(REG,2659)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_backEN == 1'b1)
        begin
            redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_q <= $unsigned(redist64_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_2_0_q);
        end
    end

    // redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0(REG,2660)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_backEN == 1'b1)
        begin
            redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_q <= $unsigned(redist65_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_3_0_q);
        end
    end

    // i_cmp3_i_2_i14_add72(COMPARE,370)@5 + 1
    assign i_cmp3_i_2_i14_add72_a = {2'b00, SR_SE_i_cmp3_i_2_i14_add72_D0};
    assign i_cmp3_i_2_i14_add72_b = {2'b00, SR_SE_i_cmp3_i_2_i14_add72_D1};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_cmp3_i_2_i14_add72_o <= 34'b0;
        end
        else if (SE_i_cmp3_i_2_i14_add72_backEN == 1'b1)
        begin
            i_cmp3_i_2_i14_add72_o <= $unsigned(i_cmp3_i_2_i14_add72_a) - $unsigned(i_cmp3_i_2_i14_add72_b);
        end
    end
    assign i_cmp3_i_2_i14_add72_c[0] = i_cmp3_i_2_i14_add72_o[33];

    // i_unnamed_add73(MUX,559)@6
    assign i_unnamed_add73_s = i_cmp3_i_2_i14_add72_c;
    always @(i_unnamed_add73_s or redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_q or c_i32_0297_q)
    begin
        unique case (i_unnamed_add73_s)
            1'b0 : i_unnamed_add73_q = redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_q;
            1'b1 : i_unnamed_add73_q = c_i32_0297_q;
            default : i_unnamed_add73_q = 32'b0;
        endcase
    end

    // SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0(STALLENABLE,3870)
    // Valid signal propagation
    assign SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_V0 = SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_unnamed_add73_backStall & SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_backEN & SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_V;
    // Backward Stall generation
    assign SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0(STALLREG,4463)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_r_valid <= 1'b0;
            SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_r_valid <= SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_backStall & (SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_r_valid | SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_i_valid);

            if (SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_i_valid = SE_i_sub4_i_1_i9_add69_V1;
    // Stall signal propagation
    assign SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_backStall = SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_r_valid | ~ (SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_i_valid);

    // Valid
    assign SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_V = SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_r_valid : SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_i_valid;

    assign SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_D0 = SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q;

    // redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0(REG,2726)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_q <= $unsigned(SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_D0);
        end
    end

    // i_sub4_i_2_i15_add74(SUB,514)@6
    assign i_sub4_i_2_i15_add74_a = {1'b0, redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_q};
    assign i_sub4_i_2_i15_add74_b = {1'b0, i_unnamed_add73_q};
    assign i_sub4_i_2_i15_add74_o = $unsigned(i_sub4_i_2_i15_add74_a) - $unsigned(i_sub4_i_2_i15_add74_b);
    assign i_sub4_i_2_i15_add74_q = i_sub4_i_2_i15_add74_o[32:0];

    // bgTrunc_i_sub4_i_2_i15_add74_sel_x(BITSELECT,25)@6
    assign bgTrunc_i_sub4_i_2_i15_add74_sel_x_b = $unsigned(i_sub4_i_2_i15_add74_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,253)@6
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_2_i15_add74_sel_x_b, redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x(CHOOSEBITS,252)@6
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_a[28:28]};

    // SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0(STALLREG,4464)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_r_valid <= 1'b0;
            SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_r_valid <= SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_backStall & (SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_r_valid | SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_i_valid);

            if (SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_i_valid = SE_i_unnamed_add73_V0;
    // Stall signal propagation
    assign SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_backStall = SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_r_valid | ~ (SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_i_valid);

    // Valid
    assign SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_V = SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_r_valid : SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_i_valid;

    assign SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_D0 = SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q;

    // SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0(STALLENABLE,3865)
    // Valid signal propagation
    assign SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_V0 = SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_V1 = SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_R_v_1;
    // Stall signal propagation
    assign SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_cmp3_i_3_i20_add77_backStall & SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_s_tv_1 = SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_backStall & SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_R_v_1;
    // Backward Enable generation
    assign SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_or0 = SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_s_tv_0;
    assign SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_s_tv_1 | SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_backEN & SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_V;
    // Backward Stall generation
    assign SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
            SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_v_s_0;
            end

            if (SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_R_v_1 & SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_s_tv_1;
            end
            else
            begin
                SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // SE_i_cmp3_i_3_i20_add77(STALLENABLE,3299)
    // Valid signal propagation
    assign SE_i_cmp3_i_3_i20_add77_V0 = SE_i_cmp3_i_3_i20_add77_wireValid;
    // Backward Stall generation
    assign SE_i_cmp3_i_3_i20_add77_backStall = SE_i_unnamed_add78_backStall | ~ (SE_i_cmp3_i_3_i20_add77_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_cmp3_i_3_i20_add77_and0 = SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_V0;
    assign SE_i_cmp3_i_3_i20_add77_wireValid = SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_V0 & SE_i_cmp3_i_3_i20_add77_and0;

    // SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0(STALLREG,4448)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_r_valid <= 1'b0;
            SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_r_valid <= SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_backStall & (SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_r_valid | SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_i_valid);

            if (SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_r_data0 <= $unsigned(redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_i_valid = SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_V1;
    // Stall signal propagation
    assign SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_backStall = SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_r_valid | ~ (SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_i_valid);

    // Valid
    assign SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_V = SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_r_valid == 1'b1 ? SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_r_valid : SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_i_valid;

    assign SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_D0 = SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_r_valid == 1'b1 ? SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_r_data0 : redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_q;

    // SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0(STALLENABLE,3798)
    // Valid signal propagation
    assign SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_V0 = SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_R_v_0;
    assign SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_V1 = SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_R_v_1;
    assign SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_V2 = SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_R_v_2;
    // Stall signal propagation
    assign SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_s_tv_0 = SE_i_cmp3_i_3_i20_add77_backStall & SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_R_v_0;
    assign SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_s_tv_1 = SE_i_unnamed_add78_backStall & SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_R_v_1;
    assign SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_s_tv_2 = SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_backStall & SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_R_v_2;
    // Backward Enable generation
    assign SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_or0 = SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_s_tv_0;
    assign SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_or1 = SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_s_tv_1 | SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_or0;
    assign SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_backEN = ~ (SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_s_tv_2 | SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_or1);
    // Determine whether to write valid data into the first register stage
    assign SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_v_s_0 = SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_backEN & SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_V;
    // Backward Stall generation
    assign SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_backStall = ~ (SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_R_v_0 <= 1'b0;
            SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_R_v_1 <= 1'b0;
            SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_R_v_2 <= 1'b0;
        end
        else
        begin
            if (SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_backEN == 1'b0)
            begin
                SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_R_v_0 <= SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_R_v_0 & SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_s_tv_0;
            end
            else
            begin
                SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_R_v_0 <= SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_v_s_0;
            end

            if (SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_backEN == 1'b0)
            begin
                SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_R_v_1 <= SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_R_v_1 & SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_s_tv_1;
            end
            else
            begin
                SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_R_v_1 <= SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_v_s_0;
            end

            if (SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_backEN == 1'b0)
            begin
                SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_R_v_2 <= SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_R_v_2 & SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_s_tv_2;
            end
            else
            begin
                SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_R_v_2 <= SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_v_s_0;
            end

        end
    end

    // SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0(STALLENABLE,3799)
    // Valid signal propagation
    assign SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_V0 = SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_R_v_0;
    assign SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_V1 = SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_R_v_1;
    // Stall signal propagation
    assign SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_s_tv_0 = SE_i_cmp3_i_4_i26_add82_backStall & SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_R_v_0;
    assign SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_s_tv_1 = SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_backStall & SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_R_v_1;
    // Backward Enable generation
    assign SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_or0 = SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_s_tv_0;
    assign SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_backEN = ~ (SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_s_tv_1 | SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_v_s_0 = SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_backEN & SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_V2;
    // Backward Stall generation
    assign SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_backStall = ~ (SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_R_v_0 <= 1'b0;
            SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_backEN == 1'b0)
            begin
                SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_R_v_0 <= SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_R_v_0 & SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_s_tv_0;
            end
            else
            begin
                SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_R_v_0 <= SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_v_s_0;
            end

            if (SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_backEN == 1'b0)
            begin
                SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_R_v_1 <= SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_R_v_1 & SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_s_tv_1;
            end
            else
            begin
                SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_R_v_1 <= SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_v_s_0;
            end

        end
    end

    // redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0(REG,2661)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_backEN == 1'b1)
        begin
            redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_q <= $unsigned(SR_SE_redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_D0);
        end
    end

    // redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0(REG,2662)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_backEN == 1'b1)
        begin
            redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_q <= $unsigned(redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_q);
        end
    end

    // redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0(REG,2663)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_backEN == 1'b1)
        begin
            redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_q <= $unsigned(redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_q);
        end
    end

    // SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0(STALLENABLE,3800)
    // Valid signal propagation
    assign SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_V0 = SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_R_v_0;
    assign SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_V1 = SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_R_v_1;
    // Stall signal propagation
    assign SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_s_tv_0 = SE_i_unnamed_add83_backStall & SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_R_v_0;
    assign SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_s_tv_1 = SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_backStall & SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_R_v_1;
    // Backward Enable generation
    assign SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_or0 = SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_s_tv_0;
    assign SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_backEN = ~ (SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_s_tv_1 | SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_v_s_0 = SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_backEN & SE_redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_V1;
    // Backward Stall generation
    assign SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_backStall = ~ (SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_R_v_0 <= 1'b0;
            SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_backEN == 1'b0)
            begin
                SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_R_v_0 <= SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_R_v_0 & SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_s_tv_0;
            end
            else
            begin
                SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_R_v_0 <= SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_v_s_0;
            end

            if (SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_backEN == 1'b0)
            begin
                SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_R_v_1 <= SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_R_v_1 & SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_s_tv_1;
            end
            else
            begin
                SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_R_v_1 <= SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_v_s_0;
            end

        end
    end

    // SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0(STALLREG,4449)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_r_valid <= 1'b0;
            SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_r_valid <= SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_backStall & (SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_r_valid | SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_i_valid);

            if (SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_r_data0 <= $unsigned(redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_i_valid = SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_V1;
    // Stall signal propagation
    assign SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_backStall = SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_r_valid | ~ (SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_i_valid);

    // Valid
    assign SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_V = SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_r_valid == 1'b1 ? SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_r_valid : SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_i_valid;

    assign SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_D0 = SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_r_valid == 1'b1 ? SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_r_data0 : redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_q;

    // redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0(REG,2664)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_backEN == 1'b1)
        begin
            redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_q <= $unsigned(SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_D0);
        end
    end

    // SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0(STALLENABLE,3863)
    // Valid signal propagation
    assign SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_V0 = SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_R_v_0;
    // Stall signal propagation
    assign SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_s_tv_0 = SE_i_sub4_i_5_i33_add89_backStall & SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_R_v_0;
    // Backward Enable generation
    assign SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_backEN = ~ (SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_v_s_0 = SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_backEN & SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_V1;
    // Backward Stall generation
    assign SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_backStall = ~ (SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_backEN == 1'b0)
            begin
                SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_R_v_0 & SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_s_tv_0;
            end
            else
            begin
                SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_v_s_0;
            end

        end
    end

    // SE_i_cmp3_i_5_i32_add87(STALLENABLE,3301)
    // Valid signal propagation
    assign SE_i_cmp3_i_5_i32_add87_V0 = SE_i_cmp3_i_5_i32_add87_wireValid;
    // Backward Stall generation
    assign SE_i_cmp3_i_5_i32_add87_backStall = SE_i_unnamed_add88_backStall | ~ (SE_i_cmp3_i_5_i32_add87_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_cmp3_i_5_i32_add87_and0 = SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_V0;
    assign SE_i_cmp3_i_5_i32_add87_wireValid = SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_V0 & SE_i_cmp3_i_5_i32_add87_and0;

    // SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0(STALLENABLE,3862)
    // Valid signal propagation
    assign SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_V0 = SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_V1 = SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_R_v_1;
    // Stall signal propagation
    assign SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_cmp3_i_5_i32_add87_backStall & SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_s_tv_1 = SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_backStall & SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_R_v_1;
    // Backward Enable generation
    assign SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_or0 = SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_s_tv_0;
    assign SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_s_tv_1 | SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_backEN & SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_V;
    // Backward Stall generation
    assign SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
            SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_v_s_0;
            end

            if (SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_R_v_1 & SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_s_tv_1;
            end
            else
            begin
                SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0(REG,2721)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_q <= $unsigned(SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_D0);
        end
    end

    // i_cmp3_i_3_i20_add77(COMPARE,373)@7
    assign i_cmp3_i_3_i20_add77_a = {2'b00, redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_q};
    assign i_cmp3_i_3_i20_add77_b = {2'b00, redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_q};
    assign i_cmp3_i_3_i20_add77_o = $unsigned(i_cmp3_i_3_i20_add77_a) - $unsigned(i_cmp3_i_3_i20_add77_b);
    assign i_cmp3_i_3_i20_add77_c[0] = i_cmp3_i_3_i20_add77_o[33];

    // i_unnamed_add78(MUX,560)@7 + 1
    assign i_unnamed_add78_s = i_cmp3_i_3_i20_add77_c;
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_unnamed_add78_q <= 32'b0;
        end
        else if (SE_i_unnamed_add78_backEN == 1'b1)
        begin
            unique case (i_unnamed_add78_s)
                1'b0 : i_unnamed_add78_q <= redist67_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_5_0_q;
                1'b1 : i_unnamed_add78_q <= c_i32_0297_q;
                default : i_unnamed_add78_q <= 32'b0;
            endcase
        end
    end

    // redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0(REG,2722)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_backEN == 1'b1)
        begin
            redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_q <= $unsigned(redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_q);
        end
    end

    // i_sub4_i_3_i21_add79(SUB,517)@8
    assign i_sub4_i_3_i21_add79_a = {1'b0, redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_q};
    assign i_sub4_i_3_i21_add79_b = {1'b0, i_unnamed_add78_q};
    assign i_sub4_i_3_i21_add79_o = $unsigned(i_sub4_i_3_i21_add79_a) - $unsigned(i_sub4_i_3_i21_add79_b);
    assign i_sub4_i_3_i21_add79_q = i_sub4_i_3_i21_add79_o[32:0];

    // bgTrunc_i_sub4_i_3_i21_add79_sel_x(BITSELECT,28)@8
    assign bgTrunc_i_sub4_i_3_i21_add79_sel_x_b = $unsigned(i_sub4_i_3_i21_add79_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,256)@8
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_3_i21_add79_sel_x_b, redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x(CHOOSEBITS,255)@8
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_a[27:27]};

    // i_cmp3_i_4_i26_add82(COMPARE,374)@8 + 1
    assign i_cmp3_i_4_i26_add82_a = {2'b00, i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q};
    assign i_cmp3_i_4_i26_add82_b = {2'b00, redist68_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_6_0_q};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_cmp3_i_4_i26_add82_o <= 34'b0;
        end
        else if (SE_i_cmp3_i_4_i26_add82_backEN == 1'b1)
        begin
            i_cmp3_i_4_i26_add82_o <= $unsigned(i_cmp3_i_4_i26_add82_a) - $unsigned(i_cmp3_i_4_i26_add82_b);
        end
    end
    assign i_cmp3_i_4_i26_add82_c[0] = i_cmp3_i_4_i26_add82_o[33];

    // i_unnamed_add83(MUX,561)@9
    assign i_unnamed_add83_s = i_cmp3_i_4_i26_add82_c;
    always @(i_unnamed_add83_s or redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_q or c_i32_0297_q)
    begin
        unique case (i_unnamed_add83_s)
            1'b0 : i_unnamed_add83_q = redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_q;
            1'b1 : i_unnamed_add83_q = c_i32_0297_q;
            default : i_unnamed_add83_q = 32'b0;
        endcase
    end

    // SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0(STALLENABLE,3864)
    // Valid signal propagation
    assign SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_V0 = SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_unnamed_add83_backStall & SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_backEN & SE_i_sub4_i_3_i21_add79_V1;
    // Backward Stall generation
    assign SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0(REG,2720)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_q <= $unsigned(i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q);
        end
    end

    // i_sub4_i_4_i27_add84(SUB,518)@9
    assign i_sub4_i_4_i27_add84_a = {1'b0, redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_q};
    assign i_sub4_i_4_i27_add84_b = {1'b0, i_unnamed_add83_q};
    assign i_sub4_i_4_i27_add84_o = $unsigned(i_sub4_i_4_i27_add84_a) - $unsigned(i_sub4_i_4_i27_add84_b);
    assign i_sub4_i_4_i27_add84_q = i_sub4_i_4_i27_add84_o[32:0];

    // bgTrunc_i_sub4_i_4_i27_add84_sel_x(BITSELECT,29)@9
    assign bgTrunc_i_sub4_i_4_i27_add84_sel_x_b = $unsigned(i_sub4_i_4_i27_add84_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,259)@9
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_4_i27_add84_sel_x_b, redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x(CHOOSEBITS,258)@9
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_a[26:26]};

    // SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0(STALLREG,4465)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_r_valid <= 1'b0;
            SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_r_valid <= SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_backStall & (SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_r_valid | SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_i_valid);

            if (SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_i_valid = SE_i_unnamed_add83_V0;
    // Stall signal propagation
    assign SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_backStall = SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_r_valid | ~ (SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_i_valid);

    // Valid
    assign SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_V = SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_r_valid : SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_i_valid;

    assign SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_D0 = SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q;

    // redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0(REG,2718)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_q <= $unsigned(SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_D0);
        end
    end

    // i_cmp3_i_5_i32_add87(COMPARE,375)@10
    assign i_cmp3_i_5_i32_add87_a = {2'b00, redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_q};
    assign i_cmp3_i_5_i32_add87_b = {2'b00, redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_q};
    assign i_cmp3_i_5_i32_add87_o = $unsigned(i_cmp3_i_5_i32_add87_a) - $unsigned(i_cmp3_i_5_i32_add87_b);
    assign i_cmp3_i_5_i32_add87_c[0] = i_cmp3_i_5_i32_add87_o[33];

    // SE_i_unnamed_add88(STALLENABLE,3552)
    // Valid signal propagation
    assign SE_i_unnamed_add88_V0 = SE_i_unnamed_add88_R_v_0;
    // Stall signal propagation
    assign SE_i_unnamed_add88_s_tv_0 = SE_i_sub4_i_5_i33_add89_backStall & SE_i_unnamed_add88_R_v_0;
    // Backward Enable generation
    assign SE_i_unnamed_add88_backEN = ~ (SE_i_unnamed_add88_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_unnamed_add88_and0 = SE_i_cmp3_i_5_i32_add87_V0 & SE_i_unnamed_add88_backEN;
    assign SE_i_unnamed_add88_v_s_0 = SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_V1 & SE_i_unnamed_add88_and0;
    // Backward Stall generation
    assign SE_i_unnamed_add88_backStall = ~ (SE_i_unnamed_add88_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_unnamed_add88_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_unnamed_add88_backEN == 1'b0)
            begin
                SE_i_unnamed_add88_R_v_0 <= SE_i_unnamed_add88_R_v_0 & SE_i_unnamed_add88_s_tv_0;
            end
            else
            begin
                SE_i_unnamed_add88_R_v_0 <= SE_i_unnamed_add88_v_s_0;
            end

        end
    end

    // i_unnamed_add88(MUX,562)@10 + 1
    assign i_unnamed_add88_s = i_cmp3_i_5_i32_add87_c;
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_unnamed_add88_q <= 32'b0;
        end
        else if (SE_i_unnamed_add88_backEN == 1'b1)
        begin
            unique case (i_unnamed_add88_s)
                1'b0 : i_unnamed_add88_q <= redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_q;
                1'b1 : i_unnamed_add88_q <= c_i32_0297_q;
                default : i_unnamed_add88_q <= 32'b0;
            endcase
        end
    end

    // redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0(REG,2719)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_backEN == 1'b1)
        begin
            redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_q <= $unsigned(redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_q);
        end
    end

    // i_sub4_i_5_i33_add89(SUB,519)@11
    assign i_sub4_i_5_i33_add89_a = {1'b0, redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_q};
    assign i_sub4_i_5_i33_add89_b = {1'b0, i_unnamed_add88_q};
    assign i_sub4_i_5_i33_add89_o = $unsigned(i_sub4_i_5_i33_add89_a) - $unsigned(i_sub4_i_5_i33_add89_b);
    assign i_sub4_i_5_i33_add89_q = i_sub4_i_5_i33_add89_o[32:0];

    // bgTrunc_i_sub4_i_5_i33_add89_sel_x(BITSELECT,30)@11
    assign bgTrunc_i_sub4_i_5_i33_add89_sel_x_b = $unsigned(i_sub4_i_5_i33_add89_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,262)@11
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_5_i33_add89_sel_x_b, redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x(CHOOSEBITS,261)@11
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_a[25:25]};

    // SE_i_cmp3_i_6_i38_add92(STALLENABLE,3302)
    // Valid signal propagation
    assign SE_i_cmp3_i_6_i38_add92_V0 = SE_i_cmp3_i_6_i38_add92_R_v_0;
    // Stall signal propagation
    assign SE_i_cmp3_i_6_i38_add92_s_tv_0 = SE_i_unnamed_add93_backStall & SE_i_cmp3_i_6_i38_add92_R_v_0;
    // Backward Enable generation
    assign SE_i_cmp3_i_6_i38_add92_backEN = ~ (SE_i_cmp3_i_6_i38_add92_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_cmp3_i_6_i38_add92_v_s_0 = SE_i_cmp3_i_6_i38_add92_backEN & SR_SE_i_cmp3_i_6_i38_add92_V;
    // Backward Stall generation
    assign SE_i_cmp3_i_6_i38_add92_backStall = ~ (SE_i_cmp3_i_6_i38_add92_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_cmp3_i_6_i38_add92_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_cmp3_i_6_i38_add92_backEN == 1'b0)
            begin
                SE_i_cmp3_i_6_i38_add92_R_v_0 <= SE_i_cmp3_i_6_i38_add92_R_v_0 & SE_i_cmp3_i_6_i38_add92_s_tv_0;
            end
            else
            begin
                SE_i_cmp3_i_6_i38_add92_R_v_0 <= SE_i_cmp3_i_6_i38_add92_v_s_0;
            end

        end
    end

    // SR_SE_i_cmp3_i_6_i38_add92(STALLREG,4466)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_i_cmp3_i_6_i38_add92_r_valid <= 1'b0;
            SR_SE_i_cmp3_i_6_i38_add92_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
            SR_SE_i_cmp3_i_6_i38_add92_r_data1 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_i_cmp3_i_6_i38_add92_r_valid <= SE_i_cmp3_i_6_i38_add92_backStall & (SR_SE_i_cmp3_i_6_i38_add92_r_valid | SR_SE_i_cmp3_i_6_i38_add92_i_valid);

            if (SR_SE_i_cmp3_i_6_i38_add92_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_i_cmp3_i_6_i38_add92_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q;
                SR_SE_i_cmp3_i_6_i38_add92_r_data1 <= $unsigned(redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_i_cmp3_i_6_i38_add92_and0 = SE_i_sub4_i_5_i33_add89_V0;
    assign SR_SE_i_cmp3_i_6_i38_add92_i_valid = SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_V0 & SR_SE_i_cmp3_i_6_i38_add92_and0;
    // Stall signal propagation
    assign SR_SE_i_cmp3_i_6_i38_add92_backStall = SR_SE_i_cmp3_i_6_i38_add92_r_valid | ~ (SR_SE_i_cmp3_i_6_i38_add92_i_valid);

    // Valid
    assign SR_SE_i_cmp3_i_6_i38_add92_V = SR_SE_i_cmp3_i_6_i38_add92_r_valid == 1'b1 ? SR_SE_i_cmp3_i_6_i38_add92_r_valid : SR_SE_i_cmp3_i_6_i38_add92_i_valid;

    // Data0
    assign SR_SE_i_cmp3_i_6_i38_add92_D0 = SR_SE_i_cmp3_i_6_i38_add92_r_valid == 1'b1 ? SR_SE_i_cmp3_i_6_i38_add92_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q;
    // Data1
    assign SR_SE_i_cmp3_i_6_i38_add92_D1 = SR_SE_i_cmp3_i_6_i38_add92_r_valid == 1'b1 ? SR_SE_i_cmp3_i_6_i38_add92_r_data1 : redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_q;

    // SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0(STALLENABLE,3801)
    // Valid signal propagation
    assign SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_V0 = SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_R_v_0;
    assign SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_V1 = SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_R_v_1;
    assign SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_V2 = SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_R_v_2;
    // Stall signal propagation
    assign SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_s_tv_0 = SE_i_cmp3_i_5_i32_add87_backStall & SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_R_v_0;
    assign SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_s_tv_1 = SE_i_unnamed_add88_backStall & SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_R_v_1;
    assign SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_s_tv_2 = SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_backStall & SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_R_v_2;
    // Backward Enable generation
    assign SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_or0 = SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_s_tv_0;
    assign SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_or1 = SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_s_tv_1 | SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_or0;
    assign SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_backEN = ~ (SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_s_tv_2 | SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_or1);
    // Determine whether to write valid data into the first register stage
    assign SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_v_s_0 = SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_backEN & SR_SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_V;
    // Backward Stall generation
    assign SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_backStall = ~ (SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_R_v_0 <= 1'b0;
            SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_R_v_1 <= 1'b0;
            SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_R_v_2 <= 1'b0;
        end
        else
        begin
            if (SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_backEN == 1'b0)
            begin
                SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_R_v_0 <= SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_R_v_0 & SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_s_tv_0;
            end
            else
            begin
                SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_R_v_0 <= SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_v_s_0;
            end

            if (SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_backEN == 1'b0)
            begin
                SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_R_v_1 <= SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_R_v_1 & SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_s_tv_1;
            end
            else
            begin
                SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_R_v_1 <= SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_v_s_0;
            end

            if (SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_backEN == 1'b0)
            begin
                SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_R_v_2 <= SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_R_v_2 & SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_s_tv_2;
            end
            else
            begin
                SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_R_v_2 <= SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_v_s_0;
            end

        end
    end

    // SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0(STALLENABLE,3802)
    // Valid signal propagation
    assign SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_V0 = SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_R_v_0;
    assign SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_V1 = SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_R_v_1;
    // Stall signal propagation
    assign SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_s_tv_0 = SR_SE_i_cmp3_i_6_i38_add92_backStall & SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_R_v_0;
    assign SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_s_tv_1 = SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_backStall & SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_R_v_1;
    // Backward Enable generation
    assign SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_or0 = SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_s_tv_0;
    assign SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_backEN = ~ (SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_s_tv_1 | SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_v_s_0 = SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_backEN & SE_redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_V2;
    // Backward Stall generation
    assign SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_backStall = ~ (SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_R_v_0 <= 1'b0;
            SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_backEN == 1'b0)
            begin
                SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_R_v_0 <= SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_R_v_0 & SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_s_tv_0;
            end
            else
            begin
                SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_R_v_0 <= SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_v_s_0;
            end

            if (SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_backEN == 1'b0)
            begin
                SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_R_v_1 <= SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_R_v_1 & SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_s_tv_1;
            end
            else
            begin
                SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_R_v_1 <= SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_v_s_0;
            end

        end
    end

    // SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0(STALLENABLE,3803)
    // Valid signal propagation
    assign SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_V0 = SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_R_v_0;
    assign SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_V1 = SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_R_v_1;
    // Stall signal propagation
    assign SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_s_tv_0 = SE_i_unnamed_add93_backStall & SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_R_v_0;
    assign SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_s_tv_1 = SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_backStall & SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_R_v_1;
    // Backward Enable generation
    assign SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_or0 = SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_s_tv_0;
    assign SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_backEN = ~ (SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_s_tv_1 | SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_v_s_0 = SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_backEN & SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_V1;
    // Backward Stall generation
    assign SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_backStall = ~ (SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_R_v_0 <= 1'b0;
            SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_backEN == 1'b0)
            begin
                SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_R_v_0 <= SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_R_v_0 & SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_s_tv_0;
            end
            else
            begin
                SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_R_v_0 <= SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_v_s_0;
            end

            if (SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_backEN == 1'b0)
            begin
                SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_R_v_1 <= SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_R_v_1 & SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_s_tv_1;
            end
            else
            begin
                SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_R_v_1 <= SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_v_s_0;
            end

        end
    end

    // redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0(REG,2665)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_backEN == 1'b1)
        begin
            redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_q <= $unsigned(redist70_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_8_0_q);
        end
    end

    // redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0(REG,2666)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_backEN == 1'b1)
        begin
            redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_q <= $unsigned(redist71_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_9_0_q);
        end
    end

    // i_cmp3_i_6_i38_add92(COMPARE,376)@11 + 1
    assign i_cmp3_i_6_i38_add92_a = {2'b00, SR_SE_i_cmp3_i_6_i38_add92_D0};
    assign i_cmp3_i_6_i38_add92_b = {2'b00, SR_SE_i_cmp3_i_6_i38_add92_D1};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_cmp3_i_6_i38_add92_o <= 34'b0;
        end
        else if (SE_i_cmp3_i_6_i38_add92_backEN == 1'b1)
        begin
            i_cmp3_i_6_i38_add92_o <= $unsigned(i_cmp3_i_6_i38_add92_a) - $unsigned(i_cmp3_i_6_i38_add92_b);
        end
    end
    assign i_cmp3_i_6_i38_add92_c[0] = i_cmp3_i_6_i38_add92_o[33];

    // i_unnamed_add93(MUX,563)@12
    assign i_unnamed_add93_s = i_cmp3_i_6_i38_add92_c;
    always @(i_unnamed_add93_s or redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_q or c_i32_0297_q)
    begin
        unique case (i_unnamed_add93_s)
            1'b0 : i_unnamed_add93_q = redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_q;
            1'b1 : i_unnamed_add93_q = c_i32_0297_q;
            default : i_unnamed_add93_q = 32'b0;
        endcase
    end

    // SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0(STALLENABLE,3861)
    // Valid signal propagation
    assign SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_V0 = SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_unnamed_add93_backStall & SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_backEN & SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_V;
    // Backward Stall generation
    assign SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0(STALLREG,4467)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_r_valid <= 1'b0;
            SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_r_valid <= SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_backStall & (SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_r_valid | SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_i_valid);

            if (SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_i_valid = SE_i_sub4_i_5_i33_add89_V1;
    // Stall signal propagation
    assign SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_backStall = SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_r_valid | ~ (SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_i_valid);

    // Valid
    assign SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_V = SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_r_valid : SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_i_valid;

    assign SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_D0 = SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q;

    // redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0(REG,2717)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_q <= $unsigned(SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_D0);
        end
    end

    // i_sub4_i_6_i39_add94(SUB,520)@12
    assign i_sub4_i_6_i39_add94_a = {1'b0, redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_q};
    assign i_sub4_i_6_i39_add94_b = {1'b0, i_unnamed_add93_q};
    assign i_sub4_i_6_i39_add94_o = $unsigned(i_sub4_i_6_i39_add94_a) - $unsigned(i_sub4_i_6_i39_add94_b);
    assign i_sub4_i_6_i39_add94_q = i_sub4_i_6_i39_add94_o[32:0];

    // bgTrunc_i_sub4_i_6_i39_add94_sel_x(BITSELECT,31)@12
    assign bgTrunc_i_sub4_i_6_i39_add94_sel_x_b = $unsigned(i_sub4_i_6_i39_add94_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,265)@12
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_6_i39_add94_sel_x_b, redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x(CHOOSEBITS,264)@12
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_a[24:24]};

    // redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0(REG,2715)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_q <= $unsigned(i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q);
        end
    end

    // i_cmp3_i_7_i44_add97(COMPARE,377)@13
    assign i_cmp3_i_7_i44_add97_a = {2'b00, redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_q};
    assign i_cmp3_i_7_i44_add97_b = {2'b00, redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_q};
    assign i_cmp3_i_7_i44_add97_o = $unsigned(i_cmp3_i_7_i44_add97_a) - $unsigned(i_cmp3_i_7_i44_add97_b);
    assign i_cmp3_i_7_i44_add97_c[0] = i_cmp3_i_7_i44_add97_o[33];

    // SE_i_unnamed_add98(STALLENABLE,3554)
    // Valid signal propagation
    assign SE_i_unnamed_add98_V0 = SE_i_unnamed_add98_R_v_0;
    // Stall signal propagation
    assign SE_i_unnamed_add98_s_tv_0 = SE_i_sub4_i_7_i45_add99_backStall & SE_i_unnamed_add98_R_v_0;
    // Backward Enable generation
    assign SE_i_unnamed_add98_backEN = ~ (SE_i_unnamed_add98_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_unnamed_add98_v_s_0 = SE_i_unnamed_add98_backEN & SR_SE_i_unnamed_add98_V;
    // Backward Stall generation
    assign SE_i_unnamed_add98_backStall = ~ (SE_i_unnamed_add98_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_unnamed_add98_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_unnamed_add98_backEN == 1'b0)
            begin
                SE_i_unnamed_add98_R_v_0 <= SE_i_unnamed_add98_R_v_0 & SE_i_unnamed_add98_s_tv_0;
            end
            else
            begin
                SE_i_unnamed_add98_R_v_0 <= SE_i_unnamed_add98_v_s_0;
            end

        end
    end

    // SR_SE_i_unnamed_add98(STALLREG,4468)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_i_unnamed_add98_r_valid <= 1'b0;
            SR_SE_i_unnamed_add98_r_data0 <= 1'bx;
            SR_SE_i_unnamed_add98_r_data1 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_i_unnamed_add98_r_valid <= SE_i_unnamed_add98_backStall & (SR_SE_i_unnamed_add98_r_valid | SR_SE_i_unnamed_add98_i_valid);

            if (SR_SE_i_unnamed_add98_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_i_unnamed_add98_r_data0 <= i_cmp3_i_7_i44_add97_c;
                SR_SE_i_unnamed_add98_r_data1 <= $unsigned(redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_i_unnamed_add98_and0 = SE_i_cmp3_i_7_i44_add97_V0;
    assign SR_SE_i_unnamed_add98_i_valid = SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_V1 & SR_SE_i_unnamed_add98_and0;
    // Stall signal propagation
    assign SR_SE_i_unnamed_add98_backStall = SR_SE_i_unnamed_add98_r_valid | ~ (SR_SE_i_unnamed_add98_i_valid);

    // Valid
    assign SR_SE_i_unnamed_add98_V = SR_SE_i_unnamed_add98_r_valid == 1'b1 ? SR_SE_i_unnamed_add98_r_valid : SR_SE_i_unnamed_add98_i_valid;

    // Data0
    assign SR_SE_i_unnamed_add98_D0 = SR_SE_i_unnamed_add98_r_valid == 1'b1 ? SR_SE_i_unnamed_add98_r_data0 : i_cmp3_i_7_i44_add97_c;
    // Data1
    assign SR_SE_i_unnamed_add98_D1 = SR_SE_i_unnamed_add98_r_valid == 1'b1 ? SR_SE_i_unnamed_add98_r_data1 : redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_q;

    // SE_i_cmp3_i_7_i44_add97(STALLENABLE,3303)
    // Valid signal propagation
    assign SE_i_cmp3_i_7_i44_add97_V0 = SE_i_cmp3_i_7_i44_add97_wireValid;
    // Backward Stall generation
    assign SE_i_cmp3_i_7_i44_add97_backStall = SR_SE_i_unnamed_add98_backStall | ~ (SE_i_cmp3_i_7_i44_add97_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_cmp3_i_7_i44_add97_and0 = SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_V0;
    assign SE_i_cmp3_i_7_i44_add97_wireValid = SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_V0 & SE_i_cmp3_i_7_i44_add97_and0;

    // SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0(STALLREG,4450)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_r_valid <= 1'b0;
            SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_r_valid <= SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_backStall & (SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_r_valid | SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_i_valid);

            if (SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_r_data0 <= $unsigned(redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_i_valid = SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_V1;
    // Stall signal propagation
    assign SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_backStall = SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_r_valid | ~ (SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_i_valid);

    // Valid
    assign SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_V = SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_r_valid == 1'b1 ? SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_r_valid : SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_i_valid;

    assign SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_D0 = SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_r_valid == 1'b1 ? SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_r_data0 : redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_q;

    // SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0(STALLENABLE,3804)
    // Valid signal propagation
    assign SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_V0 = SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_R_v_0;
    assign SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_V1 = SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_R_v_1;
    assign SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_V2 = SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_R_v_2;
    // Stall signal propagation
    assign SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_s_tv_0 = SE_i_cmp3_i_7_i44_add97_backStall & SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_R_v_0;
    assign SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_s_tv_1 = SR_SE_i_unnamed_add98_backStall & SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_R_v_1;
    assign SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_s_tv_2 = SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_backStall & SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_R_v_2;
    // Backward Enable generation
    assign SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_or0 = SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_s_tv_0;
    assign SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_or1 = SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_s_tv_1 | SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_or0;
    assign SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_backEN = ~ (SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_s_tv_2 | SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_or1);
    // Determine whether to write valid data into the first register stage
    assign SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_v_s_0 = SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_backEN & SR_SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_V;
    // Backward Stall generation
    assign SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_backStall = ~ (SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_R_v_0 <= 1'b0;
            SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_R_v_1 <= 1'b0;
            SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_R_v_2 <= 1'b0;
        end
        else
        begin
            if (SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_backEN == 1'b0)
            begin
                SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_R_v_0 <= SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_R_v_0 & SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_s_tv_0;
            end
            else
            begin
                SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_R_v_0 <= SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_v_s_0;
            end

            if (SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_backEN == 1'b0)
            begin
                SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_R_v_1 <= SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_R_v_1 & SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_s_tv_1;
            end
            else
            begin
                SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_R_v_1 <= SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_v_s_0;
            end

            if (SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_backEN == 1'b0)
            begin
                SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_R_v_2 <= SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_R_v_2 & SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_s_tv_2;
            end
            else
            begin
                SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_R_v_2 <= SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_v_s_0;
            end

        end
    end

    // SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0(STALLENABLE,3805)
    // Valid signal propagation
    assign SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_V0 = SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_R_v_0;
    assign SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_V1 = SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_R_v_1;
    // Stall signal propagation
    assign SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_s_tv_0 = SE_i_cmp3_i_8_i50_add102_backStall & SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_R_v_0;
    assign SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_s_tv_1 = SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_backStall & SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_R_v_1;
    // Backward Enable generation
    assign SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_or0 = SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_s_tv_0;
    assign SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_backEN = ~ (SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_s_tv_1 | SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_v_s_0 = SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_backEN & SE_redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_V2;
    // Backward Stall generation
    assign SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_backStall = ~ (SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_R_v_0 <= 1'b0;
            SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_backEN == 1'b0)
            begin
                SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_R_v_0 <= SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_R_v_0 & SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_s_tv_0;
            end
            else
            begin
                SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_R_v_0 <= SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_v_s_0;
            end

            if (SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_backEN == 1'b0)
            begin
                SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_R_v_1 <= SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_R_v_1 & SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_s_tv_1;
            end
            else
            begin
                SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_R_v_1 <= SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_v_s_0;
            end

        end
    end

    // SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0(STALLENABLE,3806)
    // Valid signal propagation
    assign SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_V0 = SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_R_v_0;
    assign SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_V1 = SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_R_v_1;
    // Stall signal propagation
    assign SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_s_tv_0 = SE_i_unnamed_add103_backStall & SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_R_v_0;
    assign SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_s_tv_1 = SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_backStall & SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_R_v_1;
    // Backward Enable generation
    assign SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_or0 = SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_s_tv_0;
    assign SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_backEN = ~ (SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_s_tv_1 | SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_v_s_0 = SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_backEN & SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_V1;
    // Backward Stall generation
    assign SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_backStall = ~ (SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_R_v_0 <= 1'b0;
            SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_backEN == 1'b0)
            begin
                SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_R_v_0 <= SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_R_v_0 & SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_s_tv_0;
            end
            else
            begin
                SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_R_v_0 <= SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_v_s_0;
            end

            if (SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_backEN == 1'b0)
            begin
                SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_R_v_1 <= SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_R_v_1 & SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_s_tv_1;
            end
            else
            begin
                SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_R_v_1 <= SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_v_s_0;
            end

        end
    end

    // redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0(REG,2668)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_backEN == 1'b1)
        begin
            redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_q <= $unsigned(redist73_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_11_0_q);
        end
    end

    // redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0(REG,2669)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_backEN == 1'b1)
        begin
            redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_q <= $unsigned(redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_q);
        end
    end

    // i_unnamed_add98(MUX,564)@13 + 1
    assign i_unnamed_add98_s = SR_SE_i_unnamed_add98_D0;
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_unnamed_add98_q <= 32'b0;
        end
        else if (SE_i_unnamed_add98_backEN == 1'b1)
        begin
            unique case (i_unnamed_add98_s)
                1'b0 : i_unnamed_add98_q <= SR_SE_i_unnamed_add98_D1;
                1'b1 : i_unnamed_add98_q <= c_i32_0297_q;
                default : i_unnamed_add98_q <= 32'b0;
            endcase
        end
    end

    // redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0(REG,2716)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_backEN == 1'b1)
        begin
            redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_q <= $unsigned(SR_SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_D0);
        end
    end

    // i_sub4_i_7_i45_add99(SUB,521)@14
    assign i_sub4_i_7_i45_add99_a = {1'b0, redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_q};
    assign i_sub4_i_7_i45_add99_b = {1'b0, i_unnamed_add98_q};
    assign i_sub4_i_7_i45_add99_o = $unsigned(i_sub4_i_7_i45_add99_a) - $unsigned(i_sub4_i_7_i45_add99_b);
    assign i_sub4_i_7_i45_add99_q = i_sub4_i_7_i45_add99_o[32:0];

    // bgTrunc_i_sub4_i_7_i45_add99_sel_x(BITSELECT,32)@14
    assign bgTrunc_i_sub4_i_7_i45_add99_sel_x_b = $unsigned(i_sub4_i_7_i45_add99_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,268)@14
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_7_i45_add99_sel_x_b, redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x(CHOOSEBITS,267)@14
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_a[23:23]};

    // i_cmp3_i_8_i50_add102(COMPARE,378)@14 + 1
    assign i_cmp3_i_8_i50_add102_a = {2'b00, i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q};
    assign i_cmp3_i_8_i50_add102_b = {2'b00, redist74_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_12_0_q};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_cmp3_i_8_i50_add102_o <= 34'b0;
        end
        else if (SE_i_cmp3_i_8_i50_add102_backEN == 1'b1)
        begin
            i_cmp3_i_8_i50_add102_o <= $unsigned(i_cmp3_i_8_i50_add102_a) - $unsigned(i_cmp3_i_8_i50_add102_b);
        end
    end
    assign i_cmp3_i_8_i50_add102_c[0] = i_cmp3_i_8_i50_add102_o[33];

    // i_unnamed_add103(MUX,525)@15
    assign i_unnamed_add103_s = i_cmp3_i_8_i50_add102_c;
    always @(i_unnamed_add103_s or redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_q or c_i32_0297_q)
    begin
        unique case (i_unnamed_add103_s)
            1'b0 : i_unnamed_add103_q = redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_q;
            1'b1 : i_unnamed_add103_q = c_i32_0297_q;
            default : i_unnamed_add103_q = 32'b0;
        endcase
    end

    // SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0(STALLENABLE,3858)
    // Valid signal propagation
    assign SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_V0 = SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_unnamed_add103_backStall & SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_backEN & SE_i_sub4_i_7_i45_add99_V1;
    // Backward Stall generation
    assign SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0(REG,2714)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_q <= $unsigned(i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q);
        end
    end

    // i_sub4_i_8_i51_add104(SUB,522)@15
    assign i_sub4_i_8_i51_add104_a = {1'b0, redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_q};
    assign i_sub4_i_8_i51_add104_b = {1'b0, i_unnamed_add103_q};
    assign i_sub4_i_8_i51_add104_o = $unsigned(i_sub4_i_8_i51_add104_a) - $unsigned(i_sub4_i_8_i51_add104_b);
    assign i_sub4_i_8_i51_add104_q = i_sub4_i_8_i51_add104_o[32:0];

    // bgTrunc_i_sub4_i_8_i51_add104_sel_x(BITSELECT,33)@15
    assign bgTrunc_i_sub4_i_8_i51_add104_sel_x_b = $unsigned(i_sub4_i_8_i51_add104_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,271)@15
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_8_i51_add104_sel_x_b, redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x(CHOOSEBITS,270)@15
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_a[22:22]};

    // SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0(STALLREG,4470)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_r_valid <= 1'b0;
            SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_r_valid <= SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_backStall & (SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_r_valid | SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_i_valid);

            if (SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_i_valid = SE_i_unnamed_add103_V0;
    // Stall signal propagation
    assign SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_backStall = SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_r_valid | ~ (SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_i_valid);

    // Valid
    assign SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_V = SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_r_valid : SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_i_valid;

    assign SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_D0 = SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q;

    // redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0(REG,2712)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_q <= $unsigned(SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_D0);
        end
    end

    // i_cmp3_i_9_i56_add107(COMPARE,379)@16
    assign i_cmp3_i_9_i56_add107_a = {2'b00, redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_q};
    assign i_cmp3_i_9_i56_add107_b = {2'b00, redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_q};
    assign i_cmp3_i_9_i56_add107_o = $unsigned(i_cmp3_i_9_i56_add107_a) - $unsigned(i_cmp3_i_9_i56_add107_b);
    assign i_cmp3_i_9_i56_add107_c[0] = i_cmp3_i_9_i56_add107_o[33];

    // SE_i_unnamed_add108(STALLENABLE,3516)
    // Valid signal propagation
    assign SE_i_unnamed_add108_V0 = SE_i_unnamed_add108_R_v_0;
    // Stall signal propagation
    assign SE_i_unnamed_add108_s_tv_0 = SE_i_sub4_i_9_i57_add109_backStall & SE_i_unnamed_add108_R_v_0;
    // Backward Enable generation
    assign SE_i_unnamed_add108_backEN = ~ (SE_i_unnamed_add108_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_unnamed_add108_and0 = SE_i_cmp3_i_9_i56_add107_V0 & SE_i_unnamed_add108_backEN;
    assign SE_i_unnamed_add108_v_s_0 = SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_V1 & SE_i_unnamed_add108_and0;
    // Backward Stall generation
    assign SE_i_unnamed_add108_backStall = ~ (SE_i_unnamed_add108_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_unnamed_add108_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_unnamed_add108_backEN == 1'b0)
            begin
                SE_i_unnamed_add108_R_v_0 <= SE_i_unnamed_add108_R_v_0 & SE_i_unnamed_add108_s_tv_0;
            end
            else
            begin
                SE_i_unnamed_add108_R_v_0 <= SE_i_unnamed_add108_v_s_0;
            end

        end
    end

    // i_unnamed_add108(MUX,526)@16 + 1
    assign i_unnamed_add108_s = i_cmp3_i_9_i56_add107_c;
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_unnamed_add108_q <= 32'b0;
        end
        else if (SE_i_unnamed_add108_backEN == 1'b1)
        begin
            unique case (i_unnamed_add108_s)
                1'b0 : i_unnamed_add108_q <= redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_q;
                1'b1 : i_unnamed_add108_q <= c_i32_0297_q;
                default : i_unnamed_add108_q <= 32'b0;
            endcase
        end
    end

    // redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0(REG,2713)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_backEN == 1'b1)
        begin
            redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_q <= $unsigned(redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_q);
        end
    end

    // i_sub4_i_9_i57_add109(SUB,523)@17
    assign i_sub4_i_9_i57_add109_a = {1'b0, redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_q};
    assign i_sub4_i_9_i57_add109_b = {1'b0, i_unnamed_add108_q};
    assign i_sub4_i_9_i57_add109_o = $unsigned(i_sub4_i_9_i57_add109_a) - $unsigned(i_sub4_i_9_i57_add109_b);
    assign i_sub4_i_9_i57_add109_q = i_sub4_i_9_i57_add109_o[32:0];

    // bgTrunc_i_sub4_i_9_i57_add109_sel_x(BITSELECT,34)@17
    assign bgTrunc_i_sub4_i_9_i57_add109_sel_x_b = $unsigned(i_sub4_i_9_i57_add109_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,181)@17
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_9_i57_add109_sel_x_b, redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x(CHOOSEBITS,180)@17
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_a[21:21]};

    // i_cmp3_i_10_i62_add112(COMPARE,349)@17 + 1
    assign i_cmp3_i_10_i62_add112_a = {2'b00, i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q};
    assign i_cmp3_i_10_i62_add112_b = {2'b00, redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_q};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_cmp3_i_10_i62_add112_o <= 34'b0;
        end
        else if (SE_i_cmp3_i_10_i62_add112_backEN == 1'b1)
        begin
            i_cmp3_i_10_i62_add112_o <= $unsigned(i_cmp3_i_10_i62_add112_a) - $unsigned(i_cmp3_i_10_i62_add112_b);
        end
    end
    assign i_cmp3_i_10_i62_add112_c[0] = i_cmp3_i_10_i62_add112_o[33];

    // i_unnamed_add113(MUX,527)@18
    assign i_unnamed_add113_s = i_cmp3_i_10_i62_add112_c;
    always @(i_unnamed_add113_s or redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_q or c_i32_0297_q)
    begin
        unique case (i_unnamed_add113_s)
            1'b0 : i_unnamed_add113_q = redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_q;
            1'b1 : i_unnamed_add113_q = c_i32_0297_q;
            default : i_unnamed_add113_q = 32'b0;
        endcase
    end

    // redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0(REG,2756)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_q <= $unsigned(i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q);
        end
    end

    // i_sub4_i_10_i63_add114(SUB,493)@18
    assign i_sub4_i_10_i63_add114_a = {1'b0, redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_q};
    assign i_sub4_i_10_i63_add114_b = {1'b0, i_unnamed_add113_q};
    assign i_sub4_i_10_i63_add114_o = $unsigned(i_sub4_i_10_i63_add114_a) - $unsigned(i_sub4_i_10_i63_add114_b);
    assign i_sub4_i_10_i63_add114_q = i_sub4_i_10_i63_add114_o[32:0];

    // bgTrunc_i_sub4_i_10_i63_add114_sel_x(BITSELECT,4)@18
    assign bgTrunc_i_sub4_i_10_i63_add114_sel_x_b = $unsigned(i_sub4_i_10_i63_add114_q[31:0]);

    // SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0(STALLENABLE,3931)
    // Valid signal propagation
    assign SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_V0 = SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_s_tv_0 = SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_backStall & SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_backEN = ~ (SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_v_s_0 = SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_backEN & SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_V;
    // Backward Stall generation
    assign SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_backStall = ~ (SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_backEN == 1'b0)
            begin
                SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_R_v_0 <= SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_R_v_0 & SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_s_tv_0;
            end
            else
            begin
                SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_R_v_0 <= SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_v_s_0;
            end

        end
    end

    // SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0(STALLREG,4471)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_r_valid <= 1'b0;
            SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_r_valid <= SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_backStall & (SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_r_valid | SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_i_valid);

            if (SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_r_data0 <= bgTrunc_i_sub4_i_10_i63_add114_sel_x_b;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_i_valid = SE_i_unnamed_add113_V0;
    // Stall signal propagation
    assign SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_backStall = SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_r_valid | ~ (SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_i_valid);

    // Valid
    assign SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_V = SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_r_valid == 1'b1 ? SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_r_valid : SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_i_valid;

    assign SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_D0 = SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_r_valid == 1'b1 ? SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_r_data0 : bgTrunc_i_sub4_i_10_i63_add114_sel_x_b;

    // SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0(STALLENABLE,3900)
    // Valid signal propagation
    assign SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_V0 = SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_unnamed_add113_backStall & SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_backEN & SE_i_sub4_i_9_i57_add109_V1;
    // Backward Stall generation
    assign SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // SE_i_unnamed_add113(STALLENABLE,3517)
    // Valid signal propagation
    assign SE_i_unnamed_add113_V0 = SE_i_unnamed_add113_wireValid;
    // Backward Stall generation
    assign SE_i_unnamed_add113_backStall = SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_backStall | ~ (SE_i_unnamed_add113_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_unnamed_add113_and0 = SE_i_cmp3_i_10_i62_add112_V0;
    assign SE_i_unnamed_add113_and1 = SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_V0 & SE_i_unnamed_add113_and0;
    assign SE_i_unnamed_add113_wireValid = SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_V0 & SE_i_unnamed_add113_and1;

    // SE_i_cmp3_i_10_i62_add112(STALLENABLE,3275)
    // Valid signal propagation
    assign SE_i_cmp3_i_10_i62_add112_V0 = SE_i_cmp3_i_10_i62_add112_R_v_0;
    // Stall signal propagation
    assign SE_i_cmp3_i_10_i62_add112_s_tv_0 = SE_i_unnamed_add113_backStall & SE_i_cmp3_i_10_i62_add112_R_v_0;
    // Backward Enable generation
    assign SE_i_cmp3_i_10_i62_add112_backEN = ~ (SE_i_cmp3_i_10_i62_add112_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_cmp3_i_10_i62_add112_and0 = SE_i_sub4_i_9_i57_add109_V0 & SE_i_cmp3_i_10_i62_add112_backEN;
    assign SE_i_cmp3_i_10_i62_add112_v_s_0 = SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_V0 & SE_i_cmp3_i_10_i62_add112_and0;
    // Backward Stall generation
    assign SE_i_cmp3_i_10_i62_add112_backStall = ~ (SE_i_cmp3_i_10_i62_add112_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_cmp3_i_10_i62_add112_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_cmp3_i_10_i62_add112_backEN == 1'b0)
            begin
                SE_i_cmp3_i_10_i62_add112_R_v_0 <= SE_i_cmp3_i_10_i62_add112_R_v_0 & SE_i_cmp3_i_10_i62_add112_s_tv_0;
            end
            else
            begin
                SE_i_cmp3_i_10_i62_add112_R_v_0 <= SE_i_cmp3_i_10_i62_add112_v_s_0;
            end

        end
    end

    // SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0(STALLENABLE,3807)
    // Valid signal propagation
    assign SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_V0 = SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_R_v_0;
    assign SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_V1 = SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_R_v_1;
    assign SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_V2 = SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_R_v_2;
    // Stall signal propagation
    assign SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_s_tv_0 = SE_i_cmp3_i_9_i56_add107_backStall & SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_R_v_0;
    assign SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_s_tv_1 = SE_i_unnamed_add108_backStall & SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_R_v_1;
    assign SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_s_tv_2 = SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_backStall & SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_R_v_2;
    // Backward Enable generation
    assign SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_or0 = SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_s_tv_0;
    assign SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_or1 = SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_s_tv_1 | SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_or0;
    assign SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_backEN = ~ (SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_s_tv_2 | SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_or1);
    // Determine whether to write valid data into the first register stage
    assign SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_v_s_0 = SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_backEN & SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_V;
    // Backward Stall generation
    assign SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_backStall = ~ (SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_R_v_0 <= 1'b0;
            SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_R_v_1 <= 1'b0;
            SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_R_v_2 <= 1'b0;
        end
        else
        begin
            if (SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_backEN == 1'b0)
            begin
                SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_R_v_0 <= SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_R_v_0 & SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_s_tv_0;
            end
            else
            begin
                SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_R_v_0 <= SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_v_s_0;
            end

            if (SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_backEN == 1'b0)
            begin
                SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_R_v_1 <= SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_R_v_1 & SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_s_tv_1;
            end
            else
            begin
                SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_R_v_1 <= SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_v_s_0;
            end

            if (SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_backEN == 1'b0)
            begin
                SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_R_v_2 <= SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_R_v_2 & SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_s_tv_2;
            end
            else
            begin
                SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_R_v_2 <= SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_v_s_0;
            end

        end
    end

    // SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0(STALLENABLE,3808)
    // Valid signal propagation
    assign SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_V0 = SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_R_v_0;
    assign SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_V1 = SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_R_v_1;
    // Stall signal propagation
    assign SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_s_tv_0 = SE_i_cmp3_i_10_i62_add112_backStall & SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_R_v_0;
    assign SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_s_tv_1 = SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_backStall & SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_R_v_1;
    // Backward Enable generation
    assign SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_or0 = SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_s_tv_0;
    assign SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_backEN = ~ (SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_s_tv_1 | SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_v_s_0 = SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_backEN & SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_V2;
    // Backward Stall generation
    assign SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_backStall = ~ (SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_R_v_0 <= 1'b0;
            SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_backEN == 1'b0)
            begin
                SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_R_v_0 <= SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_R_v_0 & SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_s_tv_0;
            end
            else
            begin
                SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_R_v_0 <= SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_v_s_0;
            end

            if (SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_backEN == 1'b0)
            begin
                SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_R_v_1 <= SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_R_v_1 & SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_s_tv_1;
            end
            else
            begin
                SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_R_v_1 <= SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_v_s_0;
            end

        end
    end

    // redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0(REG,2670)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_backEN == 1'b1)
        begin
            redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_q <= $unsigned(SR_SE_redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_D0);
        end
    end

    // redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0(REG,2671)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_backEN == 1'b1)
        begin
            redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_q <= $unsigned(redist76_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_14_0_q);
        end
    end

    // redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0(REG,2672)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_backEN == 1'b1)
        begin
            redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_q <= $unsigned(redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_q);
        end
    end

    // SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0(STALLENABLE,3809)
    // Valid signal propagation
    assign SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_V0 = SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_R_v_0;
    assign SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_V1 = SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_R_v_1;
    // Stall signal propagation
    assign SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_s_tv_0 = SE_i_unnamed_add113_backStall & SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_R_v_0;
    assign SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_s_tv_1 = SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_backStall & SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_R_v_1;
    // Backward Enable generation
    assign SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_or0 = SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_s_tv_0;
    assign SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_backEN = ~ (SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_s_tv_1 | SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_v_s_0 = SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_backEN & SE_redist77_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_15_0_V1;
    // Backward Stall generation
    assign SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_backStall = ~ (SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_R_v_0 <= 1'b0;
            SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_backEN == 1'b0)
            begin
                SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_R_v_0 <= SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_R_v_0 & SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_s_tv_0;
            end
            else
            begin
                SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_R_v_0 <= SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_v_s_0;
            end

            if (SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_backEN == 1'b0)
            begin
                SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_R_v_1 <= SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_R_v_1 & SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_s_tv_1;
            end
            else
            begin
                SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_R_v_1 <= SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_v_s_0;
            end

        end
    end

    // SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0(STALLREG,4452)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_r_valid <= 1'b0;
            SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_r_valid <= SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_backStall & (SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_r_valid | SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_i_valid);

            if (SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_r_data0 <= $unsigned(redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_i_valid = SE_redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_V1;
    // Stall signal propagation
    assign SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_backStall = SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_r_valid | ~ (SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_i_valid);

    // Valid
    assign SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_V = SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_r_valid == 1'b1 ? SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_r_valid : SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_i_valid;

    assign SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_D0 = SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_r_valid == 1'b1 ? SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_r_data0 : redist78_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_16_0_q;

    // redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0(REG,2673)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_backEN == 1'b1)
        begin
            redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_q <= $unsigned(SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_D0);
        end
    end

    // redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0(REG,2786)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_backEN == 1'b1)
        begin
            redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_q <= $unsigned(SR_SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_D0);
        end
    end

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,184)@19
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_q, redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x(CHOOSEBITS,183)@19
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_a[20:20]};

    // i_cmp3_i_11_i68_add117(COMPARE,350)@19
    assign i_cmp3_i_11_i68_add117_a = {2'b00, i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q};
    assign i_cmp3_i_11_i68_add117_b = {2'b00, redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_q};
    assign i_cmp3_i_11_i68_add117_o = $unsigned(i_cmp3_i_11_i68_add117_a) - $unsigned(i_cmp3_i_11_i68_add117_b);
    assign i_cmp3_i_11_i68_add117_c[0] = i_cmp3_i_11_i68_add117_o[33];

    // SE_i_cmp3_i_11_i68_add117(STALLENABLE,3276)
    // Valid signal propagation
    assign SE_i_cmp3_i_11_i68_add117_V0 = SE_i_cmp3_i_11_i68_add117_wireValid;
    // Backward Stall generation
    assign SE_i_cmp3_i_11_i68_add117_backStall = SE_i_unnamed_add118_backStall | ~ (SE_i_cmp3_i_11_i68_add117_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_cmp3_i_11_i68_add117_and0 = SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_V0;
    assign SE_i_cmp3_i_11_i68_add117_wireValid = SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_V0 & SE_i_cmp3_i_11_i68_add117_and0;

    // SE_i_unnamed_add118(STALLENABLE,3518)
    // Valid signal propagation
    assign SE_i_unnamed_add118_V0 = SE_i_unnamed_add118_R_v_0;
    // Stall signal propagation
    assign SE_i_unnamed_add118_s_tv_0 = SE_i_sub4_i_11_i69_add119_backStall & SE_i_unnamed_add118_R_v_0;
    // Backward Enable generation
    assign SE_i_unnamed_add118_backEN = ~ (SE_i_unnamed_add118_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_unnamed_add118_and0 = SE_i_cmp3_i_11_i68_add117_V0 & SE_i_unnamed_add118_backEN;
    assign SE_i_unnamed_add118_v_s_0 = SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_V1 & SE_i_unnamed_add118_and0;
    // Backward Stall generation
    assign SE_i_unnamed_add118_backStall = ~ (SE_i_unnamed_add118_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_unnamed_add118_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_unnamed_add118_backEN == 1'b0)
            begin
                SE_i_unnamed_add118_R_v_0 <= SE_i_unnamed_add118_R_v_0 & SE_i_unnamed_add118_s_tv_0;
            end
            else
            begin
                SE_i_unnamed_add118_R_v_0 <= SE_i_unnamed_add118_v_s_0;
            end

        end
    end

    // i_unnamed_add118(MUX,528)@19 + 1
    assign i_unnamed_add118_s = i_cmp3_i_11_i68_add117_c;
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_unnamed_add118_q <= 32'b0;
        end
        else if (SE_i_unnamed_add118_backEN == 1'b1)
        begin
            unique case (i_unnamed_add118_s)
                1'b0 : i_unnamed_add118_q <= redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_q;
                1'b1 : i_unnamed_add118_q <= c_i32_0297_q;
                default : i_unnamed_add118_q <= 32'b0;
            endcase
        end
    end

    // SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0(STALLENABLE,3899)
    // Valid signal propagation
    assign SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_V0 = SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_sub4_i_11_i69_add119_backStall & SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_backEN & SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_V1;
    // Backward Stall generation
    assign SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0(REG,2755)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_q <= $unsigned(i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q);
        end
    end

    // i_sub4_i_11_i69_add119(SUB,494)@20
    assign i_sub4_i_11_i69_add119_a = {1'b0, redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_q};
    assign i_sub4_i_11_i69_add119_b = {1'b0, i_unnamed_add118_q};
    assign i_sub4_i_11_i69_add119_o = $unsigned(i_sub4_i_11_i69_add119_a) - $unsigned(i_sub4_i_11_i69_add119_b);
    assign i_sub4_i_11_i69_add119_q = i_sub4_i_11_i69_add119_o[32:0];

    // bgTrunc_i_sub4_i_11_i69_add119_sel_x(BITSELECT,5)@20
    assign bgTrunc_i_sub4_i_11_i69_add119_sel_x_b = $unsigned(i_sub4_i_11_i69_add119_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,187)@20
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_11_i69_add119_sel_x_b, redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x(CHOOSEBITS,186)@20
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_a[19:19]};

    // SE_i_cmp3_i_12_i74_add122(STALLENABLE,3277)
    // Valid signal propagation
    assign SE_i_cmp3_i_12_i74_add122_V0 = SE_i_cmp3_i_12_i74_add122_R_v_0;
    // Stall signal propagation
    assign SE_i_cmp3_i_12_i74_add122_s_tv_0 = SE_i_unnamed_add123_backStall & SE_i_cmp3_i_12_i74_add122_R_v_0;
    // Backward Enable generation
    assign SE_i_cmp3_i_12_i74_add122_backEN = ~ (SE_i_cmp3_i_12_i74_add122_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_cmp3_i_12_i74_add122_v_s_0 = SE_i_cmp3_i_12_i74_add122_backEN & SR_SE_i_cmp3_i_12_i74_add122_V;
    // Backward Stall generation
    assign SE_i_cmp3_i_12_i74_add122_backStall = ~ (SE_i_cmp3_i_12_i74_add122_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_cmp3_i_12_i74_add122_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_cmp3_i_12_i74_add122_backEN == 1'b0)
            begin
                SE_i_cmp3_i_12_i74_add122_R_v_0 <= SE_i_cmp3_i_12_i74_add122_R_v_0 & SE_i_cmp3_i_12_i74_add122_s_tv_0;
            end
            else
            begin
                SE_i_cmp3_i_12_i74_add122_R_v_0 <= SE_i_cmp3_i_12_i74_add122_v_s_0;
            end

        end
    end

    // SR_SE_i_cmp3_i_12_i74_add122(STALLREG,4472)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_i_cmp3_i_12_i74_add122_r_valid <= 1'b0;
            SR_SE_i_cmp3_i_12_i74_add122_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
            SR_SE_i_cmp3_i_12_i74_add122_r_data1 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_i_cmp3_i_12_i74_add122_r_valid <= SE_i_cmp3_i_12_i74_add122_backStall & (SR_SE_i_cmp3_i_12_i74_add122_r_valid | SR_SE_i_cmp3_i_12_i74_add122_i_valid);

            if (SR_SE_i_cmp3_i_12_i74_add122_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_i_cmp3_i_12_i74_add122_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q;
                SR_SE_i_cmp3_i_12_i74_add122_r_data1 <= $unsigned(redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_i_cmp3_i_12_i74_add122_and0 = SE_i_sub4_i_11_i69_add119_V0;
    assign SR_SE_i_cmp3_i_12_i74_add122_i_valid = SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_V0 & SR_SE_i_cmp3_i_12_i74_add122_and0;
    // Stall signal propagation
    assign SR_SE_i_cmp3_i_12_i74_add122_backStall = SR_SE_i_cmp3_i_12_i74_add122_r_valid | ~ (SR_SE_i_cmp3_i_12_i74_add122_i_valid);

    // Valid
    assign SR_SE_i_cmp3_i_12_i74_add122_V = SR_SE_i_cmp3_i_12_i74_add122_r_valid == 1'b1 ? SR_SE_i_cmp3_i_12_i74_add122_r_valid : SR_SE_i_cmp3_i_12_i74_add122_i_valid;

    // Data0
    assign SR_SE_i_cmp3_i_12_i74_add122_D0 = SR_SE_i_cmp3_i_12_i74_add122_r_valid == 1'b1 ? SR_SE_i_cmp3_i_12_i74_add122_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q;
    // Data1
    assign SR_SE_i_cmp3_i_12_i74_add122_D1 = SR_SE_i_cmp3_i_12_i74_add122_r_valid == 1'b1 ? SR_SE_i_cmp3_i_12_i74_add122_r_data1 : redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_q;

    // SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0(STALLENABLE,3810)
    // Valid signal propagation
    assign SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_V0 = SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_R_v_0;
    assign SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_V1 = SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_R_v_1;
    assign SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_V2 = SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_R_v_2;
    // Stall signal propagation
    assign SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_s_tv_0 = SE_i_cmp3_i_11_i68_add117_backStall & SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_R_v_0;
    assign SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_s_tv_1 = SE_i_unnamed_add118_backStall & SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_R_v_1;
    assign SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_s_tv_2 = SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_backStall & SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_R_v_2;
    // Backward Enable generation
    assign SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_or0 = SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_s_tv_0;
    assign SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_or1 = SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_s_tv_1 | SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_or0;
    assign SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_backEN = ~ (SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_s_tv_2 | SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_or1);
    // Determine whether to write valid data into the first register stage
    assign SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_v_s_0 = SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_backEN & SR_SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_V;
    // Backward Stall generation
    assign SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_backStall = ~ (SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_R_v_0 <= 1'b0;
            SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_R_v_1 <= 1'b0;
            SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_R_v_2 <= 1'b0;
        end
        else
        begin
            if (SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_backEN == 1'b0)
            begin
                SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_R_v_0 <= SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_R_v_0 & SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_s_tv_0;
            end
            else
            begin
                SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_R_v_0 <= SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_v_s_0;
            end

            if (SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_backEN == 1'b0)
            begin
                SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_R_v_1 <= SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_R_v_1 & SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_s_tv_1;
            end
            else
            begin
                SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_R_v_1 <= SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_v_s_0;
            end

            if (SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_backEN == 1'b0)
            begin
                SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_R_v_2 <= SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_R_v_2 & SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_s_tv_2;
            end
            else
            begin
                SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_R_v_2 <= SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_v_s_0;
            end

        end
    end

    // SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0(STALLENABLE,3811)
    // Valid signal propagation
    assign SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_V0 = SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_R_v_0;
    assign SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_V1 = SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_R_v_1;
    // Stall signal propagation
    assign SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_s_tv_0 = SR_SE_i_cmp3_i_12_i74_add122_backStall & SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_R_v_0;
    assign SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_s_tv_1 = SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_backStall & SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_R_v_1;
    // Backward Enable generation
    assign SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_or0 = SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_s_tv_0;
    assign SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_backEN = ~ (SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_s_tv_1 | SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_v_s_0 = SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_backEN & SE_redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_V2;
    // Backward Stall generation
    assign SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_backStall = ~ (SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_R_v_0 <= 1'b0;
            SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_backEN == 1'b0)
            begin
                SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_R_v_0 <= SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_R_v_0 & SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_s_tv_0;
            end
            else
            begin
                SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_R_v_0 <= SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_v_s_0;
            end

            if (SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_backEN == 1'b0)
            begin
                SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_R_v_1 <= SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_R_v_1 & SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_s_tv_1;
            end
            else
            begin
                SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_R_v_1 <= SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_v_s_0;
            end

        end
    end

    // SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0(STALLENABLE,3812)
    // Valid signal propagation
    assign SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_V0 = SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_R_v_0;
    assign SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_V1 = SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_R_v_1;
    // Stall signal propagation
    assign SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_s_tv_0 = SE_i_unnamed_add123_backStall & SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_R_v_0;
    assign SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_s_tv_1 = SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_backStall & SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_R_v_1;
    // Backward Enable generation
    assign SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_or0 = SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_s_tv_0;
    assign SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_backEN = ~ (SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_s_tv_1 | SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_v_s_0 = SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_backEN & SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_V1;
    // Backward Stall generation
    assign SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_backStall = ~ (SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_R_v_0 <= 1'b0;
            SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_backEN == 1'b0)
            begin
                SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_R_v_0 <= SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_R_v_0 & SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_s_tv_0;
            end
            else
            begin
                SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_R_v_0 <= SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_v_s_0;
            end

            if (SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_backEN == 1'b0)
            begin
                SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_R_v_1 <= SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_R_v_1 & SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_s_tv_1;
            end
            else
            begin
                SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_R_v_1 <= SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_v_s_0;
            end

        end
    end

    // redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0(REG,2674)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_backEN == 1'b1)
        begin
            redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_q <= $unsigned(redist79_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_17_0_q);
        end
    end

    // redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0(REG,2675)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_backEN == 1'b1)
        begin
            redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_q <= $unsigned(redist80_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_18_0_q);
        end
    end

    // i_cmp3_i_12_i74_add122(COMPARE,351)@20 + 1
    assign i_cmp3_i_12_i74_add122_a = {2'b00, SR_SE_i_cmp3_i_12_i74_add122_D0};
    assign i_cmp3_i_12_i74_add122_b = {2'b00, SR_SE_i_cmp3_i_12_i74_add122_D1};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_cmp3_i_12_i74_add122_o <= 34'b0;
        end
        else if (SE_i_cmp3_i_12_i74_add122_backEN == 1'b1)
        begin
            i_cmp3_i_12_i74_add122_o <= $unsigned(i_cmp3_i_12_i74_add122_a) - $unsigned(i_cmp3_i_12_i74_add122_b);
        end
    end
    assign i_cmp3_i_12_i74_add122_c[0] = i_cmp3_i_12_i74_add122_o[33];

    // i_unnamed_add123(MUX,529)@21
    assign i_unnamed_add123_s = i_cmp3_i_12_i74_add122_c;
    always @(i_unnamed_add123_s or redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_q or c_i32_0297_q)
    begin
        unique case (i_unnamed_add123_s)
            1'b0 : i_unnamed_add123_q = redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_q;
            1'b1 : i_unnamed_add123_q = c_i32_0297_q;
            default : i_unnamed_add123_q = 32'b0;
        endcase
    end

    // SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0(STALLENABLE,3898)
    // Valid signal propagation
    assign SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_V0 = SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_unnamed_add123_backStall & SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_backEN & SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_V;
    // Backward Stall generation
    assign SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0(STALLREG,4473)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_r_valid <= 1'b0;
            SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_r_valid <= SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_backStall & (SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_r_valid | SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_i_valid);

            if (SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_i_valid = SE_i_sub4_i_11_i69_add119_V1;
    // Stall signal propagation
    assign SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_backStall = SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_r_valid | ~ (SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_i_valid);

    // Valid
    assign SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_V = SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_r_valid : SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_i_valid;

    assign SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_D0 = SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q;

    // redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0(REG,2754)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_q <= $unsigned(SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_D0);
        end
    end

    // i_sub4_i_12_i75_add124(SUB,495)@21
    assign i_sub4_i_12_i75_add124_a = {1'b0, redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_q};
    assign i_sub4_i_12_i75_add124_b = {1'b0, i_unnamed_add123_q};
    assign i_sub4_i_12_i75_add124_o = $unsigned(i_sub4_i_12_i75_add124_a) - $unsigned(i_sub4_i_12_i75_add124_b);
    assign i_sub4_i_12_i75_add124_q = i_sub4_i_12_i75_add124_o[32:0];

    // bgTrunc_i_sub4_i_12_i75_add124_sel_x(BITSELECT,6)@21
    assign bgTrunc_i_sub4_i_12_i75_add124_sel_x_b = $unsigned(i_sub4_i_12_i75_add124_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,190)@21
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_12_i75_add124_sel_x_b, redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x(CHOOSEBITS,189)@21
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_a[18:18]};

    // SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0(STALLREG,4474)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_r_valid <= 1'b0;
            SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_r_valid <= SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_backStall & (SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_r_valid | SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_i_valid);

            if (SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_i_valid = SE_i_unnamed_add123_V0;
    // Stall signal propagation
    assign SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_backStall = SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_r_valid | ~ (SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_i_valid);

    // Valid
    assign SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_V = SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_r_valid : SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_i_valid;

    assign SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_D0 = SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q;

    // SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0(STALLENABLE,3896)
    // Valid signal propagation
    assign SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_V0 = SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_V1 = SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_R_v_1;
    // Stall signal propagation
    assign SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_cmp3_i_13_i80_add127_backStall & SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_s_tv_1 = SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_backStall & SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_R_v_1;
    // Backward Enable generation
    assign SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_or0 = SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_s_tv_0;
    assign SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_s_tv_1 | SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_backEN & SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_V;
    // Backward Stall generation
    assign SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
            SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_v_s_0;
            end

            if (SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_R_v_1 & SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_s_tv_1;
            end
            else
            begin
                SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // SE_i_cmp3_i_13_i80_add127(STALLENABLE,3278)
    // Valid signal propagation
    assign SE_i_cmp3_i_13_i80_add127_V0 = SE_i_cmp3_i_13_i80_add127_wireValid;
    // Backward Stall generation
    assign SE_i_cmp3_i_13_i80_add127_backStall = SE_i_unnamed_add128_backStall | ~ (SE_i_cmp3_i_13_i80_add127_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_cmp3_i_13_i80_add127_and0 = SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_V0;
    assign SE_i_cmp3_i_13_i80_add127_wireValid = SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_V0 & SE_i_cmp3_i_13_i80_add127_and0;

    // SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0(STALLREG,4453)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_r_valid <= 1'b0;
            SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_r_valid <= SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_backStall & (SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_r_valid | SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_i_valid);

            if (SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_r_data0 <= $unsigned(redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_i_valid = SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_V1;
    // Stall signal propagation
    assign SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_backStall = SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_r_valid | ~ (SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_i_valid);

    // Valid
    assign SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_V = SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_r_valid == 1'b1 ? SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_r_valid : SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_i_valid;

    assign SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_D0 = SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_r_valid == 1'b1 ? SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_r_data0 : redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_q;

    // SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0(STALLENABLE,3813)
    // Valid signal propagation
    assign SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_V0 = SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_R_v_0;
    assign SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_V1 = SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_R_v_1;
    assign SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_V2 = SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_R_v_2;
    // Stall signal propagation
    assign SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_s_tv_0 = SE_i_cmp3_i_13_i80_add127_backStall & SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_R_v_0;
    assign SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_s_tv_1 = SE_i_unnamed_add128_backStall & SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_R_v_1;
    assign SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_s_tv_2 = SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_backStall & SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_R_v_2;
    // Backward Enable generation
    assign SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_or0 = SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_s_tv_0;
    assign SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_or1 = SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_s_tv_1 | SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_or0;
    assign SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_backEN = ~ (SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_s_tv_2 | SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_or1);
    // Determine whether to write valid data into the first register stage
    assign SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_v_s_0 = SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_backEN & SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_V;
    // Backward Stall generation
    assign SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_backStall = ~ (SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_R_v_0 <= 1'b0;
            SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_R_v_1 <= 1'b0;
            SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_R_v_2 <= 1'b0;
        end
        else
        begin
            if (SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_backEN == 1'b0)
            begin
                SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_R_v_0 <= SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_R_v_0 & SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_s_tv_0;
            end
            else
            begin
                SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_R_v_0 <= SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_v_s_0;
            end

            if (SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_backEN == 1'b0)
            begin
                SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_R_v_1 <= SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_R_v_1 & SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_s_tv_1;
            end
            else
            begin
                SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_R_v_1 <= SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_v_s_0;
            end

            if (SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_backEN == 1'b0)
            begin
                SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_R_v_2 <= SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_R_v_2 & SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_s_tv_2;
            end
            else
            begin
                SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_R_v_2 <= SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_v_s_0;
            end

        end
    end

    // SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0(STALLENABLE,3814)
    // Valid signal propagation
    assign SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_V0 = SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_R_v_0;
    assign SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_V1 = SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_R_v_1;
    // Stall signal propagation
    assign SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_s_tv_0 = SE_i_cmp3_i_14_i86_add132_backStall & SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_R_v_0;
    assign SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_s_tv_1 = SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_backStall & SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_R_v_1;
    // Backward Enable generation
    assign SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_or0 = SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_s_tv_0;
    assign SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_backEN = ~ (SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_s_tv_1 | SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_v_s_0 = SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_backEN & SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_V2;
    // Backward Stall generation
    assign SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_backStall = ~ (SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_R_v_0 <= 1'b0;
            SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_backEN == 1'b0)
            begin
                SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_R_v_0 <= SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_R_v_0 & SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_s_tv_0;
            end
            else
            begin
                SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_R_v_0 <= SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_v_s_0;
            end

            if (SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_backEN == 1'b0)
            begin
                SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_R_v_1 <= SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_R_v_1 & SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_s_tv_1;
            end
            else
            begin
                SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_R_v_1 <= SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_v_s_0;
            end

        end
    end

    // redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0(REG,2676)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_backEN == 1'b1)
        begin
            redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_q <= $unsigned(SR_SE_redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_D0);
        end
    end

    // redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0(REG,2677)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_backEN == 1'b1)
        begin
            redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_q <= $unsigned(redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_q);
        end
    end

    // redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0(REG,2678)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_backEN == 1'b1)
        begin
            redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_q <= $unsigned(redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_q);
        end
    end

    // SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0(STALLENABLE,3815)
    // Valid signal propagation
    assign SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_V0 = SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_R_v_0;
    assign SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_V1 = SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_R_v_1;
    // Stall signal propagation
    assign SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_s_tv_0 = SE_i_unnamed_add133_backStall & SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_R_v_0;
    assign SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_s_tv_1 = SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_backStall & SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_R_v_1;
    // Backward Enable generation
    assign SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_or0 = SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_s_tv_0;
    assign SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_backEN = ~ (SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_s_tv_1 | SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_v_s_0 = SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_backEN & SE_redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_V1;
    // Backward Stall generation
    assign SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_backStall = ~ (SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_R_v_0 <= 1'b0;
            SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_backEN == 1'b0)
            begin
                SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_R_v_0 <= SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_R_v_0 & SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_s_tv_0;
            end
            else
            begin
                SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_R_v_0 <= SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_v_s_0;
            end

            if (SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_backEN == 1'b0)
            begin
                SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_R_v_1 <= SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_R_v_1 & SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_s_tv_1;
            end
            else
            begin
                SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_R_v_1 <= SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_v_s_0;
            end

        end
    end

    // SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0(STALLREG,4454)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_r_valid <= 1'b0;
            SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_r_valid <= SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_backStall & (SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_r_valid | SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_i_valid);

            if (SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_r_data0 <= $unsigned(redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_i_valid = SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_V1;
    // Stall signal propagation
    assign SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_backStall = SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_r_valid | ~ (SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_i_valid);

    // Valid
    assign SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_V = SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_r_valid == 1'b1 ? SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_r_valid : SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_i_valid;

    assign SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_D0 = SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_r_valid == 1'b1 ? SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_r_data0 : redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_q;

    // redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0(REG,2679)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_backEN == 1'b1)
        begin
            redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_q <= $unsigned(SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_D0);
        end
    end

    // SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0(STALLENABLE,3894)
    // Valid signal propagation
    assign SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_V0 = SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_R_v_0;
    // Stall signal propagation
    assign SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_s_tv_0 = SE_i_sub4_i_15_i93_add139_backStall & SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_R_v_0;
    // Backward Enable generation
    assign SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_backEN = ~ (SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_v_s_0 = SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_backEN & SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_V1;
    // Backward Stall generation
    assign SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_backStall = ~ (SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_backEN == 1'b0)
            begin
                SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_R_v_0 & SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_s_tv_0;
            end
            else
            begin
                SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_v_s_0;
            end

        end
    end

    // SE_i_cmp3_i_15_i92_add137(STALLENABLE,3280)
    // Valid signal propagation
    assign SE_i_cmp3_i_15_i92_add137_V0 = SE_i_cmp3_i_15_i92_add137_wireValid;
    // Backward Stall generation
    assign SE_i_cmp3_i_15_i92_add137_backStall = SE_i_unnamed_add138_backStall | ~ (SE_i_cmp3_i_15_i92_add137_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_cmp3_i_15_i92_add137_and0 = SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_V0;
    assign SE_i_cmp3_i_15_i92_add137_wireValid = SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_V0 & SE_i_cmp3_i_15_i92_add137_and0;

    // SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0(STALLENABLE,3893)
    // Valid signal propagation
    assign SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_V0 = SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_V1 = SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_R_v_1;
    // Stall signal propagation
    assign SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_cmp3_i_15_i92_add137_backStall & SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_s_tv_1 = SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_backStall & SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_R_v_1;
    // Backward Enable generation
    assign SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_or0 = SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_s_tv_0;
    assign SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_s_tv_1 | SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_backEN & SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_V;
    // Backward Stall generation
    assign SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
            SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_v_s_0;
            end

            if (SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_R_v_1 & SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_s_tv_1;
            end
            else
            begin
                SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0(REG,2752)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_q <= $unsigned(SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_D0);
        end
    end

    // i_cmp3_i_13_i80_add127(COMPARE,352)@22
    assign i_cmp3_i_13_i80_add127_a = {2'b00, redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_q};
    assign i_cmp3_i_13_i80_add127_b = {2'b00, redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_q};
    assign i_cmp3_i_13_i80_add127_o = $unsigned(i_cmp3_i_13_i80_add127_a) - $unsigned(i_cmp3_i_13_i80_add127_b);
    assign i_cmp3_i_13_i80_add127_c[0] = i_cmp3_i_13_i80_add127_o[33];

    // i_unnamed_add128(MUX,530)@22 + 1
    assign i_unnamed_add128_s = i_cmp3_i_13_i80_add127_c;
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_unnamed_add128_q <= 32'b0;
        end
        else if (SE_i_unnamed_add128_backEN == 1'b1)
        begin
            unique case (i_unnamed_add128_s)
                1'b0 : i_unnamed_add128_q <= redist82_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_20_0_q;
                1'b1 : i_unnamed_add128_q <= c_i32_0297_q;
                default : i_unnamed_add128_q <= 32'b0;
            endcase
        end
    end

    // redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0(REG,2753)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_backEN == 1'b1)
        begin
            redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_q <= $unsigned(redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_q);
        end
    end

    // i_sub4_i_13_i81_add129(SUB,496)@23
    assign i_sub4_i_13_i81_add129_a = {1'b0, redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_q};
    assign i_sub4_i_13_i81_add129_b = {1'b0, i_unnamed_add128_q};
    assign i_sub4_i_13_i81_add129_o = $unsigned(i_sub4_i_13_i81_add129_a) - $unsigned(i_sub4_i_13_i81_add129_b);
    assign i_sub4_i_13_i81_add129_q = i_sub4_i_13_i81_add129_o[32:0];

    // bgTrunc_i_sub4_i_13_i81_add129_sel_x(BITSELECT,7)@23
    assign bgTrunc_i_sub4_i_13_i81_add129_sel_x_b = $unsigned(i_sub4_i_13_i81_add129_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,193)@23
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_13_i81_add129_sel_x_b, redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x(CHOOSEBITS,192)@23
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_a[17:17]};

    // i_cmp3_i_14_i86_add132(COMPARE,353)@23 + 1
    assign i_cmp3_i_14_i86_add132_a = {2'b00, i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q};
    assign i_cmp3_i_14_i86_add132_b = {2'b00, redist83_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_21_0_q};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_cmp3_i_14_i86_add132_o <= 34'b0;
        end
        else if (SE_i_cmp3_i_14_i86_add132_backEN == 1'b1)
        begin
            i_cmp3_i_14_i86_add132_o <= $unsigned(i_cmp3_i_14_i86_add132_a) - $unsigned(i_cmp3_i_14_i86_add132_b);
        end
    end
    assign i_cmp3_i_14_i86_add132_c[0] = i_cmp3_i_14_i86_add132_o[33];

    // i_unnamed_add133(MUX,531)@24
    assign i_unnamed_add133_s = i_cmp3_i_14_i86_add132_c;
    always @(i_unnamed_add133_s or redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_q or c_i32_0297_q)
    begin
        unique case (i_unnamed_add133_s)
            1'b0 : i_unnamed_add133_q = redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_q;
            1'b1 : i_unnamed_add133_q = c_i32_0297_q;
            default : i_unnamed_add133_q = 32'b0;
        endcase
    end

    // SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0(STALLENABLE,3895)
    // Valid signal propagation
    assign SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_V0 = SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_unnamed_add133_backStall & SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_backEN & SE_i_sub4_i_13_i81_add129_V1;
    // Backward Stall generation
    assign SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0(REG,2751)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_q <= $unsigned(i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q);
        end
    end

    // i_sub4_i_14_i87_add134(SUB,497)@24
    assign i_sub4_i_14_i87_add134_a = {1'b0, redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_q};
    assign i_sub4_i_14_i87_add134_b = {1'b0, i_unnamed_add133_q};
    assign i_sub4_i_14_i87_add134_o = $unsigned(i_sub4_i_14_i87_add134_a) - $unsigned(i_sub4_i_14_i87_add134_b);
    assign i_sub4_i_14_i87_add134_q = i_sub4_i_14_i87_add134_o[32:0];

    // bgTrunc_i_sub4_i_14_i87_add134_sel_x(BITSELECT,8)@24
    assign bgTrunc_i_sub4_i_14_i87_add134_sel_x_b = $unsigned(i_sub4_i_14_i87_add134_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,196)@24
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_14_i87_add134_sel_x_b, redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x(CHOOSEBITS,195)@24
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_a[16:16]};

    // SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0(STALLREG,4475)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_r_valid <= 1'b0;
            SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_r_valid <= SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_backStall & (SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_r_valid | SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_i_valid);

            if (SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_i_valid = SE_i_unnamed_add133_V0;
    // Stall signal propagation
    assign SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_backStall = SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_r_valid | ~ (SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_i_valid);

    // Valid
    assign SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_V = SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_r_valid : SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_i_valid;

    assign SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_D0 = SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q;

    // redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0(REG,2749)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_q <= $unsigned(SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_D0);
        end
    end

    // i_cmp3_i_15_i92_add137(COMPARE,354)@25
    assign i_cmp3_i_15_i92_add137_a = {2'b00, redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_q};
    assign i_cmp3_i_15_i92_add137_b = {2'b00, redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_q};
    assign i_cmp3_i_15_i92_add137_o = $unsigned(i_cmp3_i_15_i92_add137_a) - $unsigned(i_cmp3_i_15_i92_add137_b);
    assign i_cmp3_i_15_i92_add137_c[0] = i_cmp3_i_15_i92_add137_o[33];

    // SE_i_unnamed_add138(STALLENABLE,3522)
    // Valid signal propagation
    assign SE_i_unnamed_add138_V0 = SE_i_unnamed_add138_R_v_0;
    // Stall signal propagation
    assign SE_i_unnamed_add138_s_tv_0 = SE_i_sub4_i_15_i93_add139_backStall & SE_i_unnamed_add138_R_v_0;
    // Backward Enable generation
    assign SE_i_unnamed_add138_backEN = ~ (SE_i_unnamed_add138_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_unnamed_add138_and0 = SE_i_cmp3_i_15_i92_add137_V0 & SE_i_unnamed_add138_backEN;
    assign SE_i_unnamed_add138_v_s_0 = SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_V1 & SE_i_unnamed_add138_and0;
    // Backward Stall generation
    assign SE_i_unnamed_add138_backStall = ~ (SE_i_unnamed_add138_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_unnamed_add138_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_unnamed_add138_backEN == 1'b0)
            begin
                SE_i_unnamed_add138_R_v_0 <= SE_i_unnamed_add138_R_v_0 & SE_i_unnamed_add138_s_tv_0;
            end
            else
            begin
                SE_i_unnamed_add138_R_v_0 <= SE_i_unnamed_add138_v_s_0;
            end

        end
    end

    // i_unnamed_add138(MUX,532)@25 + 1
    assign i_unnamed_add138_s = i_cmp3_i_15_i92_add137_c;
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_unnamed_add138_q <= 32'b0;
        end
        else if (SE_i_unnamed_add138_backEN == 1'b1)
        begin
            unique case (i_unnamed_add138_s)
                1'b0 : i_unnamed_add138_q <= redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_q;
                1'b1 : i_unnamed_add138_q <= c_i32_0297_q;
                default : i_unnamed_add138_q <= 32'b0;
            endcase
        end
    end

    // redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0(REG,2750)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_backEN == 1'b1)
        begin
            redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_q <= $unsigned(redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_q);
        end
    end

    // i_sub4_i_15_i93_add139(SUB,498)@26
    assign i_sub4_i_15_i93_add139_a = {1'b0, redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_q};
    assign i_sub4_i_15_i93_add139_b = {1'b0, i_unnamed_add138_q};
    assign i_sub4_i_15_i93_add139_o = $unsigned(i_sub4_i_15_i93_add139_a) - $unsigned(i_sub4_i_15_i93_add139_b);
    assign i_sub4_i_15_i93_add139_q = i_sub4_i_15_i93_add139_o[32:0];

    // bgTrunc_i_sub4_i_15_i93_add139_sel_x(BITSELECT,9)@26
    assign bgTrunc_i_sub4_i_15_i93_add139_sel_x_b = $unsigned(i_sub4_i_15_i93_add139_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,199)@26
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_15_i93_add139_sel_x_b, redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x(CHOOSEBITS,198)@26
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_a[15:15]};

    // SE_i_cmp3_i_16_i98_add142(STALLENABLE,3281)
    // Valid signal propagation
    assign SE_i_cmp3_i_16_i98_add142_V0 = SE_i_cmp3_i_16_i98_add142_R_v_0;
    // Stall signal propagation
    assign SE_i_cmp3_i_16_i98_add142_s_tv_0 = SE_i_unnamed_add143_backStall & SE_i_cmp3_i_16_i98_add142_R_v_0;
    // Backward Enable generation
    assign SE_i_cmp3_i_16_i98_add142_backEN = ~ (SE_i_cmp3_i_16_i98_add142_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_cmp3_i_16_i98_add142_v_s_0 = SE_i_cmp3_i_16_i98_add142_backEN & SR_SE_i_cmp3_i_16_i98_add142_V;
    // Backward Stall generation
    assign SE_i_cmp3_i_16_i98_add142_backStall = ~ (SE_i_cmp3_i_16_i98_add142_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_cmp3_i_16_i98_add142_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_cmp3_i_16_i98_add142_backEN == 1'b0)
            begin
                SE_i_cmp3_i_16_i98_add142_R_v_0 <= SE_i_cmp3_i_16_i98_add142_R_v_0 & SE_i_cmp3_i_16_i98_add142_s_tv_0;
            end
            else
            begin
                SE_i_cmp3_i_16_i98_add142_R_v_0 <= SE_i_cmp3_i_16_i98_add142_v_s_0;
            end

        end
    end

    // SR_SE_i_cmp3_i_16_i98_add142(STALLREG,4476)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_i_cmp3_i_16_i98_add142_r_valid <= 1'b0;
            SR_SE_i_cmp3_i_16_i98_add142_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
            SR_SE_i_cmp3_i_16_i98_add142_r_data1 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_i_cmp3_i_16_i98_add142_r_valid <= SE_i_cmp3_i_16_i98_add142_backStall & (SR_SE_i_cmp3_i_16_i98_add142_r_valid | SR_SE_i_cmp3_i_16_i98_add142_i_valid);

            if (SR_SE_i_cmp3_i_16_i98_add142_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_i_cmp3_i_16_i98_add142_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q;
                SR_SE_i_cmp3_i_16_i98_add142_r_data1 <= $unsigned(redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_i_cmp3_i_16_i98_add142_and0 = SE_i_sub4_i_15_i93_add139_V0;
    assign SR_SE_i_cmp3_i_16_i98_add142_i_valid = SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_V0 & SR_SE_i_cmp3_i_16_i98_add142_and0;
    // Stall signal propagation
    assign SR_SE_i_cmp3_i_16_i98_add142_backStall = SR_SE_i_cmp3_i_16_i98_add142_r_valid | ~ (SR_SE_i_cmp3_i_16_i98_add142_i_valid);

    // Valid
    assign SR_SE_i_cmp3_i_16_i98_add142_V = SR_SE_i_cmp3_i_16_i98_add142_r_valid == 1'b1 ? SR_SE_i_cmp3_i_16_i98_add142_r_valid : SR_SE_i_cmp3_i_16_i98_add142_i_valid;

    // Data0
    assign SR_SE_i_cmp3_i_16_i98_add142_D0 = SR_SE_i_cmp3_i_16_i98_add142_r_valid == 1'b1 ? SR_SE_i_cmp3_i_16_i98_add142_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q;
    // Data1
    assign SR_SE_i_cmp3_i_16_i98_add142_D1 = SR_SE_i_cmp3_i_16_i98_add142_r_valid == 1'b1 ? SR_SE_i_cmp3_i_16_i98_add142_r_data1 : redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_q;

    // SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0(STALLENABLE,3816)
    // Valid signal propagation
    assign SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_V0 = SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_R_v_0;
    assign SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_V1 = SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_R_v_1;
    assign SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_V2 = SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_R_v_2;
    // Stall signal propagation
    assign SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_s_tv_0 = SE_i_cmp3_i_15_i92_add137_backStall & SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_R_v_0;
    assign SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_s_tv_1 = SE_i_unnamed_add138_backStall & SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_R_v_1;
    assign SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_s_tv_2 = SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_backStall & SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_R_v_2;
    // Backward Enable generation
    assign SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_or0 = SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_s_tv_0;
    assign SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_or1 = SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_s_tv_1 | SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_or0;
    assign SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_backEN = ~ (SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_s_tv_2 | SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_or1);
    // Determine whether to write valid data into the first register stage
    assign SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_v_s_0 = SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_backEN & SR_SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_V;
    // Backward Stall generation
    assign SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_backStall = ~ (SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_R_v_0 <= 1'b0;
            SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_R_v_1 <= 1'b0;
            SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_R_v_2 <= 1'b0;
        end
        else
        begin
            if (SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_backEN == 1'b0)
            begin
                SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_R_v_0 <= SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_R_v_0 & SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_s_tv_0;
            end
            else
            begin
                SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_R_v_0 <= SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_v_s_0;
            end

            if (SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_backEN == 1'b0)
            begin
                SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_R_v_1 <= SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_R_v_1 & SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_s_tv_1;
            end
            else
            begin
                SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_R_v_1 <= SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_v_s_0;
            end

            if (SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_backEN == 1'b0)
            begin
                SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_R_v_2 <= SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_R_v_2 & SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_s_tv_2;
            end
            else
            begin
                SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_R_v_2 <= SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_v_s_0;
            end

        end
    end

    // SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0(STALLENABLE,3817)
    // Valid signal propagation
    assign SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_V0 = SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_R_v_0;
    assign SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_V1 = SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_R_v_1;
    // Stall signal propagation
    assign SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_s_tv_0 = SR_SE_i_cmp3_i_16_i98_add142_backStall & SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_R_v_0;
    assign SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_s_tv_1 = SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_backStall & SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_R_v_1;
    // Backward Enable generation
    assign SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_or0 = SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_s_tv_0;
    assign SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_backEN = ~ (SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_s_tv_1 | SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_v_s_0 = SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_backEN & SE_redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_V2;
    // Backward Stall generation
    assign SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_backStall = ~ (SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_R_v_0 <= 1'b0;
            SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_backEN == 1'b0)
            begin
                SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_R_v_0 <= SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_R_v_0 & SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_s_tv_0;
            end
            else
            begin
                SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_R_v_0 <= SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_v_s_0;
            end

            if (SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_backEN == 1'b0)
            begin
                SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_R_v_1 <= SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_R_v_1 & SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_s_tv_1;
            end
            else
            begin
                SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_R_v_1 <= SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_v_s_0;
            end

        end
    end

    // SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0(STALLENABLE,3818)
    // Valid signal propagation
    assign SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_V0 = SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_R_v_0;
    assign SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_V1 = SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_R_v_1;
    // Stall signal propagation
    assign SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_s_tv_0 = SE_i_unnamed_add143_backStall & SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_R_v_0;
    assign SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_s_tv_1 = SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_backStall & SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_R_v_1;
    // Backward Enable generation
    assign SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_or0 = SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_s_tv_0;
    assign SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_backEN = ~ (SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_s_tv_1 | SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_v_s_0 = SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_backEN & SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_V1;
    // Backward Stall generation
    assign SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_backStall = ~ (SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_R_v_0 <= 1'b0;
            SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_backEN == 1'b0)
            begin
                SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_R_v_0 <= SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_R_v_0 & SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_s_tv_0;
            end
            else
            begin
                SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_R_v_0 <= SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_v_s_0;
            end

            if (SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_backEN == 1'b0)
            begin
                SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_R_v_1 <= SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_R_v_1 & SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_s_tv_1;
            end
            else
            begin
                SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_R_v_1 <= SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_v_s_0;
            end

        end
    end

    // redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0(REG,2680)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_backEN == 1'b1)
        begin
            redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_q <= $unsigned(redist85_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_23_0_q);
        end
    end

    // redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0(REG,2681)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_backEN == 1'b1)
        begin
            redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_q <= $unsigned(redist86_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_24_0_q);
        end
    end

    // i_cmp3_i_16_i98_add142(COMPARE,355)@26 + 1
    assign i_cmp3_i_16_i98_add142_a = {2'b00, SR_SE_i_cmp3_i_16_i98_add142_D0};
    assign i_cmp3_i_16_i98_add142_b = {2'b00, SR_SE_i_cmp3_i_16_i98_add142_D1};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_cmp3_i_16_i98_add142_o <= 34'b0;
        end
        else if (SE_i_cmp3_i_16_i98_add142_backEN == 1'b1)
        begin
            i_cmp3_i_16_i98_add142_o <= $unsigned(i_cmp3_i_16_i98_add142_a) - $unsigned(i_cmp3_i_16_i98_add142_b);
        end
    end
    assign i_cmp3_i_16_i98_add142_c[0] = i_cmp3_i_16_i98_add142_o[33];

    // i_unnamed_add143(MUX,533)@27
    assign i_unnamed_add143_s = i_cmp3_i_16_i98_add142_c;
    always @(i_unnamed_add143_s or redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_q or c_i32_0297_q)
    begin
        unique case (i_unnamed_add143_s)
            1'b0 : i_unnamed_add143_q = redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_q;
            1'b1 : i_unnamed_add143_q = c_i32_0297_q;
            default : i_unnamed_add143_q = 32'b0;
        endcase
    end

    // SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0(STALLENABLE,3892)
    // Valid signal propagation
    assign SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_V0 = SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_unnamed_add143_backStall & SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_backEN & SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_V;
    // Backward Stall generation
    assign SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0(STALLREG,4477)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_r_valid <= 1'b0;
            SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_r_valid <= SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_backStall & (SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_r_valid | SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_i_valid);

            if (SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_i_valid = SE_i_sub4_i_15_i93_add139_V1;
    // Stall signal propagation
    assign SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_backStall = SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_r_valid | ~ (SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_i_valid);

    // Valid
    assign SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_V = SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_r_valid : SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_i_valid;

    assign SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_D0 = SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q;

    // redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0(REG,2748)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_q <= $unsigned(SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_D0);
        end
    end

    // i_sub4_i_16_i99_add144(SUB,499)@27
    assign i_sub4_i_16_i99_add144_a = {1'b0, redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_q};
    assign i_sub4_i_16_i99_add144_b = {1'b0, i_unnamed_add143_q};
    assign i_sub4_i_16_i99_add144_o = $unsigned(i_sub4_i_16_i99_add144_a) - $unsigned(i_sub4_i_16_i99_add144_b);
    assign i_sub4_i_16_i99_add144_q = i_sub4_i_16_i99_add144_o[32:0];

    // bgTrunc_i_sub4_i_16_i99_add144_sel_x(BITSELECT,10)@27
    assign bgTrunc_i_sub4_i_16_i99_add144_sel_x_b = $unsigned(i_sub4_i_16_i99_add144_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,202)@27
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_16_i99_add144_sel_x_b, redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x(CHOOSEBITS,201)@27
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_a[14:14]};

    // redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0(REG,2746)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_q <= $unsigned(i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q);
        end
    end

    // i_cmp3_i_17_i104_add147(COMPARE,356)@28
    assign i_cmp3_i_17_i104_add147_a = {2'b00, redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_q};
    assign i_cmp3_i_17_i104_add147_b = {2'b00, redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_q};
    assign i_cmp3_i_17_i104_add147_o = $unsigned(i_cmp3_i_17_i104_add147_a) - $unsigned(i_cmp3_i_17_i104_add147_b);
    assign i_cmp3_i_17_i104_add147_c[0] = i_cmp3_i_17_i104_add147_o[33];

    // SE_i_unnamed_add148(STALLENABLE,3524)
    // Valid signal propagation
    assign SE_i_unnamed_add148_V0 = SE_i_unnamed_add148_R_v_0;
    // Stall signal propagation
    assign SE_i_unnamed_add148_s_tv_0 = SE_i_sub4_i_17_i105_add149_backStall & SE_i_unnamed_add148_R_v_0;
    // Backward Enable generation
    assign SE_i_unnamed_add148_backEN = ~ (SE_i_unnamed_add148_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_unnamed_add148_v_s_0 = SE_i_unnamed_add148_backEN & SR_SE_i_unnamed_add148_V;
    // Backward Stall generation
    assign SE_i_unnamed_add148_backStall = ~ (SE_i_unnamed_add148_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_unnamed_add148_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_unnamed_add148_backEN == 1'b0)
            begin
                SE_i_unnamed_add148_R_v_0 <= SE_i_unnamed_add148_R_v_0 & SE_i_unnamed_add148_s_tv_0;
            end
            else
            begin
                SE_i_unnamed_add148_R_v_0 <= SE_i_unnamed_add148_v_s_0;
            end

        end
    end

    // SR_SE_i_unnamed_add148(STALLREG,4478)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_i_unnamed_add148_r_valid <= 1'b0;
            SR_SE_i_unnamed_add148_r_data0 <= 1'bx;
            SR_SE_i_unnamed_add148_r_data1 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_i_unnamed_add148_r_valid <= SE_i_unnamed_add148_backStall & (SR_SE_i_unnamed_add148_r_valid | SR_SE_i_unnamed_add148_i_valid);

            if (SR_SE_i_unnamed_add148_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_i_unnamed_add148_r_data0 <= i_cmp3_i_17_i104_add147_c;
                SR_SE_i_unnamed_add148_r_data1 <= $unsigned(redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_i_unnamed_add148_and0 = SE_i_cmp3_i_17_i104_add147_V0;
    assign SR_SE_i_unnamed_add148_i_valid = SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_V1 & SR_SE_i_unnamed_add148_and0;
    // Stall signal propagation
    assign SR_SE_i_unnamed_add148_backStall = SR_SE_i_unnamed_add148_r_valid | ~ (SR_SE_i_unnamed_add148_i_valid);

    // Valid
    assign SR_SE_i_unnamed_add148_V = SR_SE_i_unnamed_add148_r_valid == 1'b1 ? SR_SE_i_unnamed_add148_r_valid : SR_SE_i_unnamed_add148_i_valid;

    // Data0
    assign SR_SE_i_unnamed_add148_D0 = SR_SE_i_unnamed_add148_r_valid == 1'b1 ? SR_SE_i_unnamed_add148_r_data0 : i_cmp3_i_17_i104_add147_c;
    // Data1
    assign SR_SE_i_unnamed_add148_D1 = SR_SE_i_unnamed_add148_r_valid == 1'b1 ? SR_SE_i_unnamed_add148_r_data1 : redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_q;

    // SE_i_cmp3_i_17_i104_add147(STALLENABLE,3282)
    // Valid signal propagation
    assign SE_i_cmp3_i_17_i104_add147_V0 = SE_i_cmp3_i_17_i104_add147_wireValid;
    // Backward Stall generation
    assign SE_i_cmp3_i_17_i104_add147_backStall = SR_SE_i_unnamed_add148_backStall | ~ (SE_i_cmp3_i_17_i104_add147_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_cmp3_i_17_i104_add147_and0 = SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_V0;
    assign SE_i_cmp3_i_17_i104_add147_wireValid = SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_V0 & SE_i_cmp3_i_17_i104_add147_and0;

    // SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0(STALLREG,4455)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_r_valid <= 1'b0;
            SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_r_valid <= SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_backStall & (SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_r_valid | SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_i_valid);

            if (SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_r_data0 <= $unsigned(redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_i_valid = SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_V1;
    // Stall signal propagation
    assign SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_backStall = SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_r_valid | ~ (SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_i_valid);

    // Valid
    assign SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_V = SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_r_valid == 1'b1 ? SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_r_valid : SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_i_valid;

    assign SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_D0 = SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_r_valid == 1'b1 ? SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_r_data0 : redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_q;

    // SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0(STALLENABLE,3819)
    // Valid signal propagation
    assign SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_V0 = SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_R_v_0;
    assign SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_V1 = SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_R_v_1;
    assign SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_V2 = SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_R_v_2;
    // Stall signal propagation
    assign SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_s_tv_0 = SE_i_cmp3_i_17_i104_add147_backStall & SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_R_v_0;
    assign SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_s_tv_1 = SR_SE_i_unnamed_add148_backStall & SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_R_v_1;
    assign SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_s_tv_2 = SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_backStall & SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_R_v_2;
    // Backward Enable generation
    assign SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_or0 = SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_s_tv_0;
    assign SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_or1 = SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_s_tv_1 | SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_or0;
    assign SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_backEN = ~ (SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_s_tv_2 | SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_or1);
    // Determine whether to write valid data into the first register stage
    assign SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_v_s_0 = SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_backEN & SR_SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_V;
    // Backward Stall generation
    assign SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_backStall = ~ (SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_R_v_0 <= 1'b0;
            SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_R_v_1 <= 1'b0;
            SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_R_v_2 <= 1'b0;
        end
        else
        begin
            if (SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_backEN == 1'b0)
            begin
                SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_R_v_0 <= SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_R_v_0 & SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_s_tv_0;
            end
            else
            begin
                SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_R_v_0 <= SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_v_s_0;
            end

            if (SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_backEN == 1'b0)
            begin
                SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_R_v_1 <= SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_R_v_1 & SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_s_tv_1;
            end
            else
            begin
                SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_R_v_1 <= SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_v_s_0;
            end

            if (SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_backEN == 1'b0)
            begin
                SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_R_v_2 <= SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_R_v_2 & SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_s_tv_2;
            end
            else
            begin
                SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_R_v_2 <= SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_v_s_0;
            end

        end
    end

    // SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0(STALLENABLE,3820)
    // Valid signal propagation
    assign SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_V0 = SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_R_v_0;
    assign SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_V1 = SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_R_v_1;
    // Stall signal propagation
    assign SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_s_tv_0 = SE_i_cmp3_i_18_i110_add152_backStall & SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_R_v_0;
    assign SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_s_tv_1 = SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_backStall & SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_R_v_1;
    // Backward Enable generation
    assign SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_or0 = SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_s_tv_0;
    assign SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_backEN = ~ (SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_s_tv_1 | SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_v_s_0 = SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_backEN & SE_redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_V2;
    // Backward Stall generation
    assign SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_backStall = ~ (SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_R_v_0 <= 1'b0;
            SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_backEN == 1'b0)
            begin
                SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_R_v_0 <= SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_R_v_0 & SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_s_tv_0;
            end
            else
            begin
                SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_R_v_0 <= SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_v_s_0;
            end

            if (SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_backEN == 1'b0)
            begin
                SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_R_v_1 <= SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_R_v_1 & SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_s_tv_1;
            end
            else
            begin
                SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_R_v_1 <= SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_v_s_0;
            end

        end
    end

    // SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0(STALLENABLE,3821)
    // Valid signal propagation
    assign SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_V0 = SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_R_v_0;
    assign SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_V1 = SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_R_v_1;
    // Stall signal propagation
    assign SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_s_tv_0 = SE_i_unnamed_add153_backStall & SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_R_v_0;
    assign SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_s_tv_1 = SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_backStall & SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_R_v_1;
    // Backward Enable generation
    assign SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_or0 = SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_s_tv_0;
    assign SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_backEN = ~ (SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_s_tv_1 | SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_v_s_0 = SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_backEN & SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_V1;
    // Backward Stall generation
    assign SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_backStall = ~ (SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_R_v_0 <= 1'b0;
            SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_backEN == 1'b0)
            begin
                SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_R_v_0 <= SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_R_v_0 & SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_s_tv_0;
            end
            else
            begin
                SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_R_v_0 <= SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_v_s_0;
            end

            if (SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_backEN == 1'b0)
            begin
                SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_R_v_1 <= SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_R_v_1 & SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_s_tv_1;
            end
            else
            begin
                SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_R_v_1 <= SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_v_s_0;
            end

        end
    end

    // redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0(REG,2683)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_backEN == 1'b1)
        begin
            redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_q <= $unsigned(redist88_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_26_0_q);
        end
    end

    // redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0(REG,2684)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_backEN == 1'b1)
        begin
            redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_q <= $unsigned(redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_q);
        end
    end

    // i_unnamed_add148(MUX,534)@28 + 1
    assign i_unnamed_add148_s = SR_SE_i_unnamed_add148_D0;
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_unnamed_add148_q <= 32'b0;
        end
        else if (SE_i_unnamed_add148_backEN == 1'b1)
        begin
            unique case (i_unnamed_add148_s)
                1'b0 : i_unnamed_add148_q <= SR_SE_i_unnamed_add148_D1;
                1'b1 : i_unnamed_add148_q <= c_i32_0297_q;
                default : i_unnamed_add148_q <= 32'b0;
            endcase
        end
    end

    // redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0(REG,2747)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_backEN == 1'b1)
        begin
            redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_q <= $unsigned(SR_SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_D0);
        end
    end

    // i_sub4_i_17_i105_add149(SUB,500)@29
    assign i_sub4_i_17_i105_add149_a = {1'b0, redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_q};
    assign i_sub4_i_17_i105_add149_b = {1'b0, i_unnamed_add148_q};
    assign i_sub4_i_17_i105_add149_o = $unsigned(i_sub4_i_17_i105_add149_a) - $unsigned(i_sub4_i_17_i105_add149_b);
    assign i_sub4_i_17_i105_add149_q = i_sub4_i_17_i105_add149_o[32:0];

    // bgTrunc_i_sub4_i_17_i105_add149_sel_x(BITSELECT,11)@29
    assign bgTrunc_i_sub4_i_17_i105_add149_sel_x_b = $unsigned(i_sub4_i_17_i105_add149_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,205)@29
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_17_i105_add149_sel_x_b, redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x(CHOOSEBITS,204)@29
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_a[13:13]};

    // i_cmp3_i_18_i110_add152(COMPARE,357)@29 + 1
    assign i_cmp3_i_18_i110_add152_a = {2'b00, i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q};
    assign i_cmp3_i_18_i110_add152_b = {2'b00, redist89_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_27_0_q};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_cmp3_i_18_i110_add152_o <= 34'b0;
        end
        else if (SE_i_cmp3_i_18_i110_add152_backEN == 1'b1)
        begin
            i_cmp3_i_18_i110_add152_o <= $unsigned(i_cmp3_i_18_i110_add152_a) - $unsigned(i_cmp3_i_18_i110_add152_b);
        end
    end
    assign i_cmp3_i_18_i110_add152_c[0] = i_cmp3_i_18_i110_add152_o[33];

    // i_unnamed_add153(MUX,535)@30
    assign i_unnamed_add153_s = i_cmp3_i_18_i110_add152_c;
    always @(i_unnamed_add153_s or redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_q or c_i32_0297_q)
    begin
        unique case (i_unnamed_add153_s)
            1'b0 : i_unnamed_add153_q = redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_q;
            1'b1 : i_unnamed_add153_q = c_i32_0297_q;
            default : i_unnamed_add153_q = 32'b0;
        endcase
    end

    // SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0(STALLENABLE,3889)
    // Valid signal propagation
    assign SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_V0 = SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_unnamed_add153_backStall & SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_backEN & SE_i_sub4_i_17_i105_add149_V1;
    // Backward Stall generation
    assign SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0(REG,2745)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_q <= $unsigned(i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q);
        end
    end

    // i_sub4_i_18_i111_add154(SUB,501)@30
    assign i_sub4_i_18_i111_add154_a = {1'b0, redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_q};
    assign i_sub4_i_18_i111_add154_b = {1'b0, i_unnamed_add153_q};
    assign i_sub4_i_18_i111_add154_o = $unsigned(i_sub4_i_18_i111_add154_a) - $unsigned(i_sub4_i_18_i111_add154_b);
    assign i_sub4_i_18_i111_add154_q = i_sub4_i_18_i111_add154_o[32:0];

    // bgTrunc_i_sub4_i_18_i111_add154_sel_x(BITSELECT,12)@30
    assign bgTrunc_i_sub4_i_18_i111_add154_sel_x_b = $unsigned(i_sub4_i_18_i111_add154_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,208)@30
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_18_i111_add154_sel_x_b, redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x(CHOOSEBITS,207)@30
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_a[12:12]};

    // SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0(STALLREG,4480)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_r_valid <= 1'b0;
            SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_r_valid <= SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_backStall & (SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_r_valid | SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_i_valid);

            if (SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_i_valid = SE_i_unnamed_add153_V0;
    // Stall signal propagation
    assign SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_backStall = SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_r_valid | ~ (SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_i_valid);

    // Valid
    assign SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_V = SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_r_valid : SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_i_valid;

    assign SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_D0 = SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q;

    // SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0(STALLENABLE,3887)
    // Valid signal propagation
    assign SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_V0 = SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_V1 = SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_R_v_1;
    // Stall signal propagation
    assign SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_cmp3_i_19_i116_add157_backStall & SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_s_tv_1 = SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_backStall & SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_R_v_1;
    // Backward Enable generation
    assign SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_or0 = SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_s_tv_0;
    assign SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_s_tv_1 | SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_backEN & SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_V;
    // Backward Stall generation
    assign SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
            SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_v_s_0;
            end

            if (SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_R_v_1 & SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_s_tv_1;
            end
            else
            begin
                SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // SE_i_cmp3_i_19_i116_add157(STALLENABLE,3284)
    // Valid signal propagation
    assign SE_i_cmp3_i_19_i116_add157_V0 = SE_i_cmp3_i_19_i116_add157_wireValid;
    // Backward Stall generation
    assign SE_i_cmp3_i_19_i116_add157_backStall = SE_i_unnamed_add158_backStall | ~ (SE_i_cmp3_i_19_i116_add157_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_cmp3_i_19_i116_add157_and0 = SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_V0;
    assign SE_i_cmp3_i_19_i116_add157_wireValid = SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_V0 & SE_i_cmp3_i_19_i116_add157_and0;

    // SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0(STALLREG,4456)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_r_valid <= 1'b0;
            SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_r_valid <= SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_backStall & (SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_r_valid | SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_i_valid);

            if (SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_r_data0 <= $unsigned(redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_i_valid = SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_V1;
    // Stall signal propagation
    assign SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_backStall = SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_r_valid | ~ (SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_i_valid);

    // Valid
    assign SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_V = SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_r_valid == 1'b1 ? SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_r_valid : SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_i_valid;

    assign SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_D0 = SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_r_valid == 1'b1 ? SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_r_data0 : redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_q;

    // SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0(STALLENABLE,3822)
    // Valid signal propagation
    assign SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_V0 = SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_R_v_0;
    assign SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_V1 = SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_R_v_1;
    assign SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_V2 = SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_R_v_2;
    // Stall signal propagation
    assign SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_s_tv_0 = SE_i_cmp3_i_19_i116_add157_backStall & SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_R_v_0;
    assign SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_s_tv_1 = SE_i_unnamed_add158_backStall & SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_R_v_1;
    assign SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_s_tv_2 = SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_backStall & SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_R_v_2;
    // Backward Enable generation
    assign SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_or0 = SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_s_tv_0;
    assign SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_or1 = SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_s_tv_1 | SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_or0;
    assign SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_backEN = ~ (SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_s_tv_2 | SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_or1);
    // Determine whether to write valid data into the first register stage
    assign SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_v_s_0 = SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_backEN & SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_V;
    // Backward Stall generation
    assign SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_backStall = ~ (SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_R_v_0 <= 1'b0;
            SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_R_v_1 <= 1'b0;
            SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_R_v_2 <= 1'b0;
        end
        else
        begin
            if (SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_backEN == 1'b0)
            begin
                SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_R_v_0 <= SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_R_v_0 & SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_s_tv_0;
            end
            else
            begin
                SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_R_v_0 <= SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_v_s_0;
            end

            if (SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_backEN == 1'b0)
            begin
                SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_R_v_1 <= SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_R_v_1 & SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_s_tv_1;
            end
            else
            begin
                SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_R_v_1 <= SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_v_s_0;
            end

            if (SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_backEN == 1'b0)
            begin
                SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_R_v_2 <= SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_R_v_2 & SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_s_tv_2;
            end
            else
            begin
                SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_R_v_2 <= SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_v_s_0;
            end

        end
    end

    // SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0(STALLENABLE,3823)
    // Valid signal propagation
    assign SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_V0 = SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_R_v_0;
    assign SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_V1 = SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_R_v_1;
    // Stall signal propagation
    assign SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_s_tv_0 = SE_i_cmp3_i_20_i122_add162_backStall & SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_R_v_0;
    assign SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_s_tv_1 = SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_backStall & SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_R_v_1;
    // Backward Enable generation
    assign SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_or0 = SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_s_tv_0;
    assign SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_backEN = ~ (SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_s_tv_1 | SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_v_s_0 = SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_backEN & SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_V2;
    // Backward Stall generation
    assign SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_backStall = ~ (SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_R_v_0 <= 1'b0;
            SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_backEN == 1'b0)
            begin
                SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_R_v_0 <= SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_R_v_0 & SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_s_tv_0;
            end
            else
            begin
                SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_R_v_0 <= SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_v_s_0;
            end

            if (SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_backEN == 1'b0)
            begin
                SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_R_v_1 <= SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_R_v_1 & SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_s_tv_1;
            end
            else
            begin
                SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_R_v_1 <= SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_v_s_0;
            end

        end
    end

    // redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0(REG,2685)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_backEN == 1'b1)
        begin
            redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_q <= $unsigned(SR_SE_redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_D0);
        end
    end

    // redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0(REG,2686)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_backEN == 1'b1)
        begin
            redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_q <= $unsigned(redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_q);
        end
    end

    // redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0(REG,2687)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_backEN == 1'b1)
        begin
            redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_q <= $unsigned(redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_q);
        end
    end

    // SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0(STALLENABLE,3824)
    // Valid signal propagation
    assign SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_V0 = SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_R_v_0;
    assign SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_V1 = SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_R_v_1;
    // Stall signal propagation
    assign SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_s_tv_0 = SE_i_unnamed_add163_backStall & SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_R_v_0;
    assign SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_s_tv_1 = SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_backStall & SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_R_v_1;
    // Backward Enable generation
    assign SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_or0 = SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_s_tv_0;
    assign SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_backEN = ~ (SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_s_tv_1 | SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_v_s_0 = SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_backEN & SE_redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_V1;
    // Backward Stall generation
    assign SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_backStall = ~ (SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_R_v_0 <= 1'b0;
            SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_backEN == 1'b0)
            begin
                SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_R_v_0 <= SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_R_v_0 & SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_s_tv_0;
            end
            else
            begin
                SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_R_v_0 <= SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_v_s_0;
            end

            if (SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_backEN == 1'b0)
            begin
                SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_R_v_1 <= SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_R_v_1 & SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_s_tv_1;
            end
            else
            begin
                SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_R_v_1 <= SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_v_s_0;
            end

        end
    end

    // SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0(STALLREG,4457)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_r_valid <= 1'b0;
            SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_r_valid <= SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_backStall & (SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_r_valid | SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_i_valid);

            if (SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_r_data0 <= $unsigned(redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_i_valid = SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_V1;
    // Stall signal propagation
    assign SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_backStall = SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_r_valid | ~ (SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_i_valid);

    // Valid
    assign SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_V = SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_r_valid == 1'b1 ? SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_r_valid : SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_i_valid;

    assign SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_D0 = SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_r_valid == 1'b1 ? SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_r_data0 : redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_q;

    // redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0(REG,2688)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_backEN == 1'b1)
        begin
            redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_q <= $unsigned(SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_D0);
        end
    end

    // SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0(STALLENABLE,3884)
    // Valid signal propagation
    assign SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_V0 = SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_R_v_0;
    // Stall signal propagation
    assign SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_s_tv_0 = SE_i_sub4_i_21_i129_add169_backStall & SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_R_v_0;
    // Backward Enable generation
    assign SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_backEN = ~ (SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_v_s_0 = SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_backEN & SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_V1;
    // Backward Stall generation
    assign SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_backStall = ~ (SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_backEN == 1'b0)
            begin
                SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_R_v_0 & SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_s_tv_0;
            end
            else
            begin
                SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_v_s_0;
            end

        end
    end

    // SE_i_cmp3_i_21_i128_add167(STALLENABLE,3287)
    // Valid signal propagation
    assign SE_i_cmp3_i_21_i128_add167_V0 = SE_i_cmp3_i_21_i128_add167_wireValid;
    // Backward Stall generation
    assign SE_i_cmp3_i_21_i128_add167_backStall = SE_i_unnamed_add168_backStall | ~ (SE_i_cmp3_i_21_i128_add167_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_cmp3_i_21_i128_add167_and0 = SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_V0;
    assign SE_i_cmp3_i_21_i128_add167_wireValid = SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_V0 & SE_i_cmp3_i_21_i128_add167_and0;

    // SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0(STALLENABLE,3883)
    // Valid signal propagation
    assign SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_V0 = SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_V1 = SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_R_v_1;
    // Stall signal propagation
    assign SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_cmp3_i_21_i128_add167_backStall & SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_s_tv_1 = SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_backStall & SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_R_v_1;
    // Backward Enable generation
    assign SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_or0 = SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_s_tv_0;
    assign SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_s_tv_1 | SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_backEN & SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_V;
    // Backward Stall generation
    assign SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
            SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_v_s_0;
            end

            if (SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_R_v_1 & SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_s_tv_1;
            end
            else
            begin
                SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0(REG,2743)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_q <= $unsigned(SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_D0);
        end
    end

    // i_cmp3_i_19_i116_add157(COMPARE,358)@31
    assign i_cmp3_i_19_i116_add157_a = {2'b00, redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_q};
    assign i_cmp3_i_19_i116_add157_b = {2'b00, redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_q};
    assign i_cmp3_i_19_i116_add157_o = $unsigned(i_cmp3_i_19_i116_add157_a) - $unsigned(i_cmp3_i_19_i116_add157_b);
    assign i_cmp3_i_19_i116_add157_c[0] = i_cmp3_i_19_i116_add157_o[33];

    // i_unnamed_add158(MUX,536)@31 + 1
    assign i_unnamed_add158_s = i_cmp3_i_19_i116_add157_c;
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_unnamed_add158_q <= 32'b0;
        end
        else if (SE_i_unnamed_add158_backEN == 1'b1)
        begin
            unique case (i_unnamed_add158_s)
                1'b0 : i_unnamed_add158_q <= redist91_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_29_0_q;
                1'b1 : i_unnamed_add158_q <= c_i32_0297_q;
                default : i_unnamed_add158_q <= 32'b0;
            endcase
        end
    end

    // redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0(REG,2744)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_backEN == 1'b1)
        begin
            redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_q <= $unsigned(redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_q);
        end
    end

    // i_sub4_i_19_i117_add159(SUB,502)@32
    assign i_sub4_i_19_i117_add159_a = {1'b0, redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_q};
    assign i_sub4_i_19_i117_add159_b = {1'b0, i_unnamed_add158_q};
    assign i_sub4_i_19_i117_add159_o = $unsigned(i_sub4_i_19_i117_add159_a) - $unsigned(i_sub4_i_19_i117_add159_b);
    assign i_sub4_i_19_i117_add159_q = i_sub4_i_19_i117_add159_o[32:0];

    // bgTrunc_i_sub4_i_19_i117_add159_sel_x(BITSELECT,13)@32
    assign bgTrunc_i_sub4_i_19_i117_add159_sel_x_b = $unsigned(i_sub4_i_19_i117_add159_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,214)@32
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_19_i117_add159_sel_x_b, redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x(CHOOSEBITS,213)@32
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_a[11:11]};

    // i_cmp3_i_20_i122_add162(COMPARE,360)@32 + 1
    assign i_cmp3_i_20_i122_add162_a = {2'b00, i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q};
    assign i_cmp3_i_20_i122_add162_b = {2'b00, redist92_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_30_0_q};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_cmp3_i_20_i122_add162_o <= 34'b0;
        end
        else if (SE_i_cmp3_i_20_i122_add162_backEN == 1'b1)
        begin
            i_cmp3_i_20_i122_add162_o <= $unsigned(i_cmp3_i_20_i122_add162_a) - $unsigned(i_cmp3_i_20_i122_add162_b);
        end
    end
    assign i_cmp3_i_20_i122_add162_c[0] = i_cmp3_i_20_i122_add162_o[33];

    // i_unnamed_add163(MUX,537)@33
    assign i_unnamed_add163_s = i_cmp3_i_20_i122_add162_c;
    always @(i_unnamed_add163_s or redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_q or c_i32_0297_q)
    begin
        unique case (i_unnamed_add163_s)
            1'b0 : i_unnamed_add163_q = redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_q;
            1'b1 : i_unnamed_add163_q = c_i32_0297_q;
            default : i_unnamed_add163_q = 32'b0;
        endcase
    end

    // SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0(STALLENABLE,3885)
    // Valid signal propagation
    assign SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_V0 = SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_unnamed_add163_backStall & SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_backEN & SE_i_sub4_i_19_i117_add159_V1;
    // Backward Stall generation
    assign SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0(REG,2741)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_q <= $unsigned(i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q);
        end
    end

    // i_sub4_i_20_i123_add164(SUB,504)@33
    assign i_sub4_i_20_i123_add164_a = {1'b0, redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_q};
    assign i_sub4_i_20_i123_add164_b = {1'b0, i_unnamed_add163_q};
    assign i_sub4_i_20_i123_add164_o = $unsigned(i_sub4_i_20_i123_add164_a) - $unsigned(i_sub4_i_20_i123_add164_b);
    assign i_sub4_i_20_i123_add164_q = i_sub4_i_20_i123_add164_o[32:0];

    // bgTrunc_i_sub4_i_20_i123_add164_sel_x(BITSELECT,15)@33
    assign bgTrunc_i_sub4_i_20_i123_add164_sel_x_b = $unsigned(i_sub4_i_20_i123_add164_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,217)@33
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_20_i123_add164_sel_x_b, redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x(CHOOSEBITS,216)@33
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_a[10:10]};

    // SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0(STALLREG,4481)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_r_valid <= 1'b0;
            SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_r_valid <= SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_backStall & (SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_r_valid | SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_i_valid);

            if (SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_i_valid = SE_i_unnamed_add163_V0;
    // Stall signal propagation
    assign SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_backStall = SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_r_valid | ~ (SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_i_valid);

    // Valid
    assign SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_V = SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_r_valid : SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_i_valid;

    assign SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_D0 = SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q;

    // redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0(REG,2739)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_q <= $unsigned(SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_D0);
        end
    end

    // i_cmp3_i_21_i128_add167(COMPARE,361)@34
    assign i_cmp3_i_21_i128_add167_a = {2'b00, redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_q};
    assign i_cmp3_i_21_i128_add167_b = {2'b00, redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_q};
    assign i_cmp3_i_21_i128_add167_o = $unsigned(i_cmp3_i_21_i128_add167_a) - $unsigned(i_cmp3_i_21_i128_add167_b);
    assign i_cmp3_i_21_i128_add167_c[0] = i_cmp3_i_21_i128_add167_o[33];

    // SE_i_unnamed_add168(STALLENABLE,3528)
    // Valid signal propagation
    assign SE_i_unnamed_add168_V0 = SE_i_unnamed_add168_R_v_0;
    // Stall signal propagation
    assign SE_i_unnamed_add168_s_tv_0 = SE_i_sub4_i_21_i129_add169_backStall & SE_i_unnamed_add168_R_v_0;
    // Backward Enable generation
    assign SE_i_unnamed_add168_backEN = ~ (SE_i_unnamed_add168_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_unnamed_add168_and0 = SE_i_cmp3_i_21_i128_add167_V0 & SE_i_unnamed_add168_backEN;
    assign SE_i_unnamed_add168_v_s_0 = SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_V1 & SE_i_unnamed_add168_and0;
    // Backward Stall generation
    assign SE_i_unnamed_add168_backStall = ~ (SE_i_unnamed_add168_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_unnamed_add168_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_unnamed_add168_backEN == 1'b0)
            begin
                SE_i_unnamed_add168_R_v_0 <= SE_i_unnamed_add168_R_v_0 & SE_i_unnamed_add168_s_tv_0;
            end
            else
            begin
                SE_i_unnamed_add168_R_v_0 <= SE_i_unnamed_add168_v_s_0;
            end

        end
    end

    // i_unnamed_add168(MUX,538)@34 + 1
    assign i_unnamed_add168_s = i_cmp3_i_21_i128_add167_c;
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_unnamed_add168_q <= 32'b0;
        end
        else if (SE_i_unnamed_add168_backEN == 1'b1)
        begin
            unique case (i_unnamed_add168_s)
                1'b0 : i_unnamed_add168_q <= redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_q;
                1'b1 : i_unnamed_add168_q <= c_i32_0297_q;
                default : i_unnamed_add168_q <= 32'b0;
            endcase
        end
    end

    // redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0(REG,2740)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_backEN == 1'b1)
        begin
            redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_q <= $unsigned(redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_q);
        end
    end

    // i_sub4_i_21_i129_add169(SUB,505)@35
    assign i_sub4_i_21_i129_add169_a = {1'b0, redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_q};
    assign i_sub4_i_21_i129_add169_b = {1'b0, i_unnamed_add168_q};
    assign i_sub4_i_21_i129_add169_o = $unsigned(i_sub4_i_21_i129_add169_a) - $unsigned(i_sub4_i_21_i129_add169_b);
    assign i_sub4_i_21_i129_add169_q = i_sub4_i_21_i129_add169_o[32:0];

    // bgTrunc_i_sub4_i_21_i129_add169_sel_x(BITSELECT,16)@35
    assign bgTrunc_i_sub4_i_21_i129_add169_sel_x_b = $unsigned(i_sub4_i_21_i129_add169_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,220)@35
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_21_i129_add169_sel_x_b, redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x(CHOOSEBITS,219)@35
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_a[9:9]};

    // SE_i_cmp3_i_22_i134_add172(STALLENABLE,3288)
    // Valid signal propagation
    assign SE_i_cmp3_i_22_i134_add172_V0 = SE_i_cmp3_i_22_i134_add172_R_v_0;
    // Stall signal propagation
    assign SE_i_cmp3_i_22_i134_add172_s_tv_0 = SE_i_unnamed_add173_backStall & SE_i_cmp3_i_22_i134_add172_R_v_0;
    // Backward Enable generation
    assign SE_i_cmp3_i_22_i134_add172_backEN = ~ (SE_i_cmp3_i_22_i134_add172_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_cmp3_i_22_i134_add172_v_s_0 = SE_i_cmp3_i_22_i134_add172_backEN & SR_SE_i_cmp3_i_22_i134_add172_V;
    // Backward Stall generation
    assign SE_i_cmp3_i_22_i134_add172_backStall = ~ (SE_i_cmp3_i_22_i134_add172_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_cmp3_i_22_i134_add172_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_cmp3_i_22_i134_add172_backEN == 1'b0)
            begin
                SE_i_cmp3_i_22_i134_add172_R_v_0 <= SE_i_cmp3_i_22_i134_add172_R_v_0 & SE_i_cmp3_i_22_i134_add172_s_tv_0;
            end
            else
            begin
                SE_i_cmp3_i_22_i134_add172_R_v_0 <= SE_i_cmp3_i_22_i134_add172_v_s_0;
            end

        end
    end

    // SR_SE_i_cmp3_i_22_i134_add172(STALLREG,4482)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_i_cmp3_i_22_i134_add172_r_valid <= 1'b0;
            SR_SE_i_cmp3_i_22_i134_add172_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
            SR_SE_i_cmp3_i_22_i134_add172_r_data1 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_i_cmp3_i_22_i134_add172_r_valid <= SE_i_cmp3_i_22_i134_add172_backStall & (SR_SE_i_cmp3_i_22_i134_add172_r_valid | SR_SE_i_cmp3_i_22_i134_add172_i_valid);

            if (SR_SE_i_cmp3_i_22_i134_add172_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_i_cmp3_i_22_i134_add172_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q;
                SR_SE_i_cmp3_i_22_i134_add172_r_data1 <= $unsigned(redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_i_cmp3_i_22_i134_add172_and0 = SE_i_sub4_i_21_i129_add169_V0;
    assign SR_SE_i_cmp3_i_22_i134_add172_i_valid = SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_V0 & SR_SE_i_cmp3_i_22_i134_add172_and0;
    // Stall signal propagation
    assign SR_SE_i_cmp3_i_22_i134_add172_backStall = SR_SE_i_cmp3_i_22_i134_add172_r_valid | ~ (SR_SE_i_cmp3_i_22_i134_add172_i_valid);

    // Valid
    assign SR_SE_i_cmp3_i_22_i134_add172_V = SR_SE_i_cmp3_i_22_i134_add172_r_valid == 1'b1 ? SR_SE_i_cmp3_i_22_i134_add172_r_valid : SR_SE_i_cmp3_i_22_i134_add172_i_valid;

    // Data0
    assign SR_SE_i_cmp3_i_22_i134_add172_D0 = SR_SE_i_cmp3_i_22_i134_add172_r_valid == 1'b1 ? SR_SE_i_cmp3_i_22_i134_add172_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q;
    // Data1
    assign SR_SE_i_cmp3_i_22_i134_add172_D1 = SR_SE_i_cmp3_i_22_i134_add172_r_valid == 1'b1 ? SR_SE_i_cmp3_i_22_i134_add172_r_data1 : redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_q;

    // SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0(STALLENABLE,3825)
    // Valid signal propagation
    assign SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_V0 = SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_R_v_0;
    assign SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_V1 = SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_R_v_1;
    assign SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_V2 = SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_R_v_2;
    // Stall signal propagation
    assign SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_s_tv_0 = SE_i_cmp3_i_21_i128_add167_backStall & SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_R_v_0;
    assign SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_s_tv_1 = SE_i_unnamed_add168_backStall & SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_R_v_1;
    assign SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_s_tv_2 = SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_backStall & SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_R_v_2;
    // Backward Enable generation
    assign SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_or0 = SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_s_tv_0;
    assign SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_or1 = SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_s_tv_1 | SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_or0;
    assign SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_backEN = ~ (SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_s_tv_2 | SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_or1);
    // Determine whether to write valid data into the first register stage
    assign SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_v_s_0 = SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_backEN & SR_SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_V;
    // Backward Stall generation
    assign SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_backStall = ~ (SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_R_v_0 <= 1'b0;
            SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_R_v_1 <= 1'b0;
            SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_R_v_2 <= 1'b0;
        end
        else
        begin
            if (SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_backEN == 1'b0)
            begin
                SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_R_v_0 <= SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_R_v_0 & SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_s_tv_0;
            end
            else
            begin
                SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_R_v_0 <= SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_v_s_0;
            end

            if (SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_backEN == 1'b0)
            begin
                SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_R_v_1 <= SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_R_v_1 & SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_s_tv_1;
            end
            else
            begin
                SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_R_v_1 <= SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_v_s_0;
            end

            if (SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_backEN == 1'b0)
            begin
                SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_R_v_2 <= SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_R_v_2 & SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_s_tv_2;
            end
            else
            begin
                SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_R_v_2 <= SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_v_s_0;
            end

        end
    end

    // SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0(STALLENABLE,3826)
    // Valid signal propagation
    assign SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_V0 = SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_R_v_0;
    assign SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_V1 = SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_R_v_1;
    // Stall signal propagation
    assign SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_s_tv_0 = SR_SE_i_cmp3_i_22_i134_add172_backStall & SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_R_v_0;
    assign SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_s_tv_1 = SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_backStall & SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_R_v_1;
    // Backward Enable generation
    assign SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_or0 = SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_s_tv_0;
    assign SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_backEN = ~ (SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_s_tv_1 | SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_v_s_0 = SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_backEN & SE_redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_V2;
    // Backward Stall generation
    assign SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_backStall = ~ (SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_R_v_0 <= 1'b0;
            SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_backEN == 1'b0)
            begin
                SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_R_v_0 <= SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_R_v_0 & SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_s_tv_0;
            end
            else
            begin
                SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_R_v_0 <= SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_v_s_0;
            end

            if (SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_backEN == 1'b0)
            begin
                SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_R_v_1 <= SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_R_v_1 & SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_s_tv_1;
            end
            else
            begin
                SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_R_v_1 <= SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_v_s_0;
            end

        end
    end

    // SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0(STALLENABLE,3827)
    // Valid signal propagation
    assign SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_V0 = SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_R_v_0;
    assign SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_V1 = SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_R_v_1;
    // Stall signal propagation
    assign SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_s_tv_0 = SE_i_unnamed_add173_backStall & SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_R_v_0;
    assign SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_s_tv_1 = SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_backStall & SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_R_v_1;
    // Backward Enable generation
    assign SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_or0 = SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_s_tv_0;
    assign SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_backEN = ~ (SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_s_tv_1 | SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_v_s_0 = SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_backEN & SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_V1;
    // Backward Stall generation
    assign SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_backStall = ~ (SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_R_v_0 <= 1'b0;
            SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_backEN == 1'b0)
            begin
                SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_R_v_0 <= SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_R_v_0 & SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_s_tv_0;
            end
            else
            begin
                SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_R_v_0 <= SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_v_s_0;
            end

            if (SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_backEN == 1'b0)
            begin
                SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_R_v_1 <= SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_R_v_1 & SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_s_tv_1;
            end
            else
            begin
                SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_R_v_1 <= SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_v_s_0;
            end

        end
    end

    // redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0(REG,2689)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_backEN == 1'b1)
        begin
            redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_q <= $unsigned(redist94_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_32_0_q);
        end
    end

    // redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0(REG,2690)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_backEN == 1'b1)
        begin
            redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_q <= $unsigned(redist95_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_33_0_q);
        end
    end

    // i_cmp3_i_22_i134_add172(COMPARE,362)@35 + 1
    assign i_cmp3_i_22_i134_add172_a = {2'b00, SR_SE_i_cmp3_i_22_i134_add172_D0};
    assign i_cmp3_i_22_i134_add172_b = {2'b00, SR_SE_i_cmp3_i_22_i134_add172_D1};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_cmp3_i_22_i134_add172_o <= 34'b0;
        end
        else if (SE_i_cmp3_i_22_i134_add172_backEN == 1'b1)
        begin
            i_cmp3_i_22_i134_add172_o <= $unsigned(i_cmp3_i_22_i134_add172_a) - $unsigned(i_cmp3_i_22_i134_add172_b);
        end
    end
    assign i_cmp3_i_22_i134_add172_c[0] = i_cmp3_i_22_i134_add172_o[33];

    // i_unnamed_add173(MUX,539)@36
    assign i_unnamed_add173_s = i_cmp3_i_22_i134_add172_c;
    always @(i_unnamed_add173_s or redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_q or c_i32_0297_q)
    begin
        unique case (i_unnamed_add173_s)
            1'b0 : i_unnamed_add173_q = redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_q;
            1'b1 : i_unnamed_add173_q = c_i32_0297_q;
            default : i_unnamed_add173_q = 32'b0;
        endcase
    end

    // SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0(STALLENABLE,3882)
    // Valid signal propagation
    assign SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_V0 = SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_unnamed_add173_backStall & SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_backEN & SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_V;
    // Backward Stall generation
    assign SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0(STALLREG,4483)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_r_valid <= 1'b0;
            SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_r_valid <= SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_backStall & (SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_r_valid | SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_i_valid);

            if (SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_i_valid = SE_i_sub4_i_21_i129_add169_V1;
    // Stall signal propagation
    assign SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_backStall = SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_r_valid | ~ (SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_i_valid);

    // Valid
    assign SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_V = SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_r_valid : SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_i_valid;

    assign SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_D0 = SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q;

    // redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0(REG,2738)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_q <= $unsigned(SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_D0);
        end
    end

    // i_sub4_i_22_i135_add174(SUB,506)@36
    assign i_sub4_i_22_i135_add174_a = {1'b0, redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_q};
    assign i_sub4_i_22_i135_add174_b = {1'b0, i_unnamed_add173_q};
    assign i_sub4_i_22_i135_add174_o = $unsigned(i_sub4_i_22_i135_add174_a) - $unsigned(i_sub4_i_22_i135_add174_b);
    assign i_sub4_i_22_i135_add174_q = i_sub4_i_22_i135_add174_o[32:0];

    // bgTrunc_i_sub4_i_22_i135_add174_sel_x(BITSELECT,17)@36
    assign bgTrunc_i_sub4_i_22_i135_add174_sel_x_b = $unsigned(i_sub4_i_22_i135_add174_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,223)@36
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_22_i135_add174_sel_x_b, redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x(CHOOSEBITS,222)@36
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_a[8:8]};

    // SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0(STALLREG,4484)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_r_valid <= 1'b0;
            SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_r_valid <= SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_backStall & (SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_r_valid | SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_i_valid);

            if (SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_i_valid = SE_i_unnamed_add173_V0;
    // Stall signal propagation
    assign SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_backStall = SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_r_valid | ~ (SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_i_valid);

    // Valid
    assign SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_V = SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_r_valid : SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_i_valid;

    assign SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_D0 = SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q;

    // SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0(STALLENABLE,3880)
    // Valid signal propagation
    assign SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_V0 = SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_V1 = SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_R_v_1;
    // Stall signal propagation
    assign SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_cmp3_i_23_i140_add177_backStall & SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_s_tv_1 = SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_backStall & SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_R_v_1;
    // Backward Enable generation
    assign SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_or0 = SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_s_tv_0;
    assign SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_s_tv_1 | SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_backEN & SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_V;
    // Backward Stall generation
    assign SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
            SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_v_s_0;
            end

            if (SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_R_v_1 & SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_s_tv_1;
            end
            else
            begin
                SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // SE_i_cmp3_i_23_i140_add177(STALLENABLE,3289)
    // Valid signal propagation
    assign SE_i_cmp3_i_23_i140_add177_V0 = SE_i_cmp3_i_23_i140_add177_wireValid;
    // Backward Stall generation
    assign SE_i_cmp3_i_23_i140_add177_backStall = SE_i_unnamed_add178_backStall | ~ (SE_i_cmp3_i_23_i140_add177_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_cmp3_i_23_i140_add177_and0 = SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_V0;
    assign SE_i_cmp3_i_23_i140_add177_wireValid = SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_V0 & SE_i_cmp3_i_23_i140_add177_and0;

    // SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0(STALLREG,4458)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_r_valid <= 1'b0;
            SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_r_valid <= SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_backStall & (SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_r_valid | SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_i_valid);

            if (SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_r_data0 <= $unsigned(redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_i_valid = SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_V1;
    // Stall signal propagation
    assign SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_backStall = SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_r_valid | ~ (SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_i_valid);

    // Valid
    assign SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_V = SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_r_valid == 1'b1 ? SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_r_valid : SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_i_valid;

    assign SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_D0 = SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_r_valid == 1'b1 ? SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_r_data0 : redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_q;

    // SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0(STALLENABLE,3828)
    // Valid signal propagation
    assign SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_V0 = SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_R_v_0;
    assign SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_V1 = SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_R_v_1;
    assign SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_V2 = SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_R_v_2;
    // Stall signal propagation
    assign SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_s_tv_0 = SE_i_cmp3_i_23_i140_add177_backStall & SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_R_v_0;
    assign SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_s_tv_1 = SE_i_unnamed_add178_backStall & SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_R_v_1;
    assign SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_s_tv_2 = SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_backStall & SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_R_v_2;
    // Backward Enable generation
    assign SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_or0 = SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_s_tv_0;
    assign SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_or1 = SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_s_tv_1 | SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_or0;
    assign SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_backEN = ~ (SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_s_tv_2 | SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_or1);
    // Determine whether to write valid data into the first register stage
    assign SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_v_s_0 = SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_backEN & SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_V;
    // Backward Stall generation
    assign SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_backStall = ~ (SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_R_v_0 <= 1'b0;
            SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_R_v_1 <= 1'b0;
            SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_R_v_2 <= 1'b0;
        end
        else
        begin
            if (SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_backEN == 1'b0)
            begin
                SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_R_v_0 <= SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_R_v_0 & SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_s_tv_0;
            end
            else
            begin
                SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_R_v_0 <= SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_v_s_0;
            end

            if (SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_backEN == 1'b0)
            begin
                SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_R_v_1 <= SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_R_v_1 & SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_s_tv_1;
            end
            else
            begin
                SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_R_v_1 <= SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_v_s_0;
            end

            if (SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_backEN == 1'b0)
            begin
                SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_R_v_2 <= SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_R_v_2 & SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_s_tv_2;
            end
            else
            begin
                SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_R_v_2 <= SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_v_s_0;
            end

        end
    end

    // SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0(STALLENABLE,3829)
    // Valid signal propagation
    assign SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_V0 = SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_R_v_0;
    assign SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_V1 = SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_R_v_1;
    // Stall signal propagation
    assign SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_s_tv_0 = SE_i_cmp3_i_24_i146_add182_backStall & SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_R_v_0;
    assign SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_s_tv_1 = SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_backStall & SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_R_v_1;
    // Backward Enable generation
    assign SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_or0 = SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_s_tv_0;
    assign SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_backEN = ~ (SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_s_tv_1 | SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_v_s_0 = SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_backEN & SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_V2;
    // Backward Stall generation
    assign SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_backStall = ~ (SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_R_v_0 <= 1'b0;
            SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_backEN == 1'b0)
            begin
                SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_R_v_0 <= SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_R_v_0 & SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_s_tv_0;
            end
            else
            begin
                SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_R_v_0 <= SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_v_s_0;
            end

            if (SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_backEN == 1'b0)
            begin
                SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_R_v_1 <= SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_R_v_1 & SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_s_tv_1;
            end
            else
            begin
                SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_R_v_1 <= SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_v_s_0;
            end

        end
    end

    // redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0(REG,2691)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_backEN == 1'b1)
        begin
            redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_q <= $unsigned(SR_SE_redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_D0);
        end
    end

    // redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0(REG,2692)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_backEN == 1'b1)
        begin
            redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_q <= $unsigned(redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_q);
        end
    end

    // redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0(REG,2693)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_backEN == 1'b1)
        begin
            redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_q <= $unsigned(redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_q);
        end
    end

    // SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0(STALLENABLE,3830)
    // Valid signal propagation
    assign SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_V0 = SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_R_v_0;
    assign SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_V1 = SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_R_v_1;
    // Stall signal propagation
    assign SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_s_tv_0 = SE_i_unnamed_add183_backStall & SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_R_v_0;
    assign SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_s_tv_1 = SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_backStall & SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_R_v_1;
    // Backward Enable generation
    assign SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_or0 = SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_s_tv_0;
    assign SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_backEN = ~ (SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_s_tv_1 | SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_v_s_0 = SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_backEN & SE_redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_V1;
    // Backward Stall generation
    assign SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_backStall = ~ (SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_R_v_0 <= 1'b0;
            SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_backEN == 1'b0)
            begin
                SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_R_v_0 <= SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_R_v_0 & SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_s_tv_0;
            end
            else
            begin
                SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_R_v_0 <= SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_v_s_0;
            end

            if (SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_backEN == 1'b0)
            begin
                SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_R_v_1 <= SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_R_v_1 & SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_s_tv_1;
            end
            else
            begin
                SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_R_v_1 <= SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_v_s_0;
            end

        end
    end

    // SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0(STALLREG,4459)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_r_valid <= 1'b0;
            SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_r_valid <= SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_backStall & (SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_r_valid | SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_i_valid);

            if (SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_r_data0 <= $unsigned(redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_i_valid = SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_V1;
    // Stall signal propagation
    assign SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_backStall = SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_r_valid | ~ (SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_i_valid);

    // Valid
    assign SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_V = SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_r_valid == 1'b1 ? SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_r_valid : SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_i_valid;

    assign SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_D0 = SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_r_valid == 1'b1 ? SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_r_data0 : redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_q;

    // redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0(REG,2694)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_backEN == 1'b1)
        begin
            redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_q <= $unsigned(SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_D0);
        end
    end

    // SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0(STALLENABLE,3878)
    // Valid signal propagation
    assign SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_V0 = SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_R_v_0;
    // Stall signal propagation
    assign SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_s_tv_0 = SE_i_sub4_i_25_i153_add189_backStall & SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_R_v_0;
    // Backward Enable generation
    assign SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_backEN = ~ (SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_v_s_0 = SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_backEN & SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_V1;
    // Backward Stall generation
    assign SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_backStall = ~ (SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_backEN == 1'b0)
            begin
                SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_R_v_0 & SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_s_tv_0;
            end
            else
            begin
                SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_v_s_0;
            end

        end
    end

    // SE_i_cmp3_i_25_i152_add187(STALLENABLE,3291)
    // Valid signal propagation
    assign SE_i_cmp3_i_25_i152_add187_V0 = SE_i_cmp3_i_25_i152_add187_wireValid;
    // Backward Stall generation
    assign SE_i_cmp3_i_25_i152_add187_backStall = SE_i_unnamed_add188_backStall | ~ (SE_i_cmp3_i_25_i152_add187_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_cmp3_i_25_i152_add187_and0 = SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_V0;
    assign SE_i_cmp3_i_25_i152_add187_wireValid = SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_V0 & SE_i_cmp3_i_25_i152_add187_and0;

    // SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0(STALLENABLE,3877)
    // Valid signal propagation
    assign SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_V0 = SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_V1 = SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_R_v_1;
    // Stall signal propagation
    assign SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_cmp3_i_25_i152_add187_backStall & SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_s_tv_1 = SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_backStall & SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_R_v_1;
    // Backward Enable generation
    assign SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_or0 = SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_s_tv_0;
    assign SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_s_tv_1 | SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_backEN & SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_V;
    // Backward Stall generation
    assign SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
            SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_v_s_0;
            end

            if (SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_R_v_1 & SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_s_tv_1;
            end
            else
            begin
                SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0(REG,2736)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_q <= $unsigned(SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_D0);
        end
    end

    // i_cmp3_i_23_i140_add177(COMPARE,363)@37
    assign i_cmp3_i_23_i140_add177_a = {2'b00, redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_q};
    assign i_cmp3_i_23_i140_add177_b = {2'b00, redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_q};
    assign i_cmp3_i_23_i140_add177_o = $unsigned(i_cmp3_i_23_i140_add177_a) - $unsigned(i_cmp3_i_23_i140_add177_b);
    assign i_cmp3_i_23_i140_add177_c[0] = i_cmp3_i_23_i140_add177_o[33];

    // i_unnamed_add178(MUX,540)@37 + 1
    assign i_unnamed_add178_s = i_cmp3_i_23_i140_add177_c;
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_unnamed_add178_q <= 32'b0;
        end
        else if (SE_i_unnamed_add178_backEN == 1'b1)
        begin
            unique case (i_unnamed_add178_s)
                1'b0 : i_unnamed_add178_q <= redist97_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_35_0_q;
                1'b1 : i_unnamed_add178_q <= c_i32_0297_q;
                default : i_unnamed_add178_q <= 32'b0;
            endcase
        end
    end

    // redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0(REG,2737)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_backEN == 1'b1)
        begin
            redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_q <= $unsigned(redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_q);
        end
    end

    // i_sub4_i_23_i141_add179(SUB,507)@38
    assign i_sub4_i_23_i141_add179_a = {1'b0, redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_q};
    assign i_sub4_i_23_i141_add179_b = {1'b0, i_unnamed_add178_q};
    assign i_sub4_i_23_i141_add179_o = $unsigned(i_sub4_i_23_i141_add179_a) - $unsigned(i_sub4_i_23_i141_add179_b);
    assign i_sub4_i_23_i141_add179_q = i_sub4_i_23_i141_add179_o[32:0];

    // bgTrunc_i_sub4_i_23_i141_add179_sel_x(BITSELECT,18)@38
    assign bgTrunc_i_sub4_i_23_i141_add179_sel_x_b = $unsigned(i_sub4_i_23_i141_add179_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,226)@38
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_23_i141_add179_sel_x_b, redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x(CHOOSEBITS,225)@38
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_a[7:7]};

    // i_cmp3_i_24_i146_add182(COMPARE,364)@38 + 1
    assign i_cmp3_i_24_i146_add182_a = {2'b00, i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q};
    assign i_cmp3_i_24_i146_add182_b = {2'b00, redist98_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_36_0_q};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_cmp3_i_24_i146_add182_o <= 34'b0;
        end
        else if (SE_i_cmp3_i_24_i146_add182_backEN == 1'b1)
        begin
            i_cmp3_i_24_i146_add182_o <= $unsigned(i_cmp3_i_24_i146_add182_a) - $unsigned(i_cmp3_i_24_i146_add182_b);
        end
    end
    assign i_cmp3_i_24_i146_add182_c[0] = i_cmp3_i_24_i146_add182_o[33];

    // i_unnamed_add183(MUX,541)@39
    assign i_unnamed_add183_s = i_cmp3_i_24_i146_add182_c;
    always @(i_unnamed_add183_s or redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_q or c_i32_0297_q)
    begin
        unique case (i_unnamed_add183_s)
            1'b0 : i_unnamed_add183_q = redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_q;
            1'b1 : i_unnamed_add183_q = c_i32_0297_q;
            default : i_unnamed_add183_q = 32'b0;
        endcase
    end

    // SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0(STALLENABLE,3879)
    // Valid signal propagation
    assign SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_V0 = SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_unnamed_add183_backStall & SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_backEN & SE_i_sub4_i_23_i141_add179_V1;
    // Backward Stall generation
    assign SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0(REG,2735)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_q <= $unsigned(i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q);
        end
    end

    // i_sub4_i_24_i147_add184(SUB,508)@39
    assign i_sub4_i_24_i147_add184_a = {1'b0, redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_q};
    assign i_sub4_i_24_i147_add184_b = {1'b0, i_unnamed_add183_q};
    assign i_sub4_i_24_i147_add184_o = $unsigned(i_sub4_i_24_i147_add184_a) - $unsigned(i_sub4_i_24_i147_add184_b);
    assign i_sub4_i_24_i147_add184_q = i_sub4_i_24_i147_add184_o[32:0];

    // bgTrunc_i_sub4_i_24_i147_add184_sel_x(BITSELECT,19)@39
    assign bgTrunc_i_sub4_i_24_i147_add184_sel_x_b = $unsigned(i_sub4_i_24_i147_add184_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,229)@39
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_24_i147_add184_sel_x_b, redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x(CHOOSEBITS,228)@39
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_a[6:6]};

    // SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0(STALLREG,4485)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_r_valid <= 1'b0;
            SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_r_valid <= SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_backStall & (SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_r_valid | SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_i_valid);

            if (SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_i_valid = SE_i_unnamed_add183_V0;
    // Stall signal propagation
    assign SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_backStall = SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_r_valid | ~ (SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_i_valid);

    // Valid
    assign SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_V = SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_r_valid : SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_i_valid;

    assign SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_D0 = SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q;

    // redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0(REG,2733)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_q <= $unsigned(SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_D0);
        end
    end

    // i_cmp3_i_25_i152_add187(COMPARE,365)@40
    assign i_cmp3_i_25_i152_add187_a = {2'b00, redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_q};
    assign i_cmp3_i_25_i152_add187_b = {2'b00, redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_q};
    assign i_cmp3_i_25_i152_add187_o = $unsigned(i_cmp3_i_25_i152_add187_a) - $unsigned(i_cmp3_i_25_i152_add187_b);
    assign i_cmp3_i_25_i152_add187_c[0] = i_cmp3_i_25_i152_add187_o[33];

    // SE_i_unnamed_add188(STALLENABLE,3532)
    // Valid signal propagation
    assign SE_i_unnamed_add188_V0 = SE_i_unnamed_add188_R_v_0;
    // Stall signal propagation
    assign SE_i_unnamed_add188_s_tv_0 = SE_i_sub4_i_25_i153_add189_backStall & SE_i_unnamed_add188_R_v_0;
    // Backward Enable generation
    assign SE_i_unnamed_add188_backEN = ~ (SE_i_unnamed_add188_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_unnamed_add188_and0 = SE_i_cmp3_i_25_i152_add187_V0 & SE_i_unnamed_add188_backEN;
    assign SE_i_unnamed_add188_v_s_0 = SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_V1 & SE_i_unnamed_add188_and0;
    // Backward Stall generation
    assign SE_i_unnamed_add188_backStall = ~ (SE_i_unnamed_add188_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_unnamed_add188_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_unnamed_add188_backEN == 1'b0)
            begin
                SE_i_unnamed_add188_R_v_0 <= SE_i_unnamed_add188_R_v_0 & SE_i_unnamed_add188_s_tv_0;
            end
            else
            begin
                SE_i_unnamed_add188_R_v_0 <= SE_i_unnamed_add188_v_s_0;
            end

        end
    end

    // i_unnamed_add188(MUX,542)@40 + 1
    assign i_unnamed_add188_s = i_cmp3_i_25_i152_add187_c;
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_unnamed_add188_q <= 32'b0;
        end
        else if (SE_i_unnamed_add188_backEN == 1'b1)
        begin
            unique case (i_unnamed_add188_s)
                1'b0 : i_unnamed_add188_q <= redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_q;
                1'b1 : i_unnamed_add188_q <= c_i32_0297_q;
                default : i_unnamed_add188_q <= 32'b0;
            endcase
        end
    end

    // redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0(REG,2734)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_backEN == 1'b1)
        begin
            redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_q <= $unsigned(redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_q);
        end
    end

    // i_sub4_i_25_i153_add189(SUB,509)@41
    assign i_sub4_i_25_i153_add189_a = {1'b0, redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_q};
    assign i_sub4_i_25_i153_add189_b = {1'b0, i_unnamed_add188_q};
    assign i_sub4_i_25_i153_add189_o = $unsigned(i_sub4_i_25_i153_add189_a) - $unsigned(i_sub4_i_25_i153_add189_b);
    assign i_sub4_i_25_i153_add189_q = i_sub4_i_25_i153_add189_o[32:0];

    // bgTrunc_i_sub4_i_25_i153_add189_sel_x(BITSELECT,20)@41
    assign bgTrunc_i_sub4_i_25_i153_add189_sel_x_b = $unsigned(i_sub4_i_25_i153_add189_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,232)@41
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_25_i153_add189_sel_x_b, redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x(CHOOSEBITS,231)@41
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_a[5:5]};

    // SE_i_cmp3_i_26_i158_add192(STALLENABLE,3292)
    // Valid signal propagation
    assign SE_i_cmp3_i_26_i158_add192_V0 = SE_i_cmp3_i_26_i158_add192_R_v_0;
    // Stall signal propagation
    assign SE_i_cmp3_i_26_i158_add192_s_tv_0 = SE_i_unnamed_add193_backStall & SE_i_cmp3_i_26_i158_add192_R_v_0;
    // Backward Enable generation
    assign SE_i_cmp3_i_26_i158_add192_backEN = ~ (SE_i_cmp3_i_26_i158_add192_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_cmp3_i_26_i158_add192_v_s_0 = SE_i_cmp3_i_26_i158_add192_backEN & SR_SE_i_cmp3_i_26_i158_add192_V;
    // Backward Stall generation
    assign SE_i_cmp3_i_26_i158_add192_backStall = ~ (SE_i_cmp3_i_26_i158_add192_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_cmp3_i_26_i158_add192_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_cmp3_i_26_i158_add192_backEN == 1'b0)
            begin
                SE_i_cmp3_i_26_i158_add192_R_v_0 <= SE_i_cmp3_i_26_i158_add192_R_v_0 & SE_i_cmp3_i_26_i158_add192_s_tv_0;
            end
            else
            begin
                SE_i_cmp3_i_26_i158_add192_R_v_0 <= SE_i_cmp3_i_26_i158_add192_v_s_0;
            end

        end
    end

    // SR_SE_i_cmp3_i_26_i158_add192(STALLREG,4486)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_i_cmp3_i_26_i158_add192_r_valid <= 1'b0;
            SR_SE_i_cmp3_i_26_i158_add192_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
            SR_SE_i_cmp3_i_26_i158_add192_r_data1 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_i_cmp3_i_26_i158_add192_r_valid <= SE_i_cmp3_i_26_i158_add192_backStall & (SR_SE_i_cmp3_i_26_i158_add192_r_valid | SR_SE_i_cmp3_i_26_i158_add192_i_valid);

            if (SR_SE_i_cmp3_i_26_i158_add192_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_i_cmp3_i_26_i158_add192_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q;
                SR_SE_i_cmp3_i_26_i158_add192_r_data1 <= $unsigned(redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_i_cmp3_i_26_i158_add192_and0 = SE_i_sub4_i_25_i153_add189_V0;
    assign SR_SE_i_cmp3_i_26_i158_add192_i_valid = SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_V0 & SR_SE_i_cmp3_i_26_i158_add192_and0;
    // Stall signal propagation
    assign SR_SE_i_cmp3_i_26_i158_add192_backStall = SR_SE_i_cmp3_i_26_i158_add192_r_valid | ~ (SR_SE_i_cmp3_i_26_i158_add192_i_valid);

    // Valid
    assign SR_SE_i_cmp3_i_26_i158_add192_V = SR_SE_i_cmp3_i_26_i158_add192_r_valid == 1'b1 ? SR_SE_i_cmp3_i_26_i158_add192_r_valid : SR_SE_i_cmp3_i_26_i158_add192_i_valid;

    // Data0
    assign SR_SE_i_cmp3_i_26_i158_add192_D0 = SR_SE_i_cmp3_i_26_i158_add192_r_valid == 1'b1 ? SR_SE_i_cmp3_i_26_i158_add192_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q;
    // Data1
    assign SR_SE_i_cmp3_i_26_i158_add192_D1 = SR_SE_i_cmp3_i_26_i158_add192_r_valid == 1'b1 ? SR_SE_i_cmp3_i_26_i158_add192_r_data1 : redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_q;

    // SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0(STALLENABLE,3831)
    // Valid signal propagation
    assign SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_V0 = SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_R_v_0;
    assign SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_V1 = SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_R_v_1;
    assign SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_V2 = SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_R_v_2;
    // Stall signal propagation
    assign SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_s_tv_0 = SE_i_cmp3_i_25_i152_add187_backStall & SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_R_v_0;
    assign SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_s_tv_1 = SE_i_unnamed_add188_backStall & SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_R_v_1;
    assign SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_s_tv_2 = SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_backStall & SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_R_v_2;
    // Backward Enable generation
    assign SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_or0 = SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_s_tv_0;
    assign SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_or1 = SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_s_tv_1 | SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_or0;
    assign SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_backEN = ~ (SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_s_tv_2 | SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_or1);
    // Determine whether to write valid data into the first register stage
    assign SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_v_s_0 = SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_backEN & SR_SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_V;
    // Backward Stall generation
    assign SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_backStall = ~ (SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_R_v_0 <= 1'b0;
            SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_R_v_1 <= 1'b0;
            SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_R_v_2 <= 1'b0;
        end
        else
        begin
            if (SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_backEN == 1'b0)
            begin
                SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_R_v_0 <= SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_R_v_0 & SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_s_tv_0;
            end
            else
            begin
                SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_R_v_0 <= SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_v_s_0;
            end

            if (SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_backEN == 1'b0)
            begin
                SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_R_v_1 <= SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_R_v_1 & SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_s_tv_1;
            end
            else
            begin
                SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_R_v_1 <= SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_v_s_0;
            end

            if (SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_backEN == 1'b0)
            begin
                SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_R_v_2 <= SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_R_v_2 & SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_s_tv_2;
            end
            else
            begin
                SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_R_v_2 <= SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_v_s_0;
            end

        end
    end

    // SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0(STALLENABLE,3832)
    // Valid signal propagation
    assign SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_V0 = SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_R_v_0;
    assign SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_V1 = SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_R_v_1;
    // Stall signal propagation
    assign SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_s_tv_0 = SR_SE_i_cmp3_i_26_i158_add192_backStall & SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_R_v_0;
    assign SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_s_tv_1 = SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_backStall & SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_R_v_1;
    // Backward Enable generation
    assign SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_or0 = SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_s_tv_0;
    assign SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_backEN = ~ (SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_s_tv_1 | SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_v_s_0 = SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_backEN & SE_redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_V2;
    // Backward Stall generation
    assign SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_backStall = ~ (SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_R_v_0 <= 1'b0;
            SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_backEN == 1'b0)
            begin
                SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_R_v_0 <= SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_R_v_0 & SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_s_tv_0;
            end
            else
            begin
                SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_R_v_0 <= SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_v_s_0;
            end

            if (SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_backEN == 1'b0)
            begin
                SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_R_v_1 <= SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_R_v_1 & SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_s_tv_1;
            end
            else
            begin
                SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_R_v_1 <= SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_v_s_0;
            end

        end
    end

    // SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0(STALLENABLE,3833)
    // Valid signal propagation
    assign SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_V0 = SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_R_v_0;
    assign SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_V1 = SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_R_v_1;
    // Stall signal propagation
    assign SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_s_tv_0 = SE_i_unnamed_add193_backStall & SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_R_v_0;
    assign SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_s_tv_1 = SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_backStall & SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_R_v_1;
    // Backward Enable generation
    assign SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_or0 = SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_s_tv_0;
    assign SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_backEN = ~ (SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_s_tv_1 | SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_v_s_0 = SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_backEN & SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_V1;
    // Backward Stall generation
    assign SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_backStall = ~ (SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_R_v_0 <= 1'b0;
            SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_backEN == 1'b0)
            begin
                SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_R_v_0 <= SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_R_v_0 & SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_s_tv_0;
            end
            else
            begin
                SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_R_v_0 <= SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_v_s_0;
            end

            if (SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_backEN == 1'b0)
            begin
                SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_R_v_1 <= SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_R_v_1 & SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_s_tv_1;
            end
            else
            begin
                SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_R_v_1 <= SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_v_s_0;
            end

        end
    end

    // redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0(REG,2695)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_backEN == 1'b1)
        begin
            redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_q <= $unsigned(redist100_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_38_0_q);
        end
    end

    // redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0(REG,2696)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_backEN == 1'b1)
        begin
            redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_q <= $unsigned(redist101_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_39_0_q);
        end
    end

    // i_cmp3_i_26_i158_add192(COMPARE,366)@41 + 1
    assign i_cmp3_i_26_i158_add192_a = {2'b00, SR_SE_i_cmp3_i_26_i158_add192_D0};
    assign i_cmp3_i_26_i158_add192_b = {2'b00, SR_SE_i_cmp3_i_26_i158_add192_D1};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_cmp3_i_26_i158_add192_o <= 34'b0;
        end
        else if (SE_i_cmp3_i_26_i158_add192_backEN == 1'b1)
        begin
            i_cmp3_i_26_i158_add192_o <= $unsigned(i_cmp3_i_26_i158_add192_a) - $unsigned(i_cmp3_i_26_i158_add192_b);
        end
    end
    assign i_cmp3_i_26_i158_add192_c[0] = i_cmp3_i_26_i158_add192_o[33];

    // i_unnamed_add193(MUX,543)@42
    assign i_unnamed_add193_s = i_cmp3_i_26_i158_add192_c;
    always @(i_unnamed_add193_s or redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_q or c_i32_0297_q)
    begin
        unique case (i_unnamed_add193_s)
            1'b0 : i_unnamed_add193_q = redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_q;
            1'b1 : i_unnamed_add193_q = c_i32_0297_q;
            default : i_unnamed_add193_q = 32'b0;
        endcase
    end

    // SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0(STALLENABLE,3876)
    // Valid signal propagation
    assign SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_V0 = SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_unnamed_add193_backStall & SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_backEN & SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_V;
    // Backward Stall generation
    assign SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0(STALLREG,4487)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_r_valid <= 1'b0;
            SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_r_valid <= SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_backStall & (SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_r_valid | SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_i_valid);

            if (SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_i_valid = SE_i_sub4_i_25_i153_add189_V1;
    // Stall signal propagation
    assign SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_backStall = SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_r_valid | ~ (SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_i_valid);

    // Valid
    assign SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_V = SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_r_valid : SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_i_valid;

    assign SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_D0 = SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q;

    // redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0(REG,2732)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_q <= $unsigned(SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_D0);
        end
    end

    // i_sub4_i_26_i159_add194(SUB,510)@42
    assign i_sub4_i_26_i159_add194_a = {1'b0, redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_q};
    assign i_sub4_i_26_i159_add194_b = {1'b0, i_unnamed_add193_q};
    assign i_sub4_i_26_i159_add194_o = $unsigned(i_sub4_i_26_i159_add194_a) - $unsigned(i_sub4_i_26_i159_add194_b);
    assign i_sub4_i_26_i159_add194_q = i_sub4_i_26_i159_add194_o[32:0];

    // bgTrunc_i_sub4_i_26_i159_add194_sel_x(BITSELECT,21)@42
    assign bgTrunc_i_sub4_i_26_i159_add194_sel_x_b = $unsigned(i_sub4_i_26_i159_add194_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,235)@42
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_26_i159_add194_sel_x_b, redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x(CHOOSEBITS,234)@42
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_a[4:4]};

    // redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0(REG,2730)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_q <= $unsigned(i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q);
        end
    end

    // i_cmp3_i_27_i164_add197(COMPARE,367)@43
    assign i_cmp3_i_27_i164_add197_a = {2'b00, redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_q};
    assign i_cmp3_i_27_i164_add197_b = {2'b00, redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_q};
    assign i_cmp3_i_27_i164_add197_o = $unsigned(i_cmp3_i_27_i164_add197_a) - $unsigned(i_cmp3_i_27_i164_add197_b);
    assign i_cmp3_i_27_i164_add197_c[0] = i_cmp3_i_27_i164_add197_o[33];

    // SE_i_unnamed_add198(STALLENABLE,3534)
    // Valid signal propagation
    assign SE_i_unnamed_add198_V0 = SE_i_unnamed_add198_R_v_0;
    // Stall signal propagation
    assign SE_i_unnamed_add198_s_tv_0 = SE_i_sub4_i_27_i165_add199_backStall & SE_i_unnamed_add198_R_v_0;
    // Backward Enable generation
    assign SE_i_unnamed_add198_backEN = ~ (SE_i_unnamed_add198_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_unnamed_add198_v_s_0 = SE_i_unnamed_add198_backEN & SR_SE_i_unnamed_add198_V;
    // Backward Stall generation
    assign SE_i_unnamed_add198_backStall = ~ (SE_i_unnamed_add198_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_unnamed_add198_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_unnamed_add198_backEN == 1'b0)
            begin
                SE_i_unnamed_add198_R_v_0 <= SE_i_unnamed_add198_R_v_0 & SE_i_unnamed_add198_s_tv_0;
            end
            else
            begin
                SE_i_unnamed_add198_R_v_0 <= SE_i_unnamed_add198_v_s_0;
            end

        end
    end

    // SR_SE_i_unnamed_add198(STALLREG,4488)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_i_unnamed_add198_r_valid <= 1'b0;
            SR_SE_i_unnamed_add198_r_data0 <= 1'bx;
            SR_SE_i_unnamed_add198_r_data1 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_i_unnamed_add198_r_valid <= SE_i_unnamed_add198_backStall & (SR_SE_i_unnamed_add198_r_valid | SR_SE_i_unnamed_add198_i_valid);

            if (SR_SE_i_unnamed_add198_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_i_unnamed_add198_r_data0 <= i_cmp3_i_27_i164_add197_c;
                SR_SE_i_unnamed_add198_r_data1 <= $unsigned(redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_i_unnamed_add198_and0 = SE_i_cmp3_i_27_i164_add197_V0;
    assign SR_SE_i_unnamed_add198_i_valid = SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_V1 & SR_SE_i_unnamed_add198_and0;
    // Stall signal propagation
    assign SR_SE_i_unnamed_add198_backStall = SR_SE_i_unnamed_add198_r_valid | ~ (SR_SE_i_unnamed_add198_i_valid);

    // Valid
    assign SR_SE_i_unnamed_add198_V = SR_SE_i_unnamed_add198_r_valid == 1'b1 ? SR_SE_i_unnamed_add198_r_valid : SR_SE_i_unnamed_add198_i_valid;

    // Data0
    assign SR_SE_i_unnamed_add198_D0 = SR_SE_i_unnamed_add198_r_valid == 1'b1 ? SR_SE_i_unnamed_add198_r_data0 : i_cmp3_i_27_i164_add197_c;
    // Data1
    assign SR_SE_i_unnamed_add198_D1 = SR_SE_i_unnamed_add198_r_valid == 1'b1 ? SR_SE_i_unnamed_add198_r_data1 : redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_q;

    // SE_i_cmp3_i_27_i164_add197(STALLENABLE,3293)
    // Valid signal propagation
    assign SE_i_cmp3_i_27_i164_add197_V0 = SE_i_cmp3_i_27_i164_add197_wireValid;
    // Backward Stall generation
    assign SE_i_cmp3_i_27_i164_add197_backStall = SR_SE_i_unnamed_add198_backStall | ~ (SE_i_cmp3_i_27_i164_add197_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_cmp3_i_27_i164_add197_and0 = SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_V0;
    assign SE_i_cmp3_i_27_i164_add197_wireValid = SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_V0 & SE_i_cmp3_i_27_i164_add197_and0;

    // SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0(STALLREG,4460)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_r_valid <= 1'b0;
            SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_r_valid <= SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_backStall & (SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_r_valid | SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_i_valid);

            if (SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_r_data0 <= $unsigned(redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_i_valid = SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_V1;
    // Stall signal propagation
    assign SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_backStall = SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_r_valid | ~ (SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_i_valid);

    // Valid
    assign SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_V = SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_r_valid == 1'b1 ? SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_r_valid : SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_i_valid;

    assign SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_D0 = SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_r_valid == 1'b1 ? SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_r_data0 : redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_q;

    // SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0(STALLENABLE,3834)
    // Valid signal propagation
    assign SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_V0 = SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_R_v_0;
    assign SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_V1 = SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_R_v_1;
    assign SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_V2 = SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_R_v_2;
    // Stall signal propagation
    assign SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_s_tv_0 = SE_i_cmp3_i_27_i164_add197_backStall & SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_R_v_0;
    assign SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_s_tv_1 = SR_SE_i_unnamed_add198_backStall & SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_R_v_1;
    assign SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_s_tv_2 = SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_backStall & SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_R_v_2;
    // Backward Enable generation
    assign SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_or0 = SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_s_tv_0;
    assign SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_or1 = SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_s_tv_1 | SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_or0;
    assign SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_backEN = ~ (SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_s_tv_2 | SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_or1);
    // Determine whether to write valid data into the first register stage
    assign SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_v_s_0 = SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_backEN & SR_SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_V;
    // Backward Stall generation
    assign SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_backStall = ~ (SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_R_v_0 <= 1'b0;
            SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_R_v_1 <= 1'b0;
            SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_R_v_2 <= 1'b0;
        end
        else
        begin
            if (SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_backEN == 1'b0)
            begin
                SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_R_v_0 <= SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_R_v_0 & SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_s_tv_0;
            end
            else
            begin
                SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_R_v_0 <= SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_v_s_0;
            end

            if (SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_backEN == 1'b0)
            begin
                SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_R_v_1 <= SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_R_v_1 & SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_s_tv_1;
            end
            else
            begin
                SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_R_v_1 <= SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_v_s_0;
            end

            if (SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_backEN == 1'b0)
            begin
                SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_R_v_2 <= SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_R_v_2 & SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_s_tv_2;
            end
            else
            begin
                SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_R_v_2 <= SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_v_s_0;
            end

        end
    end

    // SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0(STALLENABLE,3835)
    // Valid signal propagation
    assign SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_V0 = SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_R_v_0;
    assign SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_V1 = SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_R_v_1;
    // Stall signal propagation
    assign SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_s_tv_0 = SE_i_cmp3_i_28_i170_add202_backStall & SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_R_v_0;
    assign SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_s_tv_1 = SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_backStall & SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_R_v_1;
    // Backward Enable generation
    assign SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_or0 = SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_s_tv_0;
    assign SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_backEN = ~ (SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_s_tv_1 | SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_v_s_0 = SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_backEN & SE_redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_V2;
    // Backward Stall generation
    assign SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_backStall = ~ (SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_R_v_0 <= 1'b0;
            SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_backEN == 1'b0)
            begin
                SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_R_v_0 <= SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_R_v_0 & SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_s_tv_0;
            end
            else
            begin
                SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_R_v_0 <= SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_v_s_0;
            end

            if (SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_backEN == 1'b0)
            begin
                SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_R_v_1 <= SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_R_v_1 & SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_s_tv_1;
            end
            else
            begin
                SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_R_v_1 <= SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_v_s_0;
            end

        end
    end

    // SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0(STALLENABLE,3836)
    // Valid signal propagation
    assign SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_V0 = SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_R_v_0;
    assign SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_V1 = SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_R_v_1;
    // Stall signal propagation
    assign SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_s_tv_0 = SE_i_unnamed_add203_backStall & SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_R_v_0;
    assign SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_s_tv_1 = SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_backStall & SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_R_v_1;
    // Backward Enable generation
    assign SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_or0 = SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_s_tv_0;
    assign SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_backEN = ~ (SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_s_tv_1 | SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_v_s_0 = SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_backEN & SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_V1;
    // Backward Stall generation
    assign SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_backStall = ~ (SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_R_v_0 <= 1'b0;
            SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_backEN == 1'b0)
            begin
                SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_R_v_0 <= SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_R_v_0 & SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_s_tv_0;
            end
            else
            begin
                SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_R_v_0 <= SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_v_s_0;
            end

            if (SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_backEN == 1'b0)
            begin
                SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_R_v_1 <= SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_R_v_1 & SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_s_tv_1;
            end
            else
            begin
                SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_R_v_1 <= SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_v_s_0;
            end

        end
    end

    // redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0(REG,2698)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_backEN == 1'b1)
        begin
            redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_q <= $unsigned(redist103_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_41_0_q);
        end
    end

    // redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0(REG,2699)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_backEN == 1'b1)
        begin
            redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_q <= $unsigned(redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_q);
        end
    end

    // i_unnamed_add198(MUX,544)@43 + 1
    assign i_unnamed_add198_s = SR_SE_i_unnamed_add198_D0;
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_unnamed_add198_q <= 32'b0;
        end
        else if (SE_i_unnamed_add198_backEN == 1'b1)
        begin
            unique case (i_unnamed_add198_s)
                1'b0 : i_unnamed_add198_q <= SR_SE_i_unnamed_add198_D1;
                1'b1 : i_unnamed_add198_q <= c_i32_0297_q;
                default : i_unnamed_add198_q <= 32'b0;
            endcase
        end
    end

    // redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0(REG,2731)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_backEN == 1'b1)
        begin
            redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_q <= $unsigned(SR_SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_D0);
        end
    end

    // i_sub4_i_27_i165_add199(SUB,511)@44
    assign i_sub4_i_27_i165_add199_a = {1'b0, redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_q};
    assign i_sub4_i_27_i165_add199_b = {1'b0, i_unnamed_add198_q};
    assign i_sub4_i_27_i165_add199_o = $unsigned(i_sub4_i_27_i165_add199_a) - $unsigned(i_sub4_i_27_i165_add199_b);
    assign i_sub4_i_27_i165_add199_q = i_sub4_i_27_i165_add199_o[32:0];

    // bgTrunc_i_sub4_i_27_i165_add199_sel_x(BITSELECT,22)@44
    assign bgTrunc_i_sub4_i_27_i165_add199_sel_x_b = $unsigned(i_sub4_i_27_i165_add199_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,238)@44
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_27_i165_add199_sel_x_b, redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x(CHOOSEBITS,237)@44
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_a[3:3]};

    // i_cmp3_i_28_i170_add202(COMPARE,368)@44 + 1
    assign i_cmp3_i_28_i170_add202_a = {2'b00, i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q};
    assign i_cmp3_i_28_i170_add202_b = {2'b00, redist104_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_42_0_q};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_cmp3_i_28_i170_add202_o <= 34'b0;
        end
        else if (SE_i_cmp3_i_28_i170_add202_backEN == 1'b1)
        begin
            i_cmp3_i_28_i170_add202_o <= $unsigned(i_cmp3_i_28_i170_add202_a) - $unsigned(i_cmp3_i_28_i170_add202_b);
        end
    end
    assign i_cmp3_i_28_i170_add202_c[0] = i_cmp3_i_28_i170_add202_o[33];

    // i_unnamed_add203(MUX,545)@45
    assign i_unnamed_add203_s = i_cmp3_i_28_i170_add202_c;
    always @(i_unnamed_add203_s or redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_q or c_i32_0297_q)
    begin
        unique case (i_unnamed_add203_s)
            1'b0 : i_unnamed_add203_q = redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_q;
            1'b1 : i_unnamed_add203_q = c_i32_0297_q;
            default : i_unnamed_add203_q = 32'b0;
        endcase
    end

    // SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0(STALLENABLE,3873)
    // Valid signal propagation
    assign SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_V0 = SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_unnamed_add203_backStall & SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_backEN & SE_i_sub4_i_27_i165_add199_V1;
    // Backward Stall generation
    assign SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0(REG,2729)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_q <= $unsigned(i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q);
        end
    end

    // i_sub4_i_28_i171_add204(SUB,512)@45
    assign i_sub4_i_28_i171_add204_a = {1'b0, redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_q};
    assign i_sub4_i_28_i171_add204_b = {1'b0, i_unnamed_add203_q};
    assign i_sub4_i_28_i171_add204_o = $unsigned(i_sub4_i_28_i171_add204_a) - $unsigned(i_sub4_i_28_i171_add204_b);
    assign i_sub4_i_28_i171_add204_q = i_sub4_i_28_i171_add204_o[32:0];

    // bgTrunc_i_sub4_i_28_i171_add204_sel_x(BITSELECT,23)@45
    assign bgTrunc_i_sub4_i_28_i171_add204_sel_x_b = $unsigned(i_sub4_i_28_i171_add204_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,241)@45
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_28_i171_add204_sel_x_b, redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x(CHOOSEBITS,240)@45
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_a[2:2]};

    // SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0(STALLREG,4490)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_r_valid <= 1'b0;
            SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_r_valid <= SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_backStall & (SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_r_valid | SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_i_valid);

            if (SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_i_valid = SE_i_unnamed_add203_V0;
    // Stall signal propagation
    assign SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_backStall = SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_r_valid | ~ (SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_i_valid);

    // Valid
    assign SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_V = SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_r_valid : SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_i_valid;

    assign SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_D0 = SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q;

    // SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0(STALLENABLE,3871)
    // Valid signal propagation
    assign SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_V0 = SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_V1 = SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_R_v_1;
    // Stall signal propagation
    assign SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_cmp3_i_29_i176_add207_backStall & SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_s_tv_1 = SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_backStall & SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_R_v_1;
    // Backward Enable generation
    assign SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_or0 = SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_s_tv_0;
    assign SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_s_tv_1 | SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_backEN & SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_V;
    // Backward Stall generation
    assign SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
            SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_v_s_0;
            end

            if (SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_R_v_1 & SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_s_tv_1;
            end
            else
            begin
                SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // SE_i_cmp3_i_29_i176_add207(STALLENABLE,3295)
    // Valid signal propagation
    assign SE_i_cmp3_i_29_i176_add207_V0 = SE_i_cmp3_i_29_i176_add207_wireValid;
    // Backward Stall generation
    assign SE_i_cmp3_i_29_i176_add207_backStall = SE_i_unnamed_add208_backStall | ~ (SE_i_cmp3_i_29_i176_add207_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_cmp3_i_29_i176_add207_and0 = SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_V0;
    assign SE_i_cmp3_i_29_i176_add207_wireValid = SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_V0 & SE_i_cmp3_i_29_i176_add207_and0;

    // SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0(STALLREG,4461)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_r_valid <= 1'b0;
            SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_r_valid <= SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_backStall & (SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_r_valid | SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_i_valid);

            if (SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_r_data0 <= $unsigned(redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_i_valid = SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_V1;
    // Stall signal propagation
    assign SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_backStall = SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_r_valid | ~ (SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_i_valid);

    // Valid
    assign SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_V = SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_r_valid == 1'b1 ? SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_r_valid : SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_i_valid;

    assign SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_D0 = SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_r_valid == 1'b1 ? SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_r_data0 : redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_q;

    // SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0(STALLENABLE,3837)
    // Valid signal propagation
    assign SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_V0 = SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_R_v_0;
    assign SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_V1 = SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_R_v_1;
    assign SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_V2 = SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_R_v_2;
    // Stall signal propagation
    assign SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_s_tv_0 = SE_i_cmp3_i_29_i176_add207_backStall & SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_R_v_0;
    assign SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_s_tv_1 = SE_i_unnamed_add208_backStall & SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_R_v_1;
    assign SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_s_tv_2 = SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_backStall & SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_R_v_2;
    // Backward Enable generation
    assign SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_or0 = SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_s_tv_0;
    assign SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_or1 = SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_s_tv_1 | SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_or0;
    assign SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_backEN = ~ (SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_s_tv_2 | SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_or1);
    // Determine whether to write valid data into the first register stage
    assign SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_v_s_0 = SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_backEN & SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_V;
    // Backward Stall generation
    assign SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_backStall = ~ (SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_R_v_0 <= 1'b0;
            SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_R_v_1 <= 1'b0;
            SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_R_v_2 <= 1'b0;
        end
        else
        begin
            if (SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_backEN == 1'b0)
            begin
                SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_R_v_0 <= SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_R_v_0 & SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_s_tv_0;
            end
            else
            begin
                SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_R_v_0 <= SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_v_s_0;
            end

            if (SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_backEN == 1'b0)
            begin
                SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_R_v_1 <= SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_R_v_1 & SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_s_tv_1;
            end
            else
            begin
                SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_R_v_1 <= SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_v_s_0;
            end

            if (SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_backEN == 1'b0)
            begin
                SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_R_v_2 <= SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_R_v_2 & SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_s_tv_2;
            end
            else
            begin
                SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_R_v_2 <= SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_v_s_0;
            end

        end
    end

    // SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0(STALLENABLE,3838)
    // Valid signal propagation
    assign SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_V0 = SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_R_v_0;
    assign SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_V1 = SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_R_v_1;
    // Stall signal propagation
    assign SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_s_tv_0 = SE_i_cmp3_i_30_i182_add212_backStall & SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_R_v_0;
    assign SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_s_tv_1 = SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_backStall & SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_R_v_1;
    // Backward Enable generation
    assign SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_or0 = SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_s_tv_0;
    assign SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_backEN = ~ (SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_s_tv_1 | SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_v_s_0 = SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_backEN & SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_V2;
    // Backward Stall generation
    assign SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_backStall = ~ (SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_R_v_0 <= 1'b0;
            SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_backEN == 1'b0)
            begin
                SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_R_v_0 <= SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_R_v_0 & SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_s_tv_0;
            end
            else
            begin
                SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_R_v_0 <= SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_v_s_0;
            end

            if (SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_backEN == 1'b0)
            begin
                SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_R_v_1 <= SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_R_v_1 & SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_s_tv_1;
            end
            else
            begin
                SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_R_v_1 <= SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_v_s_0;
            end

        end
    end

    // redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0(REG,2700)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_backEN == 1'b1)
        begin
            redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_q <= $unsigned(SR_SE_redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_D0);
        end
    end

    // redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0(REG,2701)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_backEN == 1'b1)
        begin
            redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_q <= $unsigned(redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_q);
        end
    end

    // redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0(REG,2702)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_backEN == 1'b1)
        begin
            redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_q <= $unsigned(redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_q);
        end
    end

    // redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0(REG,2727)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_q <= $unsigned(SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_D0);
        end
    end

    // i_cmp3_i_29_i176_add207(COMPARE,369)@46
    assign i_cmp3_i_29_i176_add207_a = {2'b00, redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_q};
    assign i_cmp3_i_29_i176_add207_b = {2'b00, redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_q};
    assign i_cmp3_i_29_i176_add207_o = $unsigned(i_cmp3_i_29_i176_add207_a) - $unsigned(i_cmp3_i_29_i176_add207_b);
    assign i_cmp3_i_29_i176_add207_c[0] = i_cmp3_i_29_i176_add207_o[33];

    // i_unnamed_add208(MUX,546)@46 + 1
    assign i_unnamed_add208_s = i_cmp3_i_29_i176_add207_c;
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_unnamed_add208_q <= 32'b0;
        end
        else if (SE_i_unnamed_add208_backEN == 1'b1)
        begin
            unique case (i_unnamed_add208_s)
                1'b0 : i_unnamed_add208_q <= redist106_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_44_0_q;
                1'b1 : i_unnamed_add208_q <= c_i32_0297_q;
                default : i_unnamed_add208_q <= 32'b0;
            endcase
        end
    end

    // redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0(REG,2728)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_backEN == 1'b1)
        begin
            redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_q <= $unsigned(redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_q);
        end
    end

    // i_sub4_i_29_i177_add209(SUB,513)@47
    assign i_sub4_i_29_i177_add209_a = {1'b0, redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_q};
    assign i_sub4_i_29_i177_add209_b = {1'b0, i_unnamed_add208_q};
    assign i_sub4_i_29_i177_add209_o = $unsigned(i_sub4_i_29_i177_add209_a) - $unsigned(i_sub4_i_29_i177_add209_b);
    assign i_sub4_i_29_i177_add209_q = i_sub4_i_29_i177_add209_o[32:0];

    // bgTrunc_i_sub4_i_29_i177_add209_sel_x(BITSELECT,24)@47
    assign bgTrunc_i_sub4_i_29_i177_add209_sel_x_b = $unsigned(i_sub4_i_29_i177_add209_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,247)@47
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_29_i177_add209_sel_x_b, redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x(CHOOSEBITS,246)@47
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_a[1:1]};

    // i_cmp3_i_30_i182_add212(COMPARE,371)@47 + 1
    assign i_cmp3_i_30_i182_add212_a = {2'b00, i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q};
    assign i_cmp3_i_30_i182_add212_b = {2'b00, redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_q};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_cmp3_i_30_i182_add212_o <= 34'b0;
        end
        else if (SE_i_cmp3_i_30_i182_add212_backEN == 1'b1)
        begin
            i_cmp3_i_30_i182_add212_o <= $unsigned(i_cmp3_i_30_i182_add212_a) - $unsigned(i_cmp3_i_30_i182_add212_b);
        end
    end
    assign i_cmp3_i_30_i182_add212_c[0] = i_cmp3_i_30_i182_add212_o[33];

    // i_unnamed_add213(MUX,547)@48
    assign i_unnamed_add213_s = i_cmp3_i_30_i182_add212_c;
    always @(i_unnamed_add213_s or redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_q or c_i32_0297_q)
    begin
        unique case (i_unnamed_add213_s)
            1'b0 : i_unnamed_add213_q = redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_q;
            1'b1 : i_unnamed_add213_q = c_i32_0297_q;
            default : i_unnamed_add213_q = 32'b0;
        endcase
    end

    // redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0(REG,2725)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_q <= $unsigned(i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q);
        end
    end

    // i_sub4_i_30_i183_add214(SUB,515)@48
    assign i_sub4_i_30_i183_add214_a = {1'b0, redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_q};
    assign i_sub4_i_30_i183_add214_b = {1'b0, i_unnamed_add213_q};
    assign i_sub4_i_30_i183_add214_o = $unsigned(i_sub4_i_30_i183_add214_a) - $unsigned(i_sub4_i_30_i183_add214_b);
    assign i_sub4_i_30_i183_add214_q = i_sub4_i_30_i183_add214_o[32:0];

    // bgTrunc_i_sub4_i_30_i183_add214_sel_x(BITSELECT,26)@48
    assign bgTrunc_i_sub4_i_30_i183_add214_sel_x_b = $unsigned(i_sub4_i_30_i183_add214_q[31:0]);

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_dsdk_ip_adapt_bitjoin1_x(BITJOIN,250)@48
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_dsdk_ip_adapt_bitjoin1_x_q = {c_i8_265_q, bgTrunc_i_sub4_i_30_i183_add214_sel_x_b, redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_q};

    // i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x(CHOOSEBITS,249)@48
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a = i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_dsdk_ip_adapt_bitjoin1_x_q;
    assign i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q = {i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[62:62], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[61:61], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[60:60], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[59:59], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[58:58], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[57:57], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[56:56], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[55:55], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[54:54], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[53:53], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[52:52], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[51:51], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[50:50], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[49:49], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[48:48], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[47:47], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[46:46], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[45:45], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[44:44], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[43:43], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[42:42], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[41:41], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[40:40], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[39:39], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[38:38], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[37:37], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[36:36], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[35:35], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[34:34], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[33:33], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[32:32], i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_a[0:0]};

    // bubble_join_i_llvm_fpga_mem_lm1269_add223(BITJOIN,2966)
    assign bubble_join_i_llvm_fpga_mem_lm1269_add223_q = i_llvm_fpga_mem_lm1269_add223_out_o_readdata;

    // bubble_select_i_llvm_fpga_mem_lm1269_add223(BITSELECT,2967)
    assign bubble_select_i_llvm_fpga_mem_lm1269_add223_b = $unsigned(bubble_join_i_llvm_fpga_mem_lm1269_add223_q[31:0]);

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_16(STALLENABLE,3982)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_16_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_16_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_16_backStall = i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_16_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_16_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_16_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15(BLACKBOX,432)@20
    // in in_stall_in@20000000
    // out out_dest_data_out_10_0@21
    // out out_stall_out@20000000
    // out out_valid_out@21
    add_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_0 thei_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15 (
        .in_intel_reserved_ffwd_10_0(in_intel_reserved_ffwd_10_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_16_V0),
        .out_dest_data_out_10_0(i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_out_dest_data_out_10_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15(BITJOIN,2940)
    assign bubble_join_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_q = i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_out_dest_data_out_10_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15(BITSELECT,2941)
    assign bubble_select_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_q[63:0]);

    // i_llvm_fpga_mem_lm12810_add224(BLACKBOX,443)@21
    // in in_i_stall@20000000
    // out out_lm12810_add_avm_address@20000000
    // out out_lm12810_add_avm_burstcount@20000000
    // out out_lm12810_add_avm_byteenable@20000000
    // out out_lm12810_add_avm_enable@20000000
    // out out_lm12810_add_avm_read@20000000
    // out out_lm12810_add_avm_write@20000000
    // out out_lm12810_add_avm_writedata@20000000
    // out out_o_readdata@53
    // out out_o_stall@20000000
    // out out_o_valid@53
    add_i_llvm_fpga_mem_lm12810_0 thei_llvm_fpga_mem_lm12810_add224 (
        .in_flush(in_flush),
        .in_i_address(bubble_select_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_b),
        .in_i_dependence(bubble_select_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_b),
        .in_i_predicate(GND_q),
        .in_i_stall(SE_out_i_llvm_fpga_mem_lm12810_add224_backStall),
        .in_i_valid(SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_V0),
        .in_lm12810_add_avm_readdata(in_lm12810_add_avm_readdata),
        .in_lm12810_add_avm_readdatavalid(in_lm12810_add_avm_readdatavalid),
        .in_lm12810_add_avm_waitrequest(in_lm12810_add_avm_waitrequest),
        .in_lm12810_add_avm_writeack(in_lm12810_add_avm_writeack),
        .out_lm12810_add_avm_address(i_llvm_fpga_mem_lm12810_add224_out_lm12810_add_avm_address),
        .out_lm12810_add_avm_burstcount(i_llvm_fpga_mem_lm12810_add224_out_lm12810_add_avm_burstcount),
        .out_lm12810_add_avm_byteenable(i_llvm_fpga_mem_lm12810_add224_out_lm12810_add_avm_byteenable),
        .out_lm12810_add_avm_enable(i_llvm_fpga_mem_lm12810_add224_out_lm12810_add_avm_enable),
        .out_lm12810_add_avm_read(i_llvm_fpga_mem_lm12810_add224_out_lm12810_add_avm_read),
        .out_lm12810_add_avm_write(i_llvm_fpga_mem_lm12810_add224_out_lm12810_add_avm_write),
        .out_lm12810_add_avm_writedata(i_llvm_fpga_mem_lm12810_add224_out_lm12810_add_avm_writedata),
        .out_o_readdata(i_llvm_fpga_mem_lm12810_add224_out_o_readdata),
        .out_o_stall(i_llvm_fpga_mem_lm12810_add224_out_o_stall),
        .out_o_valid(i_llvm_fpga_mem_lm12810_add224_out_o_valid),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_i_llvm_fpga_mem_lm12810_add224(BITJOIN,2969)
    assign bubble_join_i_llvm_fpga_mem_lm12810_add224_q = i_llvm_fpga_mem_lm12810_add224_out_o_readdata;

    // bubble_select_i_llvm_fpga_mem_lm12810_add224(BITSELECT,2970)
    assign bubble_select_i_llvm_fpga_mem_lm12810_add224_b = $unsigned(bubble_join_i_llvm_fpga_mem_lm12810_add224_q[31:0]);

    // bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17(BITJOIN,2869)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_q = i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17(BITSELECT,2870)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_q[0:0]);

    // SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17(STALLENABLE,3333)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_V0 = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_backStall = redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_stall_out | ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_wireValid = i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_valid_out;

    // redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo(STALLFIFO,2707)
    assign redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_valid_in = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_V0;
    assign redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_stall_in = SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_backStall;
    assign redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_data_in = bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_b;
    assign redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_valid_in_bitsignaltemp = redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_valid_in[0];
    assign redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_stall_in_bitsignaltemp = redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_stall_in[0];
    assign redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_valid_out[0] = redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_valid_out_bitsignaltemp;
    assign redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_stall_out[0] = redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(52),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(1),
        .IMPL("ram")
    ) theredist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo (
        .valid_in(redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_valid_in_bitsignaltemp),
        .stall_in(redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_stall_in_bitsignaltemp),
        .data_in(bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_b),
        .valid_out(redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_valid_out_bitsignaltemp),
        .stall_out(redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_stall_out_bitsignaltemp),
        .data_out(redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo(BITJOIN,3057)
    assign bubble_join_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_q = redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_data_out;

    // bubble_select_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo(BITSELECT,3058)
    assign bubble_select_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_b = $unsigned(bubble_join_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_q[0:0]);

    // i_unnamed_add242(MUX,550)@53
    assign i_unnamed_add242_s = bubble_select_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_b;
    always @(i_unnamed_add242_s or bubble_select_i_llvm_fpga_mem_lm12810_add224_b or bubble_select_i_llvm_fpga_mem_lm1269_add223_b)
    begin
        unique case (i_unnamed_add242_s)
            1'b0 : i_unnamed_add242_q = bubble_select_i_llvm_fpga_mem_lm12810_add224_b;
            1'b1 : i_unnamed_add242_q = bubble_select_i_llvm_fpga_mem_lm1269_add223_b;
            default : i_unnamed_add242_q = 32'b0;
        endcase
    end

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_19(STALLENABLE,3988)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_19_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_19_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_19_backStall = i_llvm_fpga_ffwd_dest_i32_rem31105_add18_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_19_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_19_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_19_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i32_rem31105_add18(BLACKBOX,420)@52
    // in in_stall_in@20000000
    // out out_dest_data_out_37_0@53
    // out out_stall_out@20000000
    // out out_valid_out@53
    add_i_llvm_fpga_ffwd_dest_i32_rem31105_0 thei_llvm_fpga_ffwd_dest_i32_rem31105_add18 (
        .in_intel_reserved_ffwd_37_0(in_intel_reserved_ffwd_37_0),
        .in_stall_in(SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_19_V0),
        .out_dest_data_out_37_0(i_llvm_fpga_ffwd_dest_i32_rem31105_add18_out_dest_data_out_37_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i32_rem31105_add18_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i32_rem31105_add18_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_i_llvm_fpga_ffwd_dest_i32_rem31105_add18(BITJOIN,2904)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i32_rem31105_add18_q = i_llvm_fpga_ffwd_dest_i32_rem31105_add18_out_dest_data_out_37_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i32_rem31105_add18(BITSELECT,2905)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i32_rem31105_add18_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i32_rem31105_add18_q[31:0]);

    // i_cmp_i85_add250(COMPARE,382)@53
    assign i_cmp_i85_add250_a = {2'b00, bubble_select_i_llvm_fpga_ffwd_dest_i32_rem31105_add18_b};
    assign i_cmp_i85_add250_b = {2'b00, i_unnamed_add242_q};
    assign i_cmp_i85_add250_o = $unsigned(i_cmp_i85_add250_a) - $unsigned(i_cmp_i85_add250_b);
    assign i_cmp_i85_add250_c[0] = i_cmp_i85_add250_o[33];

    // redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0(REG,2703)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_backEN == 1'b1)
        begin
            redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_q <= $unsigned(redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_q);
        end
    end

    // redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0(REG,2723)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_backEN == 1'b1)
        begin
            redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_q <= $unsigned(SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_D0);
        end
    end

    // i_cmp3_i_31_i188_add217(COMPARE,372)@49
    assign i_cmp3_i_31_i188_add217_a = {2'b00, redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_q};
    assign i_cmp3_i_31_i188_add217_b = {2'b00, redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_q};
    assign i_cmp3_i_31_i188_add217_o = $unsigned(i_cmp3_i_31_i188_add217_a) - $unsigned(i_cmp3_i_31_i188_add217_b);
    assign i_cmp3_i_31_i188_add217_c[0] = i_cmp3_i_31_i188_add217_o[33];

    // SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0(STALLENABLE,3840)
    // Valid signal propagation
    assign SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_V0 = SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_R_v_0;
    assign SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_V1 = SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_R_v_1;
    // Stall signal propagation
    assign SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_s_tv_0 = SE_i_cmp3_i_31_i188_add217_backStall & SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_R_v_0;
    assign SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_s_tv_1 = SR_SE_i_unnamed_add218_backStall & SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_R_v_1;
    // Backward Enable generation
    assign SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_or0 = SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_s_tv_0;
    assign SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_backEN = ~ (SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_s_tv_1 | SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_v_s_0 = SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_backEN & SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_V1;
    // Backward Stall generation
    assign SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_backStall = ~ (SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_R_v_0 <= 1'b0;
            SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_backEN == 1'b0)
            begin
                SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_R_v_0 <= SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_R_v_0 & SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_s_tv_0;
            end
            else
            begin
                SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_R_v_0 <= SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_v_s_0;
            end

            if (SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_backEN == 1'b0)
            begin
                SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_R_v_1 <= SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_R_v_1 & SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_s_tv_1;
            end
            else
            begin
                SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_R_v_1 <= SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_v_s_0;
            end

        end
    end

    // SR_SE_i_unnamed_add218(STALLREG,4492)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_i_unnamed_add218_r_valid <= 1'b0;
            SR_SE_i_unnamed_add218_r_data0 <= 1'bx;
            SR_SE_i_unnamed_add218_r_data1 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_i_unnamed_add218_r_valid <= SE_i_unnamed_add218_backStall & (SR_SE_i_unnamed_add218_r_valid | SR_SE_i_unnamed_add218_i_valid);

            if (SR_SE_i_unnamed_add218_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_i_unnamed_add218_r_data0 <= i_cmp3_i_31_i188_add217_c;
                SR_SE_i_unnamed_add218_r_data1 <= $unsigned(redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_i_unnamed_add218_and0 = SE_i_cmp3_i_31_i188_add217_V0;
    assign SR_SE_i_unnamed_add218_i_valid = SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_V1 & SR_SE_i_unnamed_add218_and0;
    // Stall signal propagation
    assign SR_SE_i_unnamed_add218_backStall = SR_SE_i_unnamed_add218_r_valid | ~ (SR_SE_i_unnamed_add218_i_valid);

    // Valid
    assign SR_SE_i_unnamed_add218_V = SR_SE_i_unnamed_add218_r_valid == 1'b1 ? SR_SE_i_unnamed_add218_r_valid : SR_SE_i_unnamed_add218_i_valid;

    // Data0
    assign SR_SE_i_unnamed_add218_D0 = SR_SE_i_unnamed_add218_r_valid == 1'b1 ? SR_SE_i_unnamed_add218_r_data0 : i_cmp3_i_31_i188_add217_c;
    // Data1
    assign SR_SE_i_unnamed_add218_D1 = SR_SE_i_unnamed_add218_r_valid == 1'b1 ? SR_SE_i_unnamed_add218_r_data1 : redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_q;

    // i_unnamed_add218(MUX,548)@49 + 1
    assign i_unnamed_add218_s = SR_SE_i_unnamed_add218_D0;
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_unnamed_add218_q <= 32'b0;
        end
        else if (SE_i_unnamed_add218_backEN == 1'b1)
        begin
            unique case (i_unnamed_add218_s)
                1'b0 : i_unnamed_add218_q <= SR_SE_i_unnamed_add218_D1;
                1'b1 : i_unnamed_add218_q <= c_i32_0297_q;
                default : i_unnamed_add218_q <= 32'b0;
            endcase
        end
    end

    // redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0(REG,2724)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_backEN == 1'b1)
        begin
            redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_q <= $unsigned(redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_q);
        end
    end

    // i_sub4_i_31_i189_add219(SUB,516)@50
    assign i_sub4_i_31_i189_add219_a = {1'b0, redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_q};
    assign i_sub4_i_31_i189_add219_b = {1'b0, i_unnamed_add218_q};
    assign i_sub4_i_31_i189_add219_o = $unsigned(i_sub4_i_31_i189_add219_a) - $unsigned(i_sub4_i_31_i189_add219_b);
    assign i_sub4_i_31_i189_add219_q = i_sub4_i_31_i189_add219_o[32:0];

    // bgTrunc_i_sub4_i_31_i189_add219_sel_x(BITSELECT,27)@50
    assign bgTrunc_i_sub4_i_31_i189_add219_sel_x_b = $unsigned(i_sub4_i_31_i189_add219_q[31:0]);

    // redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_0(REG,2783)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_0_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_0_q <= $unsigned(bgTrunc_i_sub4_i_31_i189_add219_sel_x_b);
        end
    end

    // redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_1(REG,2784)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_1_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_backEN == 1'b1)
        begin
            redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_1_q <= $unsigned(redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_0_q);
        end
    end

    // redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2(REG,2785)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_q <= $unsigned(32'b00000000000000000000000000000000);
        end
        else if (SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_backEN == 1'b1)
        begin
            redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_q <= $unsigned(redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_1_q);
        end
    end

    // i_cmp2_i88_add243(COMPARE,347)@53
    assign i_cmp2_i88_add243_a = {2'b00, redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_q};
    assign i_cmp2_i88_add243_b = {2'b00, bubble_select_i_llvm_fpga_mem_lm12810_add224_b};
    assign i_cmp2_i88_add243_o = $unsigned(i_cmp2_i88_add243_a) - $unsigned(i_cmp2_i88_add243_b);
    assign i_cmp2_i88_add243_c[0] = i_cmp2_i88_add243_o[33];

    // i_or_cond434_add255(LOGICAL,482)@53
    assign i_or_cond434_add255_q = i_cmp2_i88_add243_c & i_cmp_i85_add250_c;

    // i_cmp11_i98_add241(COMPARE,343)@53
    assign i_cmp11_i98_add241_a = {2'b00, redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_q};
    assign i_cmp11_i98_add241_b = {2'b00, bubble_select_i_llvm_fpga_mem_lm1269_add223_b};
    assign i_cmp11_i98_add241_o = $unsigned(i_cmp11_i98_add241_a) - $unsigned(i_cmp11_i98_add241_b);
    assign i_cmp11_i98_add241_c[0] = i_cmp11_i98_add241_o[33];

    // i_or_cond435_add256(LOGICAL,483)@53
    assign i_or_cond435_add256_q = i_cmp11_i98_add241_c & i_cmp_i85_add250_c;

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_27(STALLENABLE,4004)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_27_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_27_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_27_backStall = i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_27_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_27_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_27_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26(BLACKBOX,401)@52
    // in in_stall_in@20000000
    // out out_dest_data_out_8_0@53
    // out out_stall_out@20000000
    // out out_valid_out@53
    add_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_0 thei_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26 (
        .in_intel_reserved_ffwd_8_0(in_intel_reserved_ffwd_8_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_27_V0),
        .out_dest_data_out_8_0(i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_out_dest_data_out_8_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26(BITJOIN,2862)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_q = i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_out_dest_data_out_8_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26(BITSELECT,2863)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_q[0:0]);

    // SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26(STALLENABLE,3327)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_V0 = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_backStall = SR_SE_i_unnamed_add261_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_wireValid = i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_out_valid_out;

    // SE_i_unnamed_add261(STALLENABLE,3543)
    // Valid signal propagation
    assign SE_i_unnamed_add261_V0 = SE_i_unnamed_add261_R_v_0;
    // Stall signal propagation
    assign SE_i_unnamed_add261_s_tv_0 = redist21_i_unnamed_add261_q_33_fifo_stall_out & SE_i_unnamed_add261_R_v_0;
    // Backward Enable generation
    assign SE_i_unnamed_add261_backEN = ~ (SE_i_unnamed_add261_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_unnamed_add261_v_s_0 = SE_i_unnamed_add261_backEN & SR_SE_i_unnamed_add261_V;
    // Backward Stall generation
    assign SE_i_unnamed_add261_backStall = ~ (SE_i_unnamed_add261_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_unnamed_add261_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_unnamed_add261_backEN == 1'b0)
            begin
                SE_i_unnamed_add261_R_v_0 <= SE_i_unnamed_add261_R_v_0 & SE_i_unnamed_add261_s_tv_0;
            end
            else
            begin
                SE_i_unnamed_add261_R_v_0 <= SE_i_unnamed_add261_v_s_0;
            end

        end
    end

    // SR_SE_i_unnamed_add261(STALLREG,4493)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_i_unnamed_add261_r_valid <= 1'b0;
            SR_SE_i_unnamed_add261_r_data0 <= 1'bx;
            SR_SE_i_unnamed_add261_r_data1 <= 1'bx;
            SR_SE_i_unnamed_add261_r_data2 <= 1'bx;
        end
        else
        begin
            // Valid
            SR_SE_i_unnamed_add261_r_valid <= SE_i_unnamed_add261_backStall & (SR_SE_i_unnamed_add261_r_valid | SR_SE_i_unnamed_add261_i_valid);

            if (SR_SE_i_unnamed_add261_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_i_unnamed_add261_r_data0 <= $unsigned(bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_b);
                SR_SE_i_unnamed_add261_r_data1 <= i_or_cond435_add256_q;
                SR_SE_i_unnamed_add261_r_data2 <= i_or_cond434_add255_q;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_i_unnamed_add261_and0 = SE_i_cmp2_i88_add243_V1;
    assign SR_SE_i_unnamed_add261_and1 = SE_i_cmp11_i98_add241_V0 & SR_SE_i_unnamed_add261_and0;
    assign SR_SE_i_unnamed_add261_i_valid = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_V0 & SR_SE_i_unnamed_add261_and1;
    // Stall signal propagation
    assign SR_SE_i_unnamed_add261_backStall = SR_SE_i_unnamed_add261_r_valid | ~ (SR_SE_i_unnamed_add261_i_valid);

    // Valid
    assign SR_SE_i_unnamed_add261_V = SR_SE_i_unnamed_add261_r_valid == 1'b1 ? SR_SE_i_unnamed_add261_r_valid : SR_SE_i_unnamed_add261_i_valid;

    // Data0
    assign SR_SE_i_unnamed_add261_D0 = SR_SE_i_unnamed_add261_r_valid == 1'b1 ? SR_SE_i_unnamed_add261_r_data0 : bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i52_add26_b;
    // Data1
    assign SR_SE_i_unnamed_add261_D1 = SR_SE_i_unnamed_add261_r_valid == 1'b1 ? SR_SE_i_unnamed_add261_r_data1 : i_or_cond435_add256_q;
    // Data2
    assign SR_SE_i_unnamed_add261_D2 = SR_SE_i_unnamed_add261_r_valid == 1'b1 ? SR_SE_i_unnamed_add261_r_data2 : i_or_cond434_add255_q;

    // bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21(BITJOIN,2866)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_q = i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21(BITSELECT,2867)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_q[0:0]);

    // SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21(STALLENABLE,3331)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_V0 = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_backStall = redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_stall_out | ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_wireValid = i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_valid_out;

    // redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo(STALLFIFO,2708)
    assign redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_valid_in = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_V0;
    assign redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_stall_in = SE_out_redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_backStall;
    assign redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_data_in = bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_b;
    assign redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_valid_in_bitsignaltemp = redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_valid_in[0];
    assign redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_stall_in_bitsignaltemp = redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_stall_in[0];
    assign redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_valid_out[0] = redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_valid_out_bitsignaltemp;
    assign redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_stall_out[0] = redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(52),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(1),
        .IMPL("ram")
    ) theredist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo (
        .valid_in(redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_valid_in_bitsignaltemp),
        .stall_in(redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_stall_in_bitsignaltemp),
        .data_in(bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_b),
        .valid_out(redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_valid_out_bitsignaltemp),
        .stall_out(redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_stall_out_bitsignaltemp),
        .data_out(redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo(BITJOIN,3060)
    assign bubble_join_redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_q = redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_data_out;

    // bubble_select_redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo(BITSELECT,3061)
    assign bubble_select_redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_b = $unsigned(bubble_join_redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_q[0:0]);

    // SE_out_redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo(STALLENABLE,3849)
    // Valid signal propagation
    assign SE_out_redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_V0 = SE_out_redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_wireValid;
    // Backward Stall generation
    assign SE_out_redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_backStall = SR_SE_i_acl_20_add260_backStall | ~ (SE_out_redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_wireValid = redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_valid_out;

    // SE_i_acl_20_add260(STALLENABLE,3261)
    // Valid signal propagation
    assign SE_i_acl_20_add260_V0 = SE_i_acl_20_add260_R_v_0;
    // Stall signal propagation
    assign SE_i_acl_20_add260_s_tv_0 = SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_backStall & SE_i_acl_20_add260_R_v_0;
    // Backward Enable generation
    assign SE_i_acl_20_add260_backEN = ~ (SE_i_acl_20_add260_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_acl_20_add260_v_s_0 = SE_i_acl_20_add260_backEN & SR_SE_i_acl_20_add260_V;
    // Backward Stall generation
    assign SE_i_acl_20_add260_backStall = ~ (SE_i_acl_20_add260_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_acl_20_add260_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_acl_20_add260_backEN == 1'b0)
            begin
                SE_i_acl_20_add260_R_v_0 <= SE_i_acl_20_add260_R_v_0 & SE_i_acl_20_add260_s_tv_0;
            end
            else
            begin
                SE_i_acl_20_add260_R_v_0 <= SE_i_acl_20_add260_v_s_0;
            end

        end
    end

    // SR_SE_i_acl_20_add260(STALLREG,4496)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_i_acl_20_add260_r_valid <= 1'b0;
            SR_SE_i_acl_20_add260_r_data0 <= 1'bx;
            SR_SE_i_acl_20_add260_r_data1 <= 1'bx;
        end
        else
        begin
            // Valid
            SR_SE_i_acl_20_add260_r_valid <= SE_i_acl_20_add260_backStall & (SR_SE_i_acl_20_add260_r_valid | SR_SE_i_acl_20_add260_i_valid);

            if (SR_SE_i_acl_20_add260_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_i_acl_20_add260_r_data0 <= i_or_cond434_add255_q;
                SR_SE_i_acl_20_add260_r_data1 <= $unsigned(bubble_select_redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_b);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_i_acl_20_add260_and0 = SE_i_cmp2_i88_add243_V0;
    assign SR_SE_i_acl_20_add260_i_valid = SE_out_redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_V0 & SR_SE_i_acl_20_add260_and0;
    // Stall signal propagation
    assign SR_SE_i_acl_20_add260_backStall = SR_SE_i_acl_20_add260_r_valid | ~ (SR_SE_i_acl_20_add260_i_valid);

    // Valid
    assign SR_SE_i_acl_20_add260_V = SR_SE_i_acl_20_add260_r_valid == 1'b1 ? SR_SE_i_acl_20_add260_r_valid : SR_SE_i_acl_20_add260_i_valid;

    // Data0
    assign SR_SE_i_acl_20_add260_D0 = SR_SE_i_acl_20_add260_r_valid == 1'b1 ? SR_SE_i_acl_20_add260_r_data0 : i_or_cond434_add255_q;
    // Data1
    assign SR_SE_i_acl_20_add260_D1 = SR_SE_i_acl_20_add260_r_valid == 1'b1 ? SR_SE_i_acl_20_add260_r_data1 : bubble_select_redist114_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0_51_fifo_b;

    // SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo(STALLENABLE,3847)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_fromReg0 <= '0;
            SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_fromReg0 <= SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_toReg0;
            // Successor 1
            SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_fromReg1 <= SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_toReg1;
        end
    end
    // Input Stall processing
    assign SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_consumed0 = (~ (SE_i_cmp2_i88_add243_backStall) & SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_wireValid) | SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_fromReg0;
    assign SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_consumed1 = (~ (SE_i_cmp11_i98_add241_backStall) & SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_wireValid) | SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_fromReg1;
    // Consuming
    assign SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_StallValid = SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_backStall & SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_wireValid;
    assign SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_toReg0 = SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_StallValid & SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_consumed0;
    assign SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_toReg1 = SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_StallValid & SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_consumed1;
    // Backward Stall generation
    assign SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_or0 = SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_consumed0;
    assign SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_wireStall = ~ (SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_consumed1 & SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_or0);
    assign SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_backStall = SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_wireStall;
    // Valid signal propagation
    assign SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_V0 = SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_wireValid & ~ (SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_fromReg0);
    assign SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_V1 = SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_wireValid & ~ (SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_fromReg1);
    // Computing multiple Valid(s)
    assign SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_and0 = redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_valid_out;
    assign SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_and1 = i_llvm_fpga_ffwd_dest_i32_rem31105_add18_out_valid_out & SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_and0;
    assign SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_and2 = SE_out_i_llvm_fpga_mem_lm1269_add223_V1 & SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_and1;
    assign SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_wireValid = SE_out_i_llvm_fpga_mem_lm12810_add224_V1 & SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_and2;

    // SE_out_i_llvm_fpga_mem_lm12810_add224(STALLENABLE,3411)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_i_llvm_fpga_mem_lm12810_add224_fromReg0 <= '0;
            SE_out_i_llvm_fpga_mem_lm12810_add224_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_i_llvm_fpga_mem_lm12810_add224_fromReg0 <= SE_out_i_llvm_fpga_mem_lm12810_add224_toReg0;
            // Successor 1
            SE_out_i_llvm_fpga_mem_lm12810_add224_fromReg1 <= SE_out_i_llvm_fpga_mem_lm12810_add224_toReg1;
        end
    end
    // Input Stall processing
    assign SE_out_i_llvm_fpga_mem_lm12810_add224_consumed0 = (~ (SE_i_cmp2_i88_add243_backStall) & SE_out_i_llvm_fpga_mem_lm12810_add224_wireValid) | SE_out_i_llvm_fpga_mem_lm12810_add224_fromReg0;
    assign SE_out_i_llvm_fpga_mem_lm12810_add224_consumed1 = (~ (SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_backStall) & SE_out_i_llvm_fpga_mem_lm12810_add224_wireValid) | SE_out_i_llvm_fpga_mem_lm12810_add224_fromReg1;
    // Consuming
    assign SE_out_i_llvm_fpga_mem_lm12810_add224_StallValid = SE_out_i_llvm_fpga_mem_lm12810_add224_backStall & SE_out_i_llvm_fpga_mem_lm12810_add224_wireValid;
    assign SE_out_i_llvm_fpga_mem_lm12810_add224_toReg0 = SE_out_i_llvm_fpga_mem_lm12810_add224_StallValid & SE_out_i_llvm_fpga_mem_lm12810_add224_consumed0;
    assign SE_out_i_llvm_fpga_mem_lm12810_add224_toReg1 = SE_out_i_llvm_fpga_mem_lm12810_add224_StallValid & SE_out_i_llvm_fpga_mem_lm12810_add224_consumed1;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_mem_lm12810_add224_or0 = SE_out_i_llvm_fpga_mem_lm12810_add224_consumed0;
    assign SE_out_i_llvm_fpga_mem_lm12810_add224_wireStall = ~ (SE_out_i_llvm_fpga_mem_lm12810_add224_consumed1 & SE_out_i_llvm_fpga_mem_lm12810_add224_or0);
    assign SE_out_i_llvm_fpga_mem_lm12810_add224_backStall = SE_out_i_llvm_fpga_mem_lm12810_add224_wireStall;
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_mem_lm12810_add224_V0 = SE_out_i_llvm_fpga_mem_lm12810_add224_wireValid & ~ (SE_out_i_llvm_fpga_mem_lm12810_add224_fromReg0);
    assign SE_out_i_llvm_fpga_mem_lm12810_add224_V1 = SE_out_i_llvm_fpga_mem_lm12810_add224_wireValid & ~ (SE_out_i_llvm_fpga_mem_lm12810_add224_fromReg1);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_mem_lm12810_add224_wireValid = i_llvm_fpga_mem_lm12810_add224_out_o_valid;

    // SE_i_cmp2_i88_add243(STALLENABLE,3273)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_cmp2_i88_add243_fromReg0 <= '0;
            SE_i_cmp2_i88_add243_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_i_cmp2_i88_add243_fromReg0 <= SE_i_cmp2_i88_add243_toReg0;
            // Successor 1
            SE_i_cmp2_i88_add243_fromReg1 <= SE_i_cmp2_i88_add243_toReg1;
        end
    end
    // Input Stall processing
    assign SE_i_cmp2_i88_add243_consumed0 = (~ (SR_SE_i_acl_20_add260_backStall) & SE_i_cmp2_i88_add243_wireValid) | SE_i_cmp2_i88_add243_fromReg0;
    assign SE_i_cmp2_i88_add243_consumed1 = (~ (SR_SE_i_unnamed_add261_backStall) & SE_i_cmp2_i88_add243_wireValid) | SE_i_cmp2_i88_add243_fromReg1;
    // Consuming
    assign SE_i_cmp2_i88_add243_StallValid = SE_i_cmp2_i88_add243_backStall & SE_i_cmp2_i88_add243_wireValid;
    assign SE_i_cmp2_i88_add243_toReg0 = SE_i_cmp2_i88_add243_StallValid & SE_i_cmp2_i88_add243_consumed0;
    assign SE_i_cmp2_i88_add243_toReg1 = SE_i_cmp2_i88_add243_StallValid & SE_i_cmp2_i88_add243_consumed1;
    // Backward Stall generation
    assign SE_i_cmp2_i88_add243_or0 = SE_i_cmp2_i88_add243_consumed0;
    assign SE_i_cmp2_i88_add243_wireStall = ~ (SE_i_cmp2_i88_add243_consumed1 & SE_i_cmp2_i88_add243_or0);
    assign SE_i_cmp2_i88_add243_backStall = SE_i_cmp2_i88_add243_wireStall;
    // Valid signal propagation
    assign SE_i_cmp2_i88_add243_V0 = SE_i_cmp2_i88_add243_wireValid & ~ (SE_i_cmp2_i88_add243_fromReg0);
    assign SE_i_cmp2_i88_add243_V1 = SE_i_cmp2_i88_add243_wireValid & ~ (SE_i_cmp2_i88_add243_fromReg1);
    // Computing multiple Valid(s)
    assign SE_i_cmp2_i88_add243_and0 = SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_V1;
    assign SE_i_cmp2_i88_add243_and1 = SE_out_i_llvm_fpga_mem_lm12810_add224_V0 & SE_i_cmp2_i88_add243_and0;
    assign SE_i_cmp2_i88_add243_wireValid = SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_V0 & SE_i_cmp2_i88_add243_and1;

    // SE_i_cmp11_i98_add241(STALLENABLE,3269)
    // Valid signal propagation
    assign SE_i_cmp11_i98_add241_V0 = SE_i_cmp11_i98_add241_wireValid;
    // Backward Stall generation
    assign SE_i_cmp11_i98_add241_backStall = SR_SE_i_unnamed_add261_backStall | ~ (SE_i_cmp11_i98_add241_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_cmp11_i98_add241_and0 = SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_V0;
    assign SE_i_cmp11_i98_add241_and1 = SE_out_i_llvm_fpga_mem_lm1269_add223_V0 & SE_i_cmp11_i98_add241_and0;
    assign SE_i_cmp11_i98_add241_wireValid = SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_V1 & SE_i_cmp11_i98_add241_and1;

    // SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2(STALLENABLE,3930)
    // Valid signal propagation
    assign SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_V0 = SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_R_v_0;
    assign SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_V1 = SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_R_v_1;
    // Stall signal propagation
    assign SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_s_tv_0 = SE_i_cmp11_i98_add241_backStall & SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_R_v_0;
    assign SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_s_tv_1 = SE_i_cmp2_i88_add243_backStall & SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_R_v_1;
    // Backward Enable generation
    assign SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_or0 = SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_s_tv_0;
    assign SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_backEN = ~ (SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_s_tv_1 | SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_v_s_0 = SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_backEN & SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_V1;
    // Backward Stall generation
    assign SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_backStall = ~ (SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_R_v_0 <= 1'b0;
            SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_backEN == 1'b0)
            begin
                SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_R_v_0 <= SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_R_v_0 & SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_s_tv_0;
            end
            else
            begin
                SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_R_v_0 <= SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_v_s_0;
            end

            if (SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_backEN == 1'b0)
            begin
                SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_R_v_1 <= SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_R_v_1 & SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_s_tv_1;
            end
            else
            begin
                SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_R_v_1 <= SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_v_s_0;
            end

        end
    end

    // bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20(BITJOIN,2919)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_q = i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_out_dest_data_out_38_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20(BITSELECT,2920)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_q[63:0]);

    // i_arrayidx5_i93_add0_narrow_x(BITSELECT,149)@53
    assign i_arrayidx5_i93_add0_narrow_x_b = bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_b[61:0];

    // i_arrayidx5_i93_add0_shift_join_x(BITJOIN,150)@53
    assign i_arrayidx5_i93_add0_shift_join_x_q = {i_arrayidx5_i93_add0_narrow_x_b, i_arrayidx17_i104_add0_c_i2_02_x_q};

    // lowRangeB_uid2080_i_arrayidx5_i93_add0_mult_x_im9_merged_bit_select(BITSELECT,2368)@50
    assign lowRangeB_uid2080_i_arrayidx5_i93_add0_mult_x_im9_merged_bit_select_b = i_arrayidx5_i93_add0_mult_x_bs10_b[0:0];
    assign lowRangeB_uid2080_i_arrayidx5_i93_add0_mult_x_im9_merged_bit_select_c = i_arrayidx5_i93_add0_mult_x_bs10_b[9:1];

    // i_idxprom_i90_add237_sel_x(BITSELECT,178)@50
    assign i_idxprom_i90_add237_sel_x_b = {32'b00000000000000000000000000000000, bgTrunc_i_sub4_i_31_i189_add219_sel_x_b[31:0]};

    // i_idxprom_i90_add237_vt_select_31(BITSELECT,393)@50
    assign i_idxprom_i90_add237_vt_select_31_b = i_idxprom_i90_add237_sel_x_b[31:0];

    // i_idxprom_i90_add237_vt_join(BITJOIN,392)@50
    assign i_idxprom_i90_add237_vt_join_q = {c_i32_0297_q, i_idxprom_i90_add237_vt_select_31_b};

    // i_arrayidx5_i93_add0_mult_x_bs10(BITSELECT,872)@50
    assign i_arrayidx5_i93_add0_mult_x_bs10_b = i_idxprom_i90_add237_vt_join_q[63:54];

    // lev1_a0sumAHighB_uid2082_i_arrayidx5_i93_add0_mult_x_im9(ADD,2081)@50 + 1
    assign lev1_a0sumAHighB_uid2082_i_arrayidx5_i93_add0_mult_x_im9_a = {1'b0, i_arrayidx5_i93_add0_mult_x_bs10_b};
    assign lev1_a0sumAHighB_uid2082_i_arrayidx5_i93_add0_mult_x_im9_b = {2'b00, lowRangeB_uid2080_i_arrayidx5_i93_add0_mult_x_im9_merged_bit_select_c};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            lev1_a0sumAHighB_uid2082_i_arrayidx5_i93_add0_mult_x_im9_o <= 11'b0;
        end
        else if (SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_backEN == 1'b1)
        begin
            lev1_a0sumAHighB_uid2082_i_arrayidx5_i93_add0_mult_x_im9_o <= $unsigned(lev1_a0sumAHighB_uid2082_i_arrayidx5_i93_add0_mult_x_im9_a) + $unsigned(lev1_a0sumAHighB_uid2082_i_arrayidx5_i93_add0_mult_x_im9_b);
        end
    end
    assign lev1_a0sumAHighB_uid2082_i_arrayidx5_i93_add0_mult_x_im9_q = lev1_a0sumAHighB_uid2082_i_arrayidx5_i93_add0_mult_x_im9_o[10:0];

    // redist12_lowRangeB_uid2080_i_arrayidx5_i93_add0_mult_x_im9_merged_bit_select_b_1_0(REG,2588)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist12_lowRangeB_uid2080_i_arrayidx5_i93_add0_mult_x_im9_merged_bit_select_b_1_0_q <= $unsigned(1'b0);
        end
        else if (SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist12_lowRangeB_uid2080_i_arrayidx5_i93_add0_mult_x_im9_merged_bit_select_b_1_0_q <= $unsigned(lowRangeB_uid2080_i_arrayidx5_i93_add0_mult_x_im9_merged_bit_select_b);
        end
    end

    // lev1_a0_uid2083_i_arrayidx5_i93_add0_mult_x_im9(BITJOIN,2082)@51
    assign lev1_a0_uid2083_i_arrayidx5_i93_add0_mult_x_im9_q = {lev1_a0sumAHighB_uid2082_i_arrayidx5_i93_add0_mult_x_im9_q, redist12_lowRangeB_uid2080_i_arrayidx5_i93_add0_mult_x_im9_merged_bit_select_b_1_0_q};

    // sR_mergedSignalTM_uid2088_i_arrayidx5_i93_add0_mult_x_im9(BITJOIN,2087)@51
    assign sR_mergedSignalTM_uid2088_i_arrayidx5_i93_add0_mult_x_im9_q = {lev1_a0_uid2083_i_arrayidx5_i93_add0_mult_x_im9_q, sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q};

    // i_arrayidx5_i93_add0_mult_x_sums_align_3(BITSHIFT,877)@51
    assign i_arrayidx5_i93_add0_mult_x_sums_align_3_qint = { sR_mergedSignalTM_uid2088_i_arrayidx5_i93_add0_mult_x_im9_q, 4'b0000 };
    assign i_arrayidx5_i93_add0_mult_x_sums_align_3_q = i_arrayidx5_i93_add0_mult_x_sums_align_3_qint[27:0];

    // lowRangeB_uid1956_i_arrayidx5_i93_add0_mult_x_im3_merged_bit_select(BITSELECT,2366)@50
    assign lowRangeB_uid1956_i_arrayidx5_i93_add0_mult_x_im3_merged_bit_select_b = i_arrayidx5_i93_add0_mult_x_bs4_b[0:0];
    assign lowRangeB_uid1956_i_arrayidx5_i93_add0_mult_x_im3_merged_bit_select_c = i_arrayidx5_i93_add0_mult_x_bs4_b[17:1];

    // i_arrayidx5_i93_add0_mult_x_bs4(BITSELECT,866)@50
    assign i_arrayidx5_i93_add0_mult_x_bs4_in = i_idxprom_i90_add237_vt_join_q[35:0];
    assign i_arrayidx5_i93_add0_mult_x_bs4_b = i_arrayidx5_i93_add0_mult_x_bs4_in[35:18];

    // lev1_a0sumAHighB_uid1958_i_arrayidx5_i93_add0_mult_x_im3(ADD,1957)@50 + 1
    assign lev1_a0sumAHighB_uid1958_i_arrayidx5_i93_add0_mult_x_im3_a = {1'b0, i_arrayidx5_i93_add0_mult_x_bs4_b};
    assign lev1_a0sumAHighB_uid1958_i_arrayidx5_i93_add0_mult_x_im3_b = {2'b00, lowRangeB_uid1956_i_arrayidx5_i93_add0_mult_x_im3_merged_bit_select_c};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            lev1_a0sumAHighB_uid1958_i_arrayidx5_i93_add0_mult_x_im3_o <= 19'b0;
        end
        else if (SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_backEN == 1'b1)
        begin
            lev1_a0sumAHighB_uid1958_i_arrayidx5_i93_add0_mult_x_im3_o <= $unsigned(lev1_a0sumAHighB_uid1958_i_arrayidx5_i93_add0_mult_x_im3_a) + $unsigned(lev1_a0sumAHighB_uid1958_i_arrayidx5_i93_add0_mult_x_im3_b);
        end
    end
    assign lev1_a0sumAHighB_uid1958_i_arrayidx5_i93_add0_mult_x_im3_q = lev1_a0sumAHighB_uid1958_i_arrayidx5_i93_add0_mult_x_im3_o[18:0];

    // redist14_lowRangeB_uid1956_i_arrayidx5_i93_add0_mult_x_im3_merged_bit_select_b_1_0(REG,2590)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist14_lowRangeB_uid1956_i_arrayidx5_i93_add0_mult_x_im3_merged_bit_select_b_1_0_q <= $unsigned(1'b0);
        end
        else if (SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist14_lowRangeB_uid1956_i_arrayidx5_i93_add0_mult_x_im3_merged_bit_select_b_1_0_q <= $unsigned(lowRangeB_uid1956_i_arrayidx5_i93_add0_mult_x_im3_merged_bit_select_b);
        end
    end

    // lev1_a0_uid1959_i_arrayidx5_i93_add0_mult_x_im3(BITJOIN,1958)@51
    assign lev1_a0_uid1959_i_arrayidx5_i93_add0_mult_x_im3_q = {lev1_a0sumAHighB_uid1958_i_arrayidx5_i93_add0_mult_x_im3_q, redist14_lowRangeB_uid1956_i_arrayidx5_i93_add0_mult_x_im3_merged_bit_select_b_1_0_q};

    // sR_mergedSignalTM_uid1964_i_arrayidx5_i93_add0_mult_x_im3(BITJOIN,1963)@51
    assign sR_mergedSignalTM_uid1964_i_arrayidx5_i93_add0_mult_x_im3_q = {lev1_a0_uid1959_i_arrayidx5_i93_add0_mult_x_im3_q, sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q};

    // i_arrayidx5_i93_add0_mult_x_sums_align_2(BITSHIFT,876)@51
    assign i_arrayidx5_i93_add0_mult_x_sums_align_2_qint = { sR_mergedSignalTM_uid1964_i_arrayidx5_i93_add0_mult_x_im3_q, 18'b000000000000000000 };
    assign i_arrayidx5_i93_add0_mult_x_sums_align_2_q = i_arrayidx5_i93_add0_mult_x_sums_align_2_qint[49:0];

    // i_arrayidx5_i93_add0_mult_x_sums_join_4(BITJOIN,878)@51
    assign i_arrayidx5_i93_add0_mult_x_sums_join_4_q = {i_arrayidx5_i93_add0_mult_x_sums_align_3_q, i_arrayidx5_i93_add0_mult_x_sums_align_2_q};

    // lowRangeB_uid2018_i_arrayidx5_i93_add0_mult_x_im6_merged_bit_select(BITSELECT,2367)@50
    assign lowRangeB_uid2018_i_arrayidx5_i93_add0_mult_x_im6_merged_bit_select_b = i_arrayidx5_i93_add0_mult_x_bs7_b[0:0];
    assign lowRangeB_uid2018_i_arrayidx5_i93_add0_mult_x_im6_merged_bit_select_c = i_arrayidx5_i93_add0_mult_x_bs7_b[17:1];

    // i_arrayidx5_i93_add0_mult_x_bs7(BITSELECT,869)@50
    assign i_arrayidx5_i93_add0_mult_x_bs7_in = i_idxprom_i90_add237_vt_join_q[53:0];
    assign i_arrayidx5_i93_add0_mult_x_bs7_b = i_arrayidx5_i93_add0_mult_x_bs7_in[53:36];

    // lev1_a0sumAHighB_uid2020_i_arrayidx5_i93_add0_mult_x_im6(ADD,2019)@50 + 1
    assign lev1_a0sumAHighB_uid2020_i_arrayidx5_i93_add0_mult_x_im6_a = {1'b0, i_arrayidx5_i93_add0_mult_x_bs7_b};
    assign lev1_a0sumAHighB_uid2020_i_arrayidx5_i93_add0_mult_x_im6_b = {2'b00, lowRangeB_uid2018_i_arrayidx5_i93_add0_mult_x_im6_merged_bit_select_c};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            lev1_a0sumAHighB_uid2020_i_arrayidx5_i93_add0_mult_x_im6_o <= 19'b0;
        end
        else if (SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_backEN == 1'b1)
        begin
            lev1_a0sumAHighB_uid2020_i_arrayidx5_i93_add0_mult_x_im6_o <= $unsigned(lev1_a0sumAHighB_uid2020_i_arrayidx5_i93_add0_mult_x_im6_a) + $unsigned(lev1_a0sumAHighB_uid2020_i_arrayidx5_i93_add0_mult_x_im6_b);
        end
    end
    assign lev1_a0sumAHighB_uid2020_i_arrayidx5_i93_add0_mult_x_im6_q = lev1_a0sumAHighB_uid2020_i_arrayidx5_i93_add0_mult_x_im6_o[18:0];

    // redist13_lowRangeB_uid2018_i_arrayidx5_i93_add0_mult_x_im6_merged_bit_select_b_1_0(REG,2589)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist13_lowRangeB_uid2018_i_arrayidx5_i93_add0_mult_x_im6_merged_bit_select_b_1_0_q <= $unsigned(1'b0);
        end
        else if (SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist13_lowRangeB_uid2018_i_arrayidx5_i93_add0_mult_x_im6_merged_bit_select_b_1_0_q <= $unsigned(lowRangeB_uid2018_i_arrayidx5_i93_add0_mult_x_im6_merged_bit_select_b);
        end
    end

    // lev1_a0_uid2021_i_arrayidx5_i93_add0_mult_x_im6(BITJOIN,2020)@51
    assign lev1_a0_uid2021_i_arrayidx5_i93_add0_mult_x_im6_q = {lev1_a0sumAHighB_uid2020_i_arrayidx5_i93_add0_mult_x_im6_q, redist13_lowRangeB_uid2018_i_arrayidx5_i93_add0_mult_x_im6_merged_bit_select_b_1_0_q};

    // sR_mergedSignalTM_uid2026_i_arrayidx5_i93_add0_mult_x_im6(BITJOIN,2025)@51
    assign sR_mergedSignalTM_uid2026_i_arrayidx5_i93_add0_mult_x_im6_q = {lev1_a0_uid2021_i_arrayidx5_i93_add0_mult_x_im6_q, sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q};

    // i_arrayidx5_i93_add0_mult_x_sums_align_0(BITSHIFT,874)@51
    assign i_arrayidx5_i93_add0_mult_x_sums_align_0_qint = { sR_mergedSignalTM_uid2026_i_arrayidx5_i93_add0_mult_x_im6_q, 4'b0000 };
    assign i_arrayidx5_i93_add0_mult_x_sums_align_0_q = i_arrayidx5_i93_add0_mult_x_sums_align_0_qint[35:0];

    // lowRangeB_uid1894_i_arrayidx5_i93_add0_mult_x_im0_merged_bit_select(BITSELECT,2365)@50
    assign lowRangeB_uid1894_i_arrayidx5_i93_add0_mult_x_im0_merged_bit_select_b = i_arrayidx5_i93_add0_mult_x_bs1_b[0:0];
    assign lowRangeB_uid1894_i_arrayidx5_i93_add0_mult_x_im0_merged_bit_select_c = i_arrayidx5_i93_add0_mult_x_bs1_b[17:1];

    // i_arrayidx5_i93_add0_mult_x_bs1(BITSELECT,863)@50
    assign i_arrayidx5_i93_add0_mult_x_bs1_in = i_idxprom_i90_add237_vt_join_q[17:0];
    assign i_arrayidx5_i93_add0_mult_x_bs1_b = i_arrayidx5_i93_add0_mult_x_bs1_in[17:0];

    // lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0(ADD,1895)@50 + 1
    assign lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_a = {1'b0, i_arrayidx5_i93_add0_mult_x_bs1_b};
    assign lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_b = {2'b00, lowRangeB_uid1894_i_arrayidx5_i93_add0_mult_x_im0_merged_bit_select_c};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_o <= 19'b0;
        end
        else if (SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_backEN == 1'b1)
        begin
            lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_o <= $unsigned(lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_a) + $unsigned(lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_b);
        end
    end
    assign lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_q = lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_o[18:0];

    // redist15_lowRangeB_uid1894_i_arrayidx5_i93_add0_mult_x_im0_merged_bit_select_b_1_0(REG,2591)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist15_lowRangeB_uid1894_i_arrayidx5_i93_add0_mult_x_im0_merged_bit_select_b_1_0_q <= $unsigned(1'b0);
        end
        else if (SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist15_lowRangeB_uid1894_i_arrayidx5_i93_add0_mult_x_im0_merged_bit_select_b_1_0_q <= $unsigned(lowRangeB_uid1894_i_arrayidx5_i93_add0_mult_x_im0_merged_bit_select_b);
        end
    end

    // lev1_a0_uid1897_i_arrayidx5_i93_add0_mult_x_im0(BITJOIN,1896)@51
    assign lev1_a0_uid1897_i_arrayidx5_i93_add0_mult_x_im0_q = {lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_q, redist15_lowRangeB_uid1894_i_arrayidx5_i93_add0_mult_x_im0_merged_bit_select_b_1_0_q};

    // sR_mergedSignalTM_uid1902_i_arrayidx5_i93_add0_mult_x_im0(BITJOIN,1901)@51
    assign sR_mergedSignalTM_uid1902_i_arrayidx5_i93_add0_mult_x_im0_q = {lev1_a0_uid1897_i_arrayidx5_i93_add0_mult_x_im0_q, sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q};

    // i_arrayidx5_i93_add0_mult_x_sums_join_1(BITJOIN,875)@51
    assign i_arrayidx5_i93_add0_mult_x_sums_join_1_q = {i_arrayidx5_i93_add0_mult_x_sums_align_0_q, sR_mergedSignalTM_uid1902_i_arrayidx5_i93_add0_mult_x_im0_q};

    // i_arrayidx5_i93_add0_mult_x_sums_result_add_0_0(ADD,879)@51
    assign i_arrayidx5_i93_add0_mult_x_sums_result_add_0_0_a = {11'b00000000000, i_arrayidx5_i93_add0_mult_x_sums_join_1_q};
    assign i_arrayidx5_i93_add0_mult_x_sums_result_add_0_0_b = {1'b0, i_arrayidx5_i93_add0_mult_x_sums_join_4_q};
    assign i_arrayidx5_i93_add0_mult_x_sums_result_add_0_0_o = $unsigned(i_arrayidx5_i93_add0_mult_x_sums_result_add_0_0_a) + $unsigned(i_arrayidx5_i93_add0_mult_x_sums_result_add_0_0_b);
    assign i_arrayidx5_i93_add0_mult_x_sums_result_add_0_0_q = i_arrayidx5_i93_add0_mult_x_sums_result_add_0_0_o[78:0];

    // i_arrayidx5_i93_add0_mult_extender_x(BITJOIN,141)@51
    assign i_arrayidx5_i93_add0_mult_extender_x_q = {i_arrayidx17_i104_add0_mult_multconst_x_q, i_arrayidx5_i93_add0_mult_x_sums_result_add_0_0_q[77:0]};

    // i_arrayidx5_i93_add0_trunc_sel_x(BITSELECT,143)@51
    assign i_arrayidx5_i93_add0_trunc_sel_x_b = i_arrayidx5_i93_add0_mult_extender_x_q[63:0];

    // redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0(REG,2761)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_q <= $unsigned(64'b0000000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_backEN == 1'b1)
        begin
            redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_q <= $unsigned(i_arrayidx5_i93_add0_trunc_sel_x_b);
        end
    end

    // bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19(BITJOIN,2955)
    assign bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_q = i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_out_dest_data_out_1_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19(BITSELECT,2956)
    assign bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_q[63:0]);

    // i_arrayidx5_i93_add0_add_x(ADD,144)@52
    assign i_arrayidx5_i93_add0_add_x_a = {1'b0, bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_b};
    assign i_arrayidx5_i93_add0_add_x_b = {1'b0, redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_q};
    assign i_arrayidx5_i93_add0_add_x_o = $unsigned(i_arrayidx5_i93_add0_add_x_a) + $unsigned(i_arrayidx5_i93_add0_add_x_b);
    assign i_arrayidx5_i93_add0_add_x_q = i_arrayidx5_i93_add0_add_x_o[64:0];

    // i_arrayidx5_i93_add0_dupName_0_trunc_sel_x(BITSELECT,132)@52
    assign i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b = i_arrayidx5_i93_add0_add_x_q[63:0];

    // redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0(REG,2763)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_q <= $unsigned(64'b0000000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_backEN == 1'b1)
        begin
            redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_q <= $unsigned(i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b);
        end
    end

    // i_arrayidx5_i93_add0_dupName_0_add_x(ADD,136)@53
    assign i_arrayidx5_i93_add0_dupName_0_add_x_a = {1'b0, redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_q};
    assign i_arrayidx5_i93_add0_dupName_0_add_x_b = {1'b0, i_arrayidx5_i93_add0_shift_join_x_q};
    assign i_arrayidx5_i93_add0_dupName_0_add_x_o = $unsigned(i_arrayidx5_i93_add0_dupName_0_add_x_a) + $unsigned(i_arrayidx5_i93_add0_dupName_0_add_x_b);
    assign i_arrayidx5_i93_add0_dupName_0_add_x_q = i_arrayidx5_i93_add0_dupName_0_add_x_o[64:0];

    // i_arrayidx5_i93_add0_dupName_2_trunc_sel_x(BITSELECT,133)@53
    assign i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b = i_arrayidx5_i93_add0_dupName_0_add_x_q[63:0];

    // SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0(STALLENABLE,3907)
    // Valid signal propagation
    assign SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_V0 = SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_s_tv_0 = SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_backStall & SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_backEN = ~ (SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_v_s_0 = SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_backEN & SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_V;
    // Backward Stall generation
    assign SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_backStall = ~ (SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_backEN == 1'b0)
            begin
                SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0 <= SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0 & SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_s_tv_0;
            end
            else
            begin
                SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0 <= SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_v_s_0;
            end

        end
    end

    // SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0(STALLREG,4495)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_r_valid <= 1'b0;
            SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_r_data0 <= 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_r_valid <= SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_backStall & (SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_r_valid | SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_i_valid);

            if (SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_r_data0 <= i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_i_valid = SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_V0;
    // Stall signal propagation
    assign SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_backStall = SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_r_valid | ~ (SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_i_valid);

    // Valid
    assign SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_V = SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_r_valid == 1'b1 ? SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_r_valid : SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_i_valid;

    assign SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_D0 = SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_r_valid == 1'b1 ? SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_r_data0 : i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b;

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_21(STALLENABLE,3992)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_21_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_21_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_21_backStall = i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_21_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_21_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_21_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20(BLACKBOX,425)@52
    // in in_stall_in@20000000
    // out out_dest_data_out_38_0@53
    // out out_stall_out@20000000
    // out out_valid_out@53
    add_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_0 thei_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20 (
        .in_intel_reserved_ffwd_38_0(in_intel_reserved_ffwd_38_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_21_V0),
        .out_dest_data_out_38_0(i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_out_dest_data_out_38_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20(STALLENABLE,3375)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_V0 = SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_backStall = SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_and0 = i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_out_valid_out;
    assign SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_wireValid = SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_V0 & SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_and0;

    // SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0(STALLENABLE,3908)
    // Valid signal propagation
    assign SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_V0 = SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0 = SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101107_add20_backStall & SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_backEN = ~ (SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0 = SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_backEN & SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_V0;
    // Backward Stall generation
    assign SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_backStall = ~ (SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_backEN == 1'b0)
            begin
                SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 <= SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 & SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0;
            end
            else
            begin
                SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 <= SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0;
            end

        end
    end

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_20(STALLENABLE,3990)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_20_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_20_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_20_backStall = i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_20_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_20_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_20_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19(BLACKBOX,437)@51
    // in in_stall_in@20000000
    // out out_dest_data_out_1_0@52
    // out out_stall_out@20000000
    // out out_valid_out@52
    add_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_0 thei_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19 (
        .in_intel_reserved_ffwd_1_0(in_intel_reserved_ffwd_1_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_20_V0),
        .out_dest_data_out_1_0(i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_out_dest_data_out_1_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19(STALLENABLE,3399)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_V0 = SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_backStall = SE_redist169_i_arrayidx5_i93_add0_dupName_0_trunc_sel_x_b_1_0_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_and0 = i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_out_valid_out;
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_wireValid = SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_V0 & SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_and0;

    // SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0(STALLENABLE,3906)
    // Valid signal propagation
    assign SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_V0 = SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_R_v_0;
    assign SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_V1 = SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_R_v_1;
    // Stall signal propagation
    assign SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_s_tv_0 = SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46725_add19_backStall & SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_R_v_0;
    assign SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_s_tv_1 = SE_redist185_bgTrunc_i_sub4_i_31_i189_add219_sel_x_b_3_2_backStall & SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_R_v_1;
    // Backward Enable generation
    assign SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_or0 = SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_s_tv_0;
    assign SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_backEN = ~ (SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_s_tv_1 | SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_v_s_0 = SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_backEN & SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_V1;
    // Backward Stall generation
    assign SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_backStall = ~ (SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_R_v_0 <= 1'b0;
            SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_backEN == 1'b0)
            begin
                SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_R_v_0 <= SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_R_v_0 & SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_s_tv_0;
            end
            else
            begin
                SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_R_v_0 <= SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_v_s_0;
            end

            if (SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_backEN == 1'b0)
            begin
                SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_R_v_1 <= SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_R_v_1 & SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_s_tv_1;
            end
            else
            begin
                SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_R_v_1 <= SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_v_s_0;
            end

        end
    end

    // i_arrayidx17_i104_add0_narrow_x(BITSELECT,69)@50
    assign i_arrayidx17_i104_add0_narrow_x_b = i_idxprom_i90_add237_vt_join_q[61:0];

    // redist180_i_arrayidx17_i104_add0_narrow_x_b_1_0(REG,2776)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist180_i_arrayidx17_i104_add0_narrow_x_b_1_0_q <= $unsigned(62'b00000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist180_i_arrayidx17_i104_add0_narrow_x_b_1_0_q <= $unsigned(i_arrayidx17_i104_add0_narrow_x_b);
        end
    end

    // i_arrayidx17_i104_add0_shift_join_x(BITJOIN,70)@51
    assign i_arrayidx17_i104_add0_shift_join_x_q = {redist180_i_arrayidx17_i104_add0_narrow_x_b_1_0_q, i_arrayidx17_i104_add0_c_i2_02_x_q};

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_23(STALLENABLE,3996)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_23_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_23_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_23_backStall = i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_23_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_23_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_23_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22(BLACKBOX,436)@49
    // in in_stall_in@20000000
    // out out_dest_data_out_1_0@50
    // out out_stall_out@20000000
    // out out_valid_out@50
    add_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_0 thei_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22 (
        .in_intel_reserved_ffwd_1_0(in_intel_reserved_ffwd_1_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_23_V0),
        .out_dest_data_out_1_0(i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_out_dest_data_out_1_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22(STALLENABLE,3397)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_V0 = SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_backStall = SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_and0 = i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_out_valid_out;
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_wireValid = SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_V0 & SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_and0;

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_24(STALLENABLE,3998)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_24_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_24_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_24_backStall = i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_24_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_24_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_24_reg_valid_out;

    // i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23(BLACKBOX,424)@47
    // in in_stall_in@20000000
    // out out_dest_data_out_38_0@48
    // out out_stall_out@20000000
    // out out_valid_out@48
    add_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_0 thei_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23 (
        .in_intel_reserved_ffwd_38_0(in_intel_reserved_ffwd_38_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_24_V0),
        .out_dest_data_out_38_0(i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_out_dest_data_out_38_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23(STALLENABLE,3373)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_V0 = SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_backStall = SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_wireValid = i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_out_valid_out;

    // SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0(STALLENABLE,3622)
    // Valid signal propagation
    assign SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_V0 = SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_R_v_0;
    // Stall signal propagation
    assign SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_s_tv_0 = SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_backStall & SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_R_v_0;
    // Backward Enable generation
    assign SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_backEN = ~ (SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_v_s_0 = SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_backEN & SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_V0;
    // Backward Stall generation
    assign SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_backStall = ~ (SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_backEN == 1'b0)
            begin
                SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_R_v_0 <= SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_R_v_0 & SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_s_tv_0;
            end
            else
            begin
                SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_R_v_0 <= SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_v_s_0;
            end

        end
    end

    // SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0(STALLENABLE,3922)
    // Valid signal propagation
    assign SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_V0 = SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_s_tv_0 = SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_backStall & SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_backEN = ~ (SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_v_s_0 = SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_backEN & SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_V0;
    // Backward Stall generation
    assign SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_backStall = ~ (SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_backEN == 1'b0)
            begin
                SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_R_v_0 <= SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_R_v_0 & SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_s_tv_0;
            end
            else
            begin
                SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_R_v_0 <= SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_v_s_0;
            end

        end
    end

    // lowRangeB_uid1136_i_arrayidx17_i104_add0_mult_x_im9_merged_bit_select(BITSELECT,2372)@48
    assign lowRangeB_uid1136_i_arrayidx17_i104_add0_mult_x_im9_merged_bit_select_b = i_arrayidx17_i104_add0_mult_x_bs1_merged_bit_select_e[0:0];
    assign lowRangeB_uid1136_i_arrayidx17_i104_add0_mult_x_im9_merged_bit_select_c = i_arrayidx17_i104_add0_mult_x_bs1_merged_bit_select_e[9:1];

    // bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23(BITJOIN,2916)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_q = i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_out_dest_data_out_38_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23(BITSELECT,2917)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_q[63:0]);

    // i_arrayidx17_i104_add0_mult_x_bs1_merged_bit_select(BITSELECT,2358)@48
    assign i_arrayidx17_i104_add0_mult_x_bs1_merged_bit_select_b = bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_b[17:0];
    assign i_arrayidx17_i104_add0_mult_x_bs1_merged_bit_select_c = bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_b[35:18];
    assign i_arrayidx17_i104_add0_mult_x_bs1_merged_bit_select_d = bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_b[53:36];
    assign i_arrayidx17_i104_add0_mult_x_bs1_merged_bit_select_e = bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i101106_add23_b[63:54];

    // lev1_a0sumAHighB_uid1138_i_arrayidx17_i104_add0_mult_x_im9(ADD,1137)@48 + 1
    assign lev1_a0sumAHighB_uid1138_i_arrayidx17_i104_add0_mult_x_im9_a = {1'b0, i_arrayidx17_i104_add0_mult_x_bs1_merged_bit_select_e};
    assign lev1_a0sumAHighB_uid1138_i_arrayidx17_i104_add0_mult_x_im9_b = {2'b00, lowRangeB_uid1136_i_arrayidx17_i104_add0_mult_x_im9_merged_bit_select_c};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            lev1_a0sumAHighB_uid1138_i_arrayidx17_i104_add0_mult_x_im9_o <= 11'b0;
        end
        else if (SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_backEN == 1'b1)
        begin
            lev1_a0sumAHighB_uid1138_i_arrayidx17_i104_add0_mult_x_im9_o <= $unsigned(lev1_a0sumAHighB_uid1138_i_arrayidx17_i104_add0_mult_x_im9_a) + $unsigned(lev1_a0sumAHighB_uid1138_i_arrayidx17_i104_add0_mult_x_im9_b);
        end
    end
    assign lev1_a0sumAHighB_uid1138_i_arrayidx17_i104_add0_mult_x_im9_q = lev1_a0sumAHighB_uid1138_i_arrayidx17_i104_add0_mult_x_im9_o[10:0];

    // redist8_lowRangeB_uid1136_i_arrayidx17_i104_add0_mult_x_im9_merged_bit_select_b_1_0(REG,2584)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist8_lowRangeB_uid1136_i_arrayidx17_i104_add0_mult_x_im9_merged_bit_select_b_1_0_q <= $unsigned(1'b0);
        end
        else if (SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist8_lowRangeB_uid1136_i_arrayidx17_i104_add0_mult_x_im9_merged_bit_select_b_1_0_q <= $unsigned(lowRangeB_uid1136_i_arrayidx17_i104_add0_mult_x_im9_merged_bit_select_b);
        end
    end

    // lev1_a0_uid1139_i_arrayidx17_i104_add0_mult_x_im9(BITJOIN,1138)@49
    assign lev1_a0_uid1139_i_arrayidx17_i104_add0_mult_x_im9_q = {lev1_a0sumAHighB_uid1138_i_arrayidx17_i104_add0_mult_x_im9_q, redist8_lowRangeB_uid1136_i_arrayidx17_i104_add0_mult_x_im9_merged_bit_select_b_1_0_q};

    // sR_mergedSignalTM_uid1144_i_arrayidx17_i104_add0_mult_x_im9(BITJOIN,1143)@49
    assign sR_mergedSignalTM_uid1144_i_arrayidx17_i104_add0_mult_x_im9_q = {lev1_a0_uid1139_i_arrayidx17_i104_add0_mult_x_im9_q, sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q};

    // i_arrayidx17_i104_add0_mult_x_sums_align_3(BITSHIFT,805)@49
    assign i_arrayidx17_i104_add0_mult_x_sums_align_3_qint = { sR_mergedSignalTM_uid1144_i_arrayidx17_i104_add0_mult_x_im9_q, 4'b0000 };
    assign i_arrayidx17_i104_add0_mult_x_sums_align_3_q = i_arrayidx17_i104_add0_mult_x_sums_align_3_qint[27:0];

    // lowRangeB_uid1012_i_arrayidx17_i104_add0_mult_x_im3_merged_bit_select(BITSELECT,2370)@48
    assign lowRangeB_uid1012_i_arrayidx17_i104_add0_mult_x_im3_merged_bit_select_b = i_arrayidx17_i104_add0_mult_x_bs1_merged_bit_select_c[0:0];
    assign lowRangeB_uid1012_i_arrayidx17_i104_add0_mult_x_im3_merged_bit_select_c = i_arrayidx17_i104_add0_mult_x_bs1_merged_bit_select_c[17:1];

    // lev1_a0sumAHighB_uid1014_i_arrayidx17_i104_add0_mult_x_im3(ADD,1013)@48 + 1
    assign lev1_a0sumAHighB_uid1014_i_arrayidx17_i104_add0_mult_x_im3_a = {1'b0, i_arrayidx17_i104_add0_mult_x_bs1_merged_bit_select_c};
    assign lev1_a0sumAHighB_uid1014_i_arrayidx17_i104_add0_mult_x_im3_b = {2'b00, lowRangeB_uid1012_i_arrayidx17_i104_add0_mult_x_im3_merged_bit_select_c};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            lev1_a0sumAHighB_uid1014_i_arrayidx17_i104_add0_mult_x_im3_o <= 19'b0;
        end
        else if (SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_backEN == 1'b1)
        begin
            lev1_a0sumAHighB_uid1014_i_arrayidx17_i104_add0_mult_x_im3_o <= $unsigned(lev1_a0sumAHighB_uid1014_i_arrayidx17_i104_add0_mult_x_im3_a) + $unsigned(lev1_a0sumAHighB_uid1014_i_arrayidx17_i104_add0_mult_x_im3_b);
        end
    end
    assign lev1_a0sumAHighB_uid1014_i_arrayidx17_i104_add0_mult_x_im3_q = lev1_a0sumAHighB_uid1014_i_arrayidx17_i104_add0_mult_x_im3_o[18:0];

    // redist10_lowRangeB_uid1012_i_arrayidx17_i104_add0_mult_x_im3_merged_bit_select_b_1_0(REG,2586)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist10_lowRangeB_uid1012_i_arrayidx17_i104_add0_mult_x_im3_merged_bit_select_b_1_0_q <= $unsigned(1'b0);
        end
        else if (SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist10_lowRangeB_uid1012_i_arrayidx17_i104_add0_mult_x_im3_merged_bit_select_b_1_0_q <= $unsigned(lowRangeB_uid1012_i_arrayidx17_i104_add0_mult_x_im3_merged_bit_select_b);
        end
    end

    // lev1_a0_uid1015_i_arrayidx17_i104_add0_mult_x_im3(BITJOIN,1014)@49
    assign lev1_a0_uid1015_i_arrayidx17_i104_add0_mult_x_im3_q = {lev1_a0sumAHighB_uid1014_i_arrayidx17_i104_add0_mult_x_im3_q, redist10_lowRangeB_uid1012_i_arrayidx17_i104_add0_mult_x_im3_merged_bit_select_b_1_0_q};

    // sR_mergedSignalTM_uid1020_i_arrayidx17_i104_add0_mult_x_im3(BITJOIN,1019)@49
    assign sR_mergedSignalTM_uid1020_i_arrayidx17_i104_add0_mult_x_im3_q = {lev1_a0_uid1015_i_arrayidx17_i104_add0_mult_x_im3_q, sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q};

    // i_arrayidx17_i104_add0_mult_x_sums_align_2(BITSHIFT,804)@49
    assign i_arrayidx17_i104_add0_mult_x_sums_align_2_qint = { sR_mergedSignalTM_uid1020_i_arrayidx17_i104_add0_mult_x_im3_q, 18'b000000000000000000 };
    assign i_arrayidx17_i104_add0_mult_x_sums_align_2_q = i_arrayidx17_i104_add0_mult_x_sums_align_2_qint[49:0];

    // i_arrayidx17_i104_add0_mult_x_sums_join_4(BITJOIN,806)@49
    assign i_arrayidx17_i104_add0_mult_x_sums_join_4_q = {i_arrayidx17_i104_add0_mult_x_sums_align_3_q, i_arrayidx17_i104_add0_mult_x_sums_align_2_q};

    // lowRangeB_uid1074_i_arrayidx17_i104_add0_mult_x_im6_merged_bit_select(BITSELECT,2371)@48
    assign lowRangeB_uid1074_i_arrayidx17_i104_add0_mult_x_im6_merged_bit_select_b = i_arrayidx17_i104_add0_mult_x_bs1_merged_bit_select_d[0:0];
    assign lowRangeB_uid1074_i_arrayidx17_i104_add0_mult_x_im6_merged_bit_select_c = i_arrayidx17_i104_add0_mult_x_bs1_merged_bit_select_d[17:1];

    // lev1_a0sumAHighB_uid1076_i_arrayidx17_i104_add0_mult_x_im6(ADD,1075)@48 + 1
    assign lev1_a0sumAHighB_uid1076_i_arrayidx17_i104_add0_mult_x_im6_a = {1'b0, i_arrayidx17_i104_add0_mult_x_bs1_merged_bit_select_d};
    assign lev1_a0sumAHighB_uid1076_i_arrayidx17_i104_add0_mult_x_im6_b = {2'b00, lowRangeB_uid1074_i_arrayidx17_i104_add0_mult_x_im6_merged_bit_select_c};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            lev1_a0sumAHighB_uid1076_i_arrayidx17_i104_add0_mult_x_im6_o <= 19'b0;
        end
        else if (SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_backEN == 1'b1)
        begin
            lev1_a0sumAHighB_uid1076_i_arrayidx17_i104_add0_mult_x_im6_o <= $unsigned(lev1_a0sumAHighB_uid1076_i_arrayidx17_i104_add0_mult_x_im6_a) + $unsigned(lev1_a0sumAHighB_uid1076_i_arrayidx17_i104_add0_mult_x_im6_b);
        end
    end
    assign lev1_a0sumAHighB_uid1076_i_arrayidx17_i104_add0_mult_x_im6_q = lev1_a0sumAHighB_uid1076_i_arrayidx17_i104_add0_mult_x_im6_o[18:0];

    // redist9_lowRangeB_uid1074_i_arrayidx17_i104_add0_mult_x_im6_merged_bit_select_b_1_0(REG,2585)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist9_lowRangeB_uid1074_i_arrayidx17_i104_add0_mult_x_im6_merged_bit_select_b_1_0_q <= $unsigned(1'b0);
        end
        else if (SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist9_lowRangeB_uid1074_i_arrayidx17_i104_add0_mult_x_im6_merged_bit_select_b_1_0_q <= $unsigned(lowRangeB_uid1074_i_arrayidx17_i104_add0_mult_x_im6_merged_bit_select_b);
        end
    end

    // lev1_a0_uid1077_i_arrayidx17_i104_add0_mult_x_im6(BITJOIN,1076)@49
    assign lev1_a0_uid1077_i_arrayidx17_i104_add0_mult_x_im6_q = {lev1_a0sumAHighB_uid1076_i_arrayidx17_i104_add0_mult_x_im6_q, redist9_lowRangeB_uid1074_i_arrayidx17_i104_add0_mult_x_im6_merged_bit_select_b_1_0_q};

    // sR_mergedSignalTM_uid1082_i_arrayidx17_i104_add0_mult_x_im6(BITJOIN,1081)@49
    assign sR_mergedSignalTM_uid1082_i_arrayidx17_i104_add0_mult_x_im6_q = {lev1_a0_uid1077_i_arrayidx17_i104_add0_mult_x_im6_q, sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q};

    // i_arrayidx17_i104_add0_mult_x_sums_align_0(BITSHIFT,802)@49
    assign i_arrayidx17_i104_add0_mult_x_sums_align_0_qint = { sR_mergedSignalTM_uid1082_i_arrayidx17_i104_add0_mult_x_im6_q, 4'b0000 };
    assign i_arrayidx17_i104_add0_mult_x_sums_align_0_q = i_arrayidx17_i104_add0_mult_x_sums_align_0_qint[35:0];

    // lowRangeB_uid950_i_arrayidx17_i104_add0_mult_x_im0_merged_bit_select(BITSELECT,2369)@48
    assign lowRangeB_uid950_i_arrayidx17_i104_add0_mult_x_im0_merged_bit_select_b = i_arrayidx17_i104_add0_mult_x_bs1_merged_bit_select_b[0:0];
    assign lowRangeB_uid950_i_arrayidx17_i104_add0_mult_x_im0_merged_bit_select_c = i_arrayidx17_i104_add0_mult_x_bs1_merged_bit_select_b[17:1];

    // lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0(ADD,951)@48 + 1
    assign lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_a = {1'b0, i_arrayidx17_i104_add0_mult_x_bs1_merged_bit_select_b};
    assign lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_b = {2'b00, lowRangeB_uid950_i_arrayidx17_i104_add0_mult_x_im0_merged_bit_select_c};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_o <= 19'b0;
        end
        else if (SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_backEN == 1'b1)
        begin
            lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_o <= $unsigned(lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_a) + $unsigned(lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_b);
        end
    end
    assign lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_q = lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_o[18:0];

    // redist11_lowRangeB_uid950_i_arrayidx17_i104_add0_mult_x_im0_merged_bit_select_b_1_0(REG,2587)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist11_lowRangeB_uid950_i_arrayidx17_i104_add0_mult_x_im0_merged_bit_select_b_1_0_q <= $unsigned(1'b0);
        end
        else if (SE_lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist11_lowRangeB_uid950_i_arrayidx17_i104_add0_mult_x_im0_merged_bit_select_b_1_0_q <= $unsigned(lowRangeB_uid950_i_arrayidx17_i104_add0_mult_x_im0_merged_bit_select_b);
        end
    end

    // lev1_a0_uid953_i_arrayidx17_i104_add0_mult_x_im0(BITJOIN,952)@49
    assign lev1_a0_uid953_i_arrayidx17_i104_add0_mult_x_im0_q = {lev1_a0sumAHighB_uid952_i_arrayidx17_i104_add0_mult_x_im0_q, redist11_lowRangeB_uid950_i_arrayidx17_i104_add0_mult_x_im0_merged_bit_select_b_1_0_q};

    // sR_mergedSignalTM_uid958_i_arrayidx17_i104_add0_mult_x_im0(BITJOIN,957)@49
    assign sR_mergedSignalTM_uid958_i_arrayidx17_i104_add0_mult_x_im0_q = {lev1_a0_uid953_i_arrayidx17_i104_add0_mult_x_im0_q, sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q};

    // i_arrayidx17_i104_add0_mult_x_sums_join_1(BITJOIN,803)@49
    assign i_arrayidx17_i104_add0_mult_x_sums_join_1_q = {i_arrayidx17_i104_add0_mult_x_sums_align_0_q, sR_mergedSignalTM_uid958_i_arrayidx17_i104_add0_mult_x_im0_q};

    // i_arrayidx17_i104_add0_mult_x_sums_result_add_0_0(ADD,807)@49
    assign i_arrayidx17_i104_add0_mult_x_sums_result_add_0_0_a = {11'b00000000000, i_arrayidx17_i104_add0_mult_x_sums_join_1_q};
    assign i_arrayidx17_i104_add0_mult_x_sums_result_add_0_0_b = {1'b0, i_arrayidx17_i104_add0_mult_x_sums_join_4_q};
    assign i_arrayidx17_i104_add0_mult_x_sums_result_add_0_0_o = $unsigned(i_arrayidx17_i104_add0_mult_x_sums_result_add_0_0_a) + $unsigned(i_arrayidx17_i104_add0_mult_x_sums_result_add_0_0_b);
    assign i_arrayidx17_i104_add0_mult_x_sums_result_add_0_0_q = i_arrayidx17_i104_add0_mult_x_sums_result_add_0_0_o[78:0];

    // i_arrayidx17_i104_add0_mult_extender_x(BITJOIN,61)@49
    assign i_arrayidx17_i104_add0_mult_extender_x_q = {i_arrayidx17_i104_add0_mult_multconst_x_q, i_arrayidx17_i104_add0_mult_x_sums_result_add_0_0_q[77:0]};

    // i_arrayidx17_i104_add0_trunc_sel_x(BITSELECT,63)@49
    assign i_arrayidx17_i104_add0_trunc_sel_x_b = i_arrayidx17_i104_add0_mult_extender_x_q[63:0];

    // redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0(REG,2777)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_q <= $unsigned(64'b0000000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_backEN == 1'b1)
        begin
            redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_q <= $unsigned(i_arrayidx17_i104_add0_trunc_sel_x_b);
        end
    end

    // bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22(BITJOIN,2952)
    assign bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_q = i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_out_dest_data_out_1_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22(BITSELECT,2953)
    assign bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_q[63:0]);

    // i_arrayidx17_i104_add0_add_x(ADD,64)@50
    assign i_arrayidx17_i104_add0_add_x_a = {1'b0, bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_b};
    assign i_arrayidx17_i104_add0_add_x_b = {1'b0, redist181_i_arrayidx17_i104_add0_trunc_sel_x_b_1_0_q};
    assign i_arrayidx17_i104_add0_add_x_o = $unsigned(i_arrayidx17_i104_add0_add_x_a) + $unsigned(i_arrayidx17_i104_add0_add_x_b);
    assign i_arrayidx17_i104_add0_add_x_q = i_arrayidx17_i104_add0_add_x_o[64:0];

    // i_arrayidx17_i104_add0_dupName_0_trunc_sel_x(BITSELECT,52)@50
    assign i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b = i_arrayidx17_i104_add0_add_x_q[63:0];

    // redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0(REG,2781)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_q <= $unsigned(64'b0000000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_backEN == 1'b1)
        begin
            redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_q <= $unsigned(i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b);
        end
    end

    // i_arrayidx17_i104_add0_dupName_0_add_x(ADD,56)@51
    assign i_arrayidx17_i104_add0_dupName_0_add_x_a = {1'b0, redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_q};
    assign i_arrayidx17_i104_add0_dupName_0_add_x_b = {1'b0, i_arrayidx17_i104_add0_shift_join_x_q};
    assign i_arrayidx17_i104_add0_dupName_0_add_x_o = $unsigned(i_arrayidx17_i104_add0_dupName_0_add_x_a) + $unsigned(i_arrayidx17_i104_add0_dupName_0_add_x_b);
    assign i_arrayidx17_i104_add0_dupName_0_add_x_q = i_arrayidx17_i104_add0_dupName_0_add_x_o[64:0];

    // i_arrayidx17_i104_add0_dupName_2_trunc_sel_x(BITSELECT,53)@51
    assign i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b = i_arrayidx17_i104_add0_dupName_0_add_x_q[63:0];

    // redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0(REG,2778)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_q <= $unsigned(64'b0000000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_backEN == 1'b1)
        begin
            redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_q <= $unsigned(i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b);
        end
    end

    // redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1(REG,2779)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_q <= $unsigned(64'b0000000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_backEN == 1'b1)
        begin
            redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_q <= $unsigned(redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_q);
        end
    end

    // SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2(STALLENABLE,3925)
    // Valid signal propagation
    assign SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_V0 = SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_R_v_0;
    // Stall signal propagation
    assign SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_s_tv_0 = SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_backStall & SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_R_v_0;
    // Backward Enable generation
    assign SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_backEN = ~ (SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_v_s_0 = SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_backEN & SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_V;
    // Backward Stall generation
    assign SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_backStall = ~ (SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_backEN == 1'b0)
            begin
                SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_R_v_0 <= SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_R_v_0 & SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_s_tv_0;
            end
            else
            begin
                SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_R_v_0 <= SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_v_s_0;
            end

        end
    end

    // SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2(STALLREG,4494)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_r_valid <= 1'b0;
            SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_r_data0 <= 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_r_valid <= SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_backStall & (SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_r_valid | SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_i_valid);

            if (SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_r_data0 <= $unsigned(redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_i_valid = SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_V0;
    // Stall signal propagation
    assign SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_backStall = SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_r_valid | ~ (SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_i_valid);

    // Valid
    assign SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_V = SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_r_valid == 1'b1 ? SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_r_valid : SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_i_valid;

    assign SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_D0 = SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_r_valid == 1'b1 ? SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_r_data0 : redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_q;

    // SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1(STALLENABLE,3924)
    // Valid signal propagation
    assign SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_V0 = SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_R_v_0;
    // Stall signal propagation
    assign SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_s_tv_0 = SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_backStall & SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_R_v_0;
    // Backward Enable generation
    assign SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_backEN = ~ (SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_v_s_0 = SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_backEN & SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_V0;
    // Backward Stall generation
    assign SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_backStall = ~ (SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_backEN == 1'b0)
            begin
                SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_R_v_0 <= SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_R_v_0 & SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_s_tv_0;
            end
            else
            begin
                SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_R_v_0 <= SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_v_s_0;
            end

        end
    end

    // SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0(STALLENABLE,3923)
    // Valid signal propagation
    assign SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_V0 = SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_R_v_0;
    // Stall signal propagation
    assign SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_s_tv_0 = SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_1_backStall & SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_R_v_0;
    // Backward Enable generation
    assign SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_backEN = ~ (SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_v_s_0 = SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_backEN & SE_i_arrayidx17_i104_add0_dupName_0_add_x_V0;
    // Backward Stall generation
    assign SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_backStall = ~ (SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_backEN == 1'b0)
            begin
                SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_R_v_0 <= SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_R_v_0 & SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_s_tv_0;
            end
            else
            begin
                SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_R_v_0 <= SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_v_s_0;
            end

        end
    end

    // SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0(STALLENABLE,3926)
    // Valid signal propagation
    assign SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_V0 = SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0 = SE_i_arrayidx17_i104_add0_dupName_0_add_x_backStall & SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_backEN = ~ (SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0 = SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_backEN & SE_out_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_b46724_add22_V0;
    // Backward Stall generation
    assign SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_backStall = ~ (SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_backEN == 1'b0)
            begin
                SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 <= SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 & SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_s_tv_0;
            end
            else
            begin
                SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_R_v_0 <= SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_v_s_0;
            end

        end
    end

    // SE_i_arrayidx17_i104_add0_dupName_0_add_x(STALLENABLE,3133)
    // Valid signal propagation
    assign SE_i_arrayidx17_i104_add0_dupName_0_add_x_V0 = SE_i_arrayidx17_i104_add0_dupName_0_add_x_wireValid;
    // Backward Stall generation
    assign SE_i_arrayidx17_i104_add0_dupName_0_add_x_backStall = SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_0_backStall | ~ (SE_i_arrayidx17_i104_add0_dupName_0_add_x_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_arrayidx17_i104_add0_dupName_0_add_x_and0 = SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_V0;
    assign SE_i_arrayidx17_i104_add0_dupName_0_add_x_wireValid = SE_redist183_i_arrayidx17_i104_add0_dupName_0_trunc_sel_x_b_1_0_V0 & SE_i_arrayidx17_i104_add0_dupName_0_add_x_and0;

    // SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0(STALLENABLE,3670)
    // Valid signal propagation
    assign SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_V0 = SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_R_v_0;
    assign SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_V1 = SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_R_v_1;
    // Stall signal propagation
    assign SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_s_tv_0 = SE_i_arrayidx17_i104_add0_dupName_0_add_x_backStall & SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_R_v_0;
    assign SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_s_tv_1 = SE_redist167_i_arrayidx5_i93_add0_trunc_sel_x_b_1_0_backStall & SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_R_v_1;
    // Backward Enable generation
    assign SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_or0 = SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_s_tv_0;
    assign SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_backEN = ~ (SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_s_tv_1 | SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_v_s_0 = SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_backEN & SE_i_sub4_i_31_i189_add219_V0;
    // Backward Stall generation
    assign SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_backStall = ~ (SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_R_v_0 <= 1'b0;
            SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_backEN == 1'b0)
            begin
                SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_R_v_0 <= SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_R_v_0 & SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_s_tv_0;
            end
            else
            begin
                SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_R_v_0 <= SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_v_s_0;
            end

            if (SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_backEN == 1'b0)
            begin
                SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_R_v_1 <= SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_R_v_1 & SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_s_tv_1;
            end
            else
            begin
                SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_R_v_1 <= SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_v_s_0;
            end

        end
    end

    // SE_i_unnamed_add218(STALLENABLE,3538)
    // Valid signal propagation
    assign SE_i_unnamed_add218_V0 = SE_i_unnamed_add218_R_v_0;
    // Stall signal propagation
    assign SE_i_unnamed_add218_s_tv_0 = SE_i_sub4_i_31_i189_add219_backStall & SE_i_unnamed_add218_R_v_0;
    // Backward Enable generation
    assign SE_i_unnamed_add218_backEN = ~ (SE_i_unnamed_add218_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_unnamed_add218_v_s_0 = SE_i_unnamed_add218_backEN & SR_SE_i_unnamed_add218_V;
    // Backward Stall generation
    assign SE_i_unnamed_add218_backStall = ~ (SE_i_unnamed_add218_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_unnamed_add218_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_unnamed_add218_backEN == 1'b0)
            begin
                SE_i_unnamed_add218_R_v_0 <= SE_i_unnamed_add218_R_v_0 & SE_i_unnamed_add218_s_tv_0;
            end
            else
            begin
                SE_i_unnamed_add218_R_v_0 <= SE_i_unnamed_add218_v_s_0;
            end

        end
    end

    // SE_i_sub4_i_31_i189_add219(STALLENABLE,3506)
    // Valid signal propagation
    assign SE_i_sub4_i_31_i189_add219_V0 = SE_i_sub4_i_31_i189_add219_wireValid;
    // Backward Stall generation
    assign SE_i_sub4_i_31_i189_add219_backStall = SE_lev1_a0sumAHighB_uid1896_i_arrayidx5_i93_add0_mult_x_im0_backStall | ~ (SE_i_sub4_i_31_i189_add219_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_sub4_i_31_i189_add219_and0 = SE_i_unnamed_add218_V0;
    assign SE_i_sub4_i_31_i189_add219_wireValid = SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_V0 & SE_i_sub4_i_31_i189_add219_and0;

    // SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0(STALLENABLE,3868)
    // Valid signal propagation
    assign SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_V0 = SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_R_v_0;
    // Stall signal propagation
    assign SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_s_tv_0 = SE_i_sub4_i_31_i189_add219_backStall & SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_R_v_0;
    // Backward Enable generation
    assign SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_backEN = ~ (SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_v_s_0 = SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_backEN & SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_V1;
    // Backward Stall generation
    assign SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_backStall = ~ (SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_backEN == 1'b0)
            begin
                SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_R_v_0 & SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_s_tv_0;
            end
            else
            begin
                SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_R_v_0 <= SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_v_s_0;
            end

        end
    end

    // SE_i_cmp3_i_31_i188_add217(STALLENABLE,3298)
    // Valid signal propagation
    assign SE_i_cmp3_i_31_i188_add217_V0 = SE_i_cmp3_i_31_i188_add217_wireValid;
    // Backward Stall generation
    assign SE_i_cmp3_i_31_i188_add217_backStall = SR_SE_i_unnamed_add218_backStall | ~ (SE_i_cmp3_i_31_i188_add217_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_cmp3_i_31_i188_add217_and0 = SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_V0;
    assign SE_i_cmp3_i_31_i188_add217_wireValid = SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_V0 & SE_i_cmp3_i_31_i188_add217_and0;

    // SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0(STALLENABLE,3867)
    // Valid signal propagation
    assign SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_V0 = SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_V1 = SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_R_v_1;
    // Stall signal propagation
    assign SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_cmp3_i_31_i188_add217_backStall & SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_R_v_0;
    assign SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_s_tv_1 = SE_redist130_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_2_0_backStall & SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_R_v_1;
    // Backward Enable generation
    assign SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_or0 = SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_s_tv_0;
    assign SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_s_tv_1 | SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_backEN & SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_V;
    // Backward Stall generation
    assign SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
            SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_v_s_0;
            end

            if (SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_R_v_1 & SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_s_tv_1;
            end
            else
            begin
                SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_R_v_1 <= SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0(STALLREG,4491)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_r_valid <= 1'b0;
            SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_r_valid <= SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_backStall & (SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_r_valid | SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_i_valid);

            if (SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_r_data0 <= i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q;
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_i_valid = SE_i_unnamed_add213_V0;
    // Stall signal propagation
    assign SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_backStall = SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_r_valid | ~ (SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_i_valid);

    // Valid
    assign SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_V = SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_r_valid : SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_i_valid;

    assign SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_D0 = SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_r_valid == 1'b1 ? SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_r_data0 : i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q;

    // SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0(STALLENABLE,3869)
    // Valid signal propagation
    assign SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_V0 = SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_s_tv_0 = SE_i_unnamed_add213_backStall & SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_backEN = ~ (SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_v_s_0 = SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_backEN & SE_i_sub4_i_29_i177_add209_V1;
    // Backward Stall generation
    assign SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_backStall = ~ (SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_backEN == 1'b0)
            begin
                SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_R_v_0 & SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_R_v_0 <= SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_v_s_0;
            end

        end
    end

    // SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0(STALLENABLE,3839)
    // Valid signal propagation
    assign SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_V0 = SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_R_v_0;
    assign SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_V1 = SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_R_v_1;
    // Stall signal propagation
    assign SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_s_tv_0 = SE_i_unnamed_add213_backStall & SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_R_v_0;
    assign SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_s_tv_1 = SE_redist109_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_47_0_backStall & SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_R_v_1;
    // Backward Enable generation
    assign SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_or0 = SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_s_tv_0;
    assign SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_backEN = ~ (SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_s_tv_1 | SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_v_s_0 = SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_backEN & SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_V1;
    // Backward Stall generation
    assign SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_backStall = ~ (SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_R_v_0 <= 1'b0;
            SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_backEN == 1'b0)
            begin
                SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_R_v_0 <= SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_R_v_0 & SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_s_tv_0;
            end
            else
            begin
                SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_R_v_0 <= SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_v_s_0;
            end

            if (SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_backEN == 1'b0)
            begin
                SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_R_v_1 <= SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_R_v_1 & SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_s_tv_1;
            end
            else
            begin
                SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_R_v_1 <= SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_v_s_0;
            end

        end
    end

    // SE_i_cmp3_i_30_i182_add212(STALLENABLE,3297)
    // Valid signal propagation
    assign SE_i_cmp3_i_30_i182_add212_V0 = SE_i_cmp3_i_30_i182_add212_R_v_0;
    // Stall signal propagation
    assign SE_i_cmp3_i_30_i182_add212_s_tv_0 = SE_i_unnamed_add213_backStall & SE_i_cmp3_i_30_i182_add212_R_v_0;
    // Backward Enable generation
    assign SE_i_cmp3_i_30_i182_add212_backEN = ~ (SE_i_cmp3_i_30_i182_add212_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_cmp3_i_30_i182_add212_and0 = SE_i_sub4_i_29_i177_add209_V0 & SE_i_cmp3_i_30_i182_add212_backEN;
    assign SE_i_cmp3_i_30_i182_add212_v_s_0 = SE_redist107_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_45_0_V0 & SE_i_cmp3_i_30_i182_add212_and0;
    // Backward Stall generation
    assign SE_i_cmp3_i_30_i182_add212_backStall = ~ (SE_i_cmp3_i_30_i182_add212_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_cmp3_i_30_i182_add212_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_cmp3_i_30_i182_add212_backEN == 1'b0)
            begin
                SE_i_cmp3_i_30_i182_add212_R_v_0 <= SE_i_cmp3_i_30_i182_add212_R_v_0 & SE_i_cmp3_i_30_i182_add212_s_tv_0;
            end
            else
            begin
                SE_i_cmp3_i_30_i182_add212_R_v_0 <= SE_i_cmp3_i_30_i182_add212_v_s_0;
            end

        end
    end

    // SE_i_unnamed_add213(STALLENABLE,3537)
    // Valid signal propagation
    assign SE_i_unnamed_add213_V0 = SE_i_unnamed_add213_wireValid;
    // Backward Stall generation
    assign SE_i_unnamed_add213_backStall = SR_SE_redist129_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_31_shuffle_i187_add0_NO_NAME_x_q_1_0_backStall | ~ (SE_i_unnamed_add213_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_unnamed_add213_and0 = SE_i_cmp3_i_30_i182_add212_V0;
    assign SE_i_unnamed_add213_and1 = SE_redist108_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_46_0_V0 & SE_i_unnamed_add213_and0;
    assign SE_i_unnamed_add213_and2 = SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_V0 & SE_i_unnamed_add213_and1;
    assign SE_i_unnamed_add213_wireValid = SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_V0 & SE_i_unnamed_add213_and2;

    // SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0(STALLENABLE,3777)
    // Valid signal propagation
    assign SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_V0 = SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_R_v_0;
    assign SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_V1 = SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_R_v_1;
    // Stall signal propagation
    assign SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_s_tv_0 = SE_i_unnamed_add213_backStall & SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_R_v_0;
    assign SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_s_tv_1 = SE_redist55_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_48_0_backStall & SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_R_v_1;
    // Backward Enable generation
    assign SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_or0 = SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_s_tv_0;
    assign SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_backEN = ~ (SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_s_tv_1 | SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_v_s_0 = SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_backEN & SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_V1;
    // Backward Stall generation
    assign SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_backStall = ~ (SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_R_v_0 <= 1'b0;
            SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_backEN == 1'b0)
            begin
                SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_R_v_0 <= SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_R_v_0 & SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_s_tv_0;
            end
            else
            begin
                SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_R_v_0 <= SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_v_s_0;
            end

            if (SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_backEN == 1'b0)
            begin
                SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_R_v_1 <= SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_R_v_1 & SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_s_tv_1;
            end
            else
            begin
                SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_R_v_1 <= SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_v_s_0;
            end

        end
    end

    // SE_i_sub4_i_29_i177_add209(STALLENABLE,3503)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_sub4_i_29_i177_add209_fromReg0 <= '0;
            SE_i_sub4_i_29_i177_add209_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_i_sub4_i_29_i177_add209_fromReg0 <= SE_i_sub4_i_29_i177_add209_toReg0;
            // Successor 1
            SE_i_sub4_i_29_i177_add209_fromReg1 <= SE_i_sub4_i_29_i177_add209_toReg1;
        end
    end
    // Input Stall processing
    assign SE_i_sub4_i_29_i177_add209_consumed0 = (~ (SE_i_cmp3_i_30_i182_add212_backStall) & SE_i_sub4_i_29_i177_add209_wireValid) | SE_i_sub4_i_29_i177_add209_fromReg0;
    assign SE_i_sub4_i_29_i177_add209_consumed1 = (~ (SE_redist131_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_30_shuffle_i181_add0_NO_NAME_x_q_1_0_backStall) & SE_i_sub4_i_29_i177_add209_wireValid) | SE_i_sub4_i_29_i177_add209_fromReg1;
    // Consuming
    assign SE_i_sub4_i_29_i177_add209_StallValid = SE_i_sub4_i_29_i177_add209_backStall & SE_i_sub4_i_29_i177_add209_wireValid;
    assign SE_i_sub4_i_29_i177_add209_toReg0 = SE_i_sub4_i_29_i177_add209_StallValid & SE_i_sub4_i_29_i177_add209_consumed0;
    assign SE_i_sub4_i_29_i177_add209_toReg1 = SE_i_sub4_i_29_i177_add209_StallValid & SE_i_sub4_i_29_i177_add209_consumed1;
    // Backward Stall generation
    assign SE_i_sub4_i_29_i177_add209_or0 = SE_i_sub4_i_29_i177_add209_consumed0;
    assign SE_i_sub4_i_29_i177_add209_wireStall = ~ (SE_i_sub4_i_29_i177_add209_consumed1 & SE_i_sub4_i_29_i177_add209_or0);
    assign SE_i_sub4_i_29_i177_add209_backStall = SE_i_sub4_i_29_i177_add209_wireStall;
    // Valid signal propagation
    assign SE_i_sub4_i_29_i177_add209_V0 = SE_i_sub4_i_29_i177_add209_wireValid & ~ (SE_i_sub4_i_29_i177_add209_fromReg0);
    assign SE_i_sub4_i_29_i177_add209_V1 = SE_i_sub4_i_29_i177_add209_wireValid & ~ (SE_i_sub4_i_29_i177_add209_fromReg1);
    // Computing multiple Valid(s)
    assign SE_i_sub4_i_29_i177_add209_and0 = SE_i_unnamed_add208_V0;
    assign SE_i_sub4_i_29_i177_add209_and1 = SE_redist134_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_2_0_V0 & SE_i_sub4_i_29_i177_add209_and0;
    assign SE_i_sub4_i_29_i177_add209_wireValid = SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_V0 & SE_i_sub4_i_29_i177_add209_and1;

    // SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1(STALLENABLE,3776)
    // Valid signal propagation
    assign SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_V0 = SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_R_v_0;
    assign SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_V1 = SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_R_v_1;
    // Stall signal propagation
    assign SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_s_tv_0 = SE_i_sub4_i_29_i177_add209_backStall & SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_R_v_0;
    assign SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_s_tv_1 = SE_redist54_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_46_0_backStall & SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_R_v_1;
    // Backward Enable generation
    assign SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_or0 = SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_s_tv_0;
    assign SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_backEN = ~ (SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_s_tv_1 | SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_v_s_0 = SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_backEN & SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_V;
    // Backward Stall generation
    assign SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_backStall = ~ (SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_R_v_0 <= 1'b0;
            SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_backEN == 1'b0)
            begin
                SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_R_v_0 <= SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_R_v_0 & SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_s_tv_0;
            end
            else
            begin
                SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_R_v_0 <= SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_v_s_0;
            end

            if (SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_backEN == 1'b0)
            begin
                SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_R_v_1 <= SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_R_v_1 & SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_s_tv_1;
            end
            else
            begin
                SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_R_v_1 <= SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_v_s_0;
            end

        end
    end

    // SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1(STALLREG,4444)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_r_valid <= 1'b0;
            SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_r_valid <= SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_backStall & (SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_r_valid | SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_i_valid);

            if (SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_r_data0 <= $unsigned(redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_i_valid = SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_V0;
    // Stall signal propagation
    assign SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_backStall = SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_r_valid | ~ (SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_i_valid);

    // Valid
    assign SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_V = SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_r_valid == 1'b1 ? SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_r_valid : SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_i_valid;

    assign SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_D0 = SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_r_valid == 1'b1 ? SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_r_data0 : redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_q;

    // SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0(STALLENABLE,3775)
    // Valid signal propagation
    assign SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_V0 = SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_R_v_0;
    // Stall signal propagation
    assign SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_s_tv_0 = SR_SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_1_backStall & SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_R_v_0;
    // Backward Enable generation
    assign SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_backEN = ~ (SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_v_s_0 = SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_backEN & SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_V1;
    // Backward Stall generation
    assign SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_backStall = ~ (SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_backEN == 1'b0)
            begin
                SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_R_v_0 <= SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_R_v_0 & SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_s_tv_0;
            end
            else
            begin
                SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_R_v_0 <= SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_v_s_0;
            end

        end
    end

    // SE_i_unnamed_add203(STALLENABLE,3535)
    // Valid signal propagation
    assign SE_i_unnamed_add203_V0 = SE_i_unnamed_add203_wireValid;
    // Backward Stall generation
    assign SE_i_unnamed_add203_backStall = SR_SE_redist133_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_29_shuffle_i175_add0_NO_NAME_x_q_1_0_backStall | ~ (SE_i_unnamed_add203_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_unnamed_add203_and0 = SE_i_cmp3_i_28_i170_add202_V0;
    assign SE_i_unnamed_add203_and1 = SE_redist105_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_43_0_V0 & SE_i_unnamed_add203_and0;
    assign SE_i_unnamed_add203_and2 = SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_V0 & SE_i_unnamed_add203_and1;
    assign SE_i_unnamed_add203_wireValid = SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_V0 & SE_i_unnamed_add203_and2;

    // SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0(STALLENABLE,3774)
    // Valid signal propagation
    assign SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_V0 = SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_R_v_0;
    assign SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_V1 = SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_R_v_1;
    // Stall signal propagation
    assign SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_s_tv_0 = SE_i_unnamed_add203_backStall & SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_R_v_0;
    assign SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_s_tv_1 = SE_redist53_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_45_0_backStall & SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_R_v_1;
    // Backward Enable generation
    assign SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_or0 = SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_s_tv_0;
    assign SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_backEN = ~ (SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_s_tv_1 | SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_v_s_0 = SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_backEN & SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_V1;
    // Backward Stall generation
    assign SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_backStall = ~ (SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_R_v_0 <= 1'b0;
            SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_backEN == 1'b0)
            begin
                SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_R_v_0 <= SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_R_v_0 & SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_s_tv_0;
            end
            else
            begin
                SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_R_v_0 <= SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_v_s_0;
            end

            if (SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_backEN == 1'b0)
            begin
                SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_R_v_1 <= SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_R_v_1 & SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_s_tv_1;
            end
            else
            begin
                SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_R_v_1 <= SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_v_s_0;
            end

        end
    end

    // SE_i_sub4_i_27_i165_add199(STALLENABLE,3501)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_sub4_i_27_i165_add199_fromReg0 <= '0;
            SE_i_sub4_i_27_i165_add199_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_i_sub4_i_27_i165_add199_fromReg0 <= SE_i_sub4_i_27_i165_add199_toReg0;
            // Successor 1
            SE_i_sub4_i_27_i165_add199_fromReg1 <= SE_i_sub4_i_27_i165_add199_toReg1;
        end
    end
    // Input Stall processing
    assign SE_i_sub4_i_27_i165_add199_consumed0 = (~ (SE_i_cmp3_i_28_i170_add202_backStall) & SE_i_sub4_i_27_i165_add199_wireValid) | SE_i_sub4_i_27_i165_add199_fromReg0;
    assign SE_i_sub4_i_27_i165_add199_consumed1 = (~ (SE_redist135_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_28_shuffle_i169_add0_NO_NAME_x_q_1_0_backStall) & SE_i_sub4_i_27_i165_add199_wireValid) | SE_i_sub4_i_27_i165_add199_fromReg1;
    // Consuming
    assign SE_i_sub4_i_27_i165_add199_StallValid = SE_i_sub4_i_27_i165_add199_backStall & SE_i_sub4_i_27_i165_add199_wireValid;
    assign SE_i_sub4_i_27_i165_add199_toReg0 = SE_i_sub4_i_27_i165_add199_StallValid & SE_i_sub4_i_27_i165_add199_consumed0;
    assign SE_i_sub4_i_27_i165_add199_toReg1 = SE_i_sub4_i_27_i165_add199_StallValid & SE_i_sub4_i_27_i165_add199_consumed1;
    // Backward Stall generation
    assign SE_i_sub4_i_27_i165_add199_or0 = SE_i_sub4_i_27_i165_add199_consumed0;
    assign SE_i_sub4_i_27_i165_add199_wireStall = ~ (SE_i_sub4_i_27_i165_add199_consumed1 & SE_i_sub4_i_27_i165_add199_or0);
    assign SE_i_sub4_i_27_i165_add199_backStall = SE_i_sub4_i_27_i165_add199_wireStall;
    // Valid signal propagation
    assign SE_i_sub4_i_27_i165_add199_V0 = SE_i_sub4_i_27_i165_add199_wireValid & ~ (SE_i_sub4_i_27_i165_add199_fromReg0);
    assign SE_i_sub4_i_27_i165_add199_V1 = SE_i_sub4_i_27_i165_add199_wireValid & ~ (SE_i_sub4_i_27_i165_add199_fromReg1);
    // Computing multiple Valid(s)
    assign SE_i_sub4_i_27_i165_add199_and0 = SE_i_unnamed_add198_V0;
    assign SE_i_sub4_i_27_i165_add199_and1 = SE_redist137_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_2_0_V0 & SE_i_sub4_i_27_i165_add199_and0;
    assign SE_i_sub4_i_27_i165_add199_wireValid = SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_V0 & SE_i_sub4_i_27_i165_add199_and1;

    // SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1(STALLENABLE,3773)
    // Valid signal propagation
    assign SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_V0 = SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_R_v_0;
    assign SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_V1 = SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_R_v_1;
    // Stall signal propagation
    assign SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_s_tv_0 = SE_i_sub4_i_27_i165_add199_backStall & SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_R_v_0;
    assign SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_s_tv_1 = SE_redist52_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_43_0_backStall & SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_R_v_1;
    // Backward Enable generation
    assign SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_or0 = SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_s_tv_0;
    assign SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_backEN = ~ (SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_s_tv_1 | SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_v_s_0 = SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_backEN & SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_V0;
    // Backward Stall generation
    assign SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_backStall = ~ (SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_R_v_0 <= 1'b0;
            SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_backEN == 1'b0)
            begin
                SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_R_v_0 <= SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_R_v_0 & SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_s_tv_0;
            end
            else
            begin
                SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_R_v_0 <= SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_v_s_0;
            end

            if (SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_backEN == 1'b0)
            begin
                SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_R_v_1 <= SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_R_v_1 & SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_s_tv_1;
            end
            else
            begin
                SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_R_v_1 <= SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_v_s_0;
            end

        end
    end

    // SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0(STALLENABLE,3772)
    // Valid signal propagation
    assign SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_V0 = SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_R_v_0;
    // Stall signal propagation
    assign SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_s_tv_0 = SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_1_backStall & SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_R_v_0;
    // Backward Enable generation
    assign SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_backEN = ~ (SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_v_s_0 = SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_backEN & SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_V1;
    // Backward Stall generation
    assign SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_backStall = ~ (SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_backEN == 1'b0)
            begin
                SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_R_v_0 <= SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_R_v_0 & SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_s_tv_0;
            end
            else
            begin
                SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_R_v_0 <= SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_v_s_0;
            end

        end
    end

    // SE_i_unnamed_add193(STALLENABLE,3533)
    // Valid signal propagation
    assign SE_i_unnamed_add193_V0 = SE_i_unnamed_add193_wireValid;
    // Backward Stall generation
    assign SE_i_unnamed_add193_backStall = SE_redist136_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_27_shuffle_i163_add0_NO_NAME_x_q_1_0_backStall | ~ (SE_i_unnamed_add193_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_unnamed_add193_and0 = SE_i_cmp3_i_26_i158_add192_V0;
    assign SE_i_unnamed_add193_and1 = SE_redist102_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_40_0_V0 & SE_i_unnamed_add193_and0;
    assign SE_i_unnamed_add193_and2 = SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_V0 & SE_i_unnamed_add193_and1;
    assign SE_i_unnamed_add193_wireValid = SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_V0 & SE_i_unnamed_add193_and2;

    // SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0(STALLENABLE,3771)
    // Valid signal propagation
    assign SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_V0 = SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_R_v_0;
    assign SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_V1 = SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_R_v_1;
    // Stall signal propagation
    assign SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_s_tv_0 = SE_i_unnamed_add193_backStall & SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_R_v_0;
    assign SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_s_tv_1 = SE_redist51_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_42_0_backStall & SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_R_v_1;
    // Backward Enable generation
    assign SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_or0 = SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_s_tv_0;
    assign SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_backEN = ~ (SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_s_tv_1 | SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_v_s_0 = SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_backEN & SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_V;
    // Backward Stall generation
    assign SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_backStall = ~ (SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_R_v_0 <= 1'b0;
            SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_backEN == 1'b0)
            begin
                SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_R_v_0 <= SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_R_v_0 & SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_s_tv_0;
            end
            else
            begin
                SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_R_v_0 <= SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_v_s_0;
            end

            if (SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_backEN == 1'b0)
            begin
                SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_R_v_1 <= SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_R_v_1 & SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_s_tv_1;
            end
            else
            begin
                SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_R_v_1 <= SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_v_s_0;
            end

        end
    end

    // SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0(STALLREG,4443)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_r_valid <= 1'b0;
            SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_r_valid <= SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_backStall & (SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_r_valid | SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_i_valid);

            if (SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_r_data0 <= $unsigned(redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_i_valid = SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_V1;
    // Stall signal propagation
    assign SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_backStall = SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_r_valid | ~ (SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_i_valid);

    // Valid
    assign SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_V = SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_r_valid == 1'b1 ? SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_r_valid : SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_i_valid;

    assign SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_D0 = SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_r_valid == 1'b1 ? SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_r_data0 : redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_q;

    // SE_i_sub4_i_25_i153_add189(STALLENABLE,3499)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_sub4_i_25_i153_add189_fromReg0 <= '0;
            SE_i_sub4_i_25_i153_add189_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_i_sub4_i_25_i153_add189_fromReg0 <= SE_i_sub4_i_25_i153_add189_toReg0;
            // Successor 1
            SE_i_sub4_i_25_i153_add189_fromReg1 <= SE_i_sub4_i_25_i153_add189_toReg1;
        end
    end
    // Input Stall processing
    assign SE_i_sub4_i_25_i153_add189_consumed0 = (~ (SR_SE_i_cmp3_i_26_i158_add192_backStall) & SE_i_sub4_i_25_i153_add189_wireValid) | SE_i_sub4_i_25_i153_add189_fromReg0;
    assign SE_i_sub4_i_25_i153_add189_consumed1 = (~ (SR_SE_redist138_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_26_shuffle_i157_add0_NO_NAME_x_q_1_0_backStall) & SE_i_sub4_i_25_i153_add189_wireValid) | SE_i_sub4_i_25_i153_add189_fromReg1;
    // Consuming
    assign SE_i_sub4_i_25_i153_add189_StallValid = SE_i_sub4_i_25_i153_add189_backStall & SE_i_sub4_i_25_i153_add189_wireValid;
    assign SE_i_sub4_i_25_i153_add189_toReg0 = SE_i_sub4_i_25_i153_add189_StallValid & SE_i_sub4_i_25_i153_add189_consumed0;
    assign SE_i_sub4_i_25_i153_add189_toReg1 = SE_i_sub4_i_25_i153_add189_StallValid & SE_i_sub4_i_25_i153_add189_consumed1;
    // Backward Stall generation
    assign SE_i_sub4_i_25_i153_add189_or0 = SE_i_sub4_i_25_i153_add189_consumed0;
    assign SE_i_sub4_i_25_i153_add189_wireStall = ~ (SE_i_sub4_i_25_i153_add189_consumed1 & SE_i_sub4_i_25_i153_add189_or0);
    assign SE_i_sub4_i_25_i153_add189_backStall = SE_i_sub4_i_25_i153_add189_wireStall;
    // Valid signal propagation
    assign SE_i_sub4_i_25_i153_add189_V0 = SE_i_sub4_i_25_i153_add189_wireValid & ~ (SE_i_sub4_i_25_i153_add189_fromReg0);
    assign SE_i_sub4_i_25_i153_add189_V1 = SE_i_sub4_i_25_i153_add189_wireValid & ~ (SE_i_sub4_i_25_i153_add189_fromReg1);
    // Computing multiple Valid(s)
    assign SE_i_sub4_i_25_i153_add189_and0 = SE_i_unnamed_add188_V0;
    assign SE_i_sub4_i_25_i153_add189_and1 = SE_redist140_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_2_0_V0 & SE_i_sub4_i_25_i153_add189_and0;
    assign SE_i_sub4_i_25_i153_add189_wireValid = SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_V0 & SE_i_sub4_i_25_i153_add189_and1;

    // SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1(STALLENABLE,3770)
    // Valid signal propagation
    assign SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_V0 = SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_R_v_0;
    assign SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_V1 = SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_R_v_1;
    // Stall signal propagation
    assign SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_s_tv_0 = SE_i_sub4_i_25_i153_add189_backStall & SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_R_v_0;
    assign SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_s_tv_1 = SR_SE_redist50_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_40_0_backStall & SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_R_v_1;
    // Backward Enable generation
    assign SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_or0 = SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_s_tv_0;
    assign SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_backEN = ~ (SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_s_tv_1 | SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_v_s_0 = SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_backEN & SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_V0;
    // Backward Stall generation
    assign SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_backStall = ~ (SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_R_v_0 <= 1'b0;
            SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_backEN == 1'b0)
            begin
                SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_R_v_0 <= SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_R_v_0 & SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_s_tv_0;
            end
            else
            begin
                SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_R_v_0 <= SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_v_s_0;
            end

            if (SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_backEN == 1'b0)
            begin
                SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_R_v_1 <= SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_R_v_1 & SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_s_tv_1;
            end
            else
            begin
                SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_R_v_1 <= SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_v_s_0;
            end

        end
    end

    // SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0(STALLENABLE,3769)
    // Valid signal propagation
    assign SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_V0 = SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_R_v_0;
    // Stall signal propagation
    assign SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_s_tv_0 = SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_1_backStall & SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_R_v_0;
    // Backward Enable generation
    assign SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_backEN = ~ (SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_v_s_0 = SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_backEN & SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_V1;
    // Backward Stall generation
    assign SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_backStall = ~ (SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_backEN == 1'b0)
            begin
                SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_R_v_0 <= SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_R_v_0 & SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_s_tv_0;
            end
            else
            begin
                SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_R_v_0 <= SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_v_s_0;
            end

        end
    end

    // SE_i_unnamed_add183(STALLENABLE,3531)
    // Valid signal propagation
    assign SE_i_unnamed_add183_V0 = SE_i_unnamed_add183_wireValid;
    // Backward Stall generation
    assign SE_i_unnamed_add183_backStall = SR_SE_redist139_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_25_shuffle_i151_add0_NO_NAME_x_q_1_0_backStall | ~ (SE_i_unnamed_add183_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_unnamed_add183_and0 = SE_i_cmp3_i_24_i146_add182_V0;
    assign SE_i_unnamed_add183_and1 = SE_redist99_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_37_0_V0 & SE_i_unnamed_add183_and0;
    assign SE_i_unnamed_add183_and2 = SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_V0 & SE_i_unnamed_add183_and1;
    assign SE_i_unnamed_add183_wireValid = SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_V0 & SE_i_unnamed_add183_and2;

    // SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0(STALLENABLE,3768)
    // Valid signal propagation
    assign SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_V0 = SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_R_v_0;
    assign SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_V1 = SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_R_v_1;
    // Stall signal propagation
    assign SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_s_tv_0 = SE_i_unnamed_add183_backStall & SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_R_v_0;
    assign SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_s_tv_1 = SE_redist49_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_39_0_backStall & SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_R_v_1;
    // Backward Enable generation
    assign SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_or0 = SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_s_tv_0;
    assign SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_backEN = ~ (SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_s_tv_1 | SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_v_s_0 = SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_backEN & SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_V1;
    // Backward Stall generation
    assign SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_backStall = ~ (SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_R_v_0 <= 1'b0;
            SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_backEN == 1'b0)
            begin
                SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_R_v_0 <= SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_R_v_0 & SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_s_tv_0;
            end
            else
            begin
                SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_R_v_0 <= SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_v_s_0;
            end

            if (SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_backEN == 1'b0)
            begin
                SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_R_v_1 <= SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_R_v_1 & SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_s_tv_1;
            end
            else
            begin
                SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_R_v_1 <= SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_v_s_0;
            end

        end
    end

    // SE_i_sub4_i_23_i141_add179(STALLENABLE,3497)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_sub4_i_23_i141_add179_fromReg0 <= '0;
            SE_i_sub4_i_23_i141_add179_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_i_sub4_i_23_i141_add179_fromReg0 <= SE_i_sub4_i_23_i141_add179_toReg0;
            // Successor 1
            SE_i_sub4_i_23_i141_add179_fromReg1 <= SE_i_sub4_i_23_i141_add179_toReg1;
        end
    end
    // Input Stall processing
    assign SE_i_sub4_i_23_i141_add179_consumed0 = (~ (SE_i_cmp3_i_24_i146_add182_backStall) & SE_i_sub4_i_23_i141_add179_wireValid) | SE_i_sub4_i_23_i141_add179_fromReg0;
    assign SE_i_sub4_i_23_i141_add179_consumed1 = (~ (SE_redist141_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_24_shuffle_i145_add0_NO_NAME_x_q_1_0_backStall) & SE_i_sub4_i_23_i141_add179_wireValid) | SE_i_sub4_i_23_i141_add179_fromReg1;
    // Consuming
    assign SE_i_sub4_i_23_i141_add179_StallValid = SE_i_sub4_i_23_i141_add179_backStall & SE_i_sub4_i_23_i141_add179_wireValid;
    assign SE_i_sub4_i_23_i141_add179_toReg0 = SE_i_sub4_i_23_i141_add179_StallValid & SE_i_sub4_i_23_i141_add179_consumed0;
    assign SE_i_sub4_i_23_i141_add179_toReg1 = SE_i_sub4_i_23_i141_add179_StallValid & SE_i_sub4_i_23_i141_add179_consumed1;
    // Backward Stall generation
    assign SE_i_sub4_i_23_i141_add179_or0 = SE_i_sub4_i_23_i141_add179_consumed0;
    assign SE_i_sub4_i_23_i141_add179_wireStall = ~ (SE_i_sub4_i_23_i141_add179_consumed1 & SE_i_sub4_i_23_i141_add179_or0);
    assign SE_i_sub4_i_23_i141_add179_backStall = SE_i_sub4_i_23_i141_add179_wireStall;
    // Valid signal propagation
    assign SE_i_sub4_i_23_i141_add179_V0 = SE_i_sub4_i_23_i141_add179_wireValid & ~ (SE_i_sub4_i_23_i141_add179_fromReg0);
    assign SE_i_sub4_i_23_i141_add179_V1 = SE_i_sub4_i_23_i141_add179_wireValid & ~ (SE_i_sub4_i_23_i141_add179_fromReg1);
    // Computing multiple Valid(s)
    assign SE_i_sub4_i_23_i141_add179_and0 = SE_i_unnamed_add178_V0;
    assign SE_i_sub4_i_23_i141_add179_and1 = SE_redist143_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_2_0_V0 & SE_i_sub4_i_23_i141_add179_and0;
    assign SE_i_sub4_i_23_i141_add179_wireValid = SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_V0 & SE_i_sub4_i_23_i141_add179_and1;

    // SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1(STALLENABLE,3767)
    // Valid signal propagation
    assign SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_V0 = SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_R_v_0;
    assign SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_V1 = SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_R_v_1;
    // Stall signal propagation
    assign SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_s_tv_0 = SE_i_sub4_i_23_i141_add179_backStall & SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_R_v_0;
    assign SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_s_tv_1 = SE_redist48_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_37_0_backStall & SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_R_v_1;
    // Backward Enable generation
    assign SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_or0 = SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_s_tv_0;
    assign SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_backEN = ~ (SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_s_tv_1 | SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_v_s_0 = SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_backEN & SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_V0;
    // Backward Stall generation
    assign SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_backStall = ~ (SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_R_v_0 <= 1'b0;
            SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_backEN == 1'b0)
            begin
                SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_R_v_0 <= SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_R_v_0 & SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_s_tv_0;
            end
            else
            begin
                SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_R_v_0 <= SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_v_s_0;
            end

            if (SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_backEN == 1'b0)
            begin
                SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_R_v_1 <= SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_R_v_1 & SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_s_tv_1;
            end
            else
            begin
                SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_R_v_1 <= SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_v_s_0;
            end

        end
    end

    // SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0(STALLENABLE,3766)
    // Valid signal propagation
    assign SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_V0 = SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_R_v_0;
    // Stall signal propagation
    assign SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_s_tv_0 = SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_1_backStall & SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_R_v_0;
    // Backward Enable generation
    assign SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_backEN = ~ (SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_v_s_0 = SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_backEN & SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_V;
    // Backward Stall generation
    assign SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_backStall = ~ (SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_backEN == 1'b0)
            begin
                SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_R_v_0 <= SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_R_v_0 & SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_s_tv_0;
            end
            else
            begin
                SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_R_v_0 <= SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_v_s_0;
            end

        end
    end

    // SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0(STALLREG,4442)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_r_valid <= 1'b0;
            SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_r_valid <= SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_backStall & (SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_r_valid | SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_i_valid);

            if (SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_r_data0 <= $unsigned(redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_i_valid = SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_V1;
    // Stall signal propagation
    assign SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_backStall = SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_r_valid | ~ (SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_i_valid);

    // Valid
    assign SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_V = SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_r_valid == 1'b1 ? SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_r_valid : SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_i_valid;

    assign SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_D0 = SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_r_valid == 1'b1 ? SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_r_data0 : redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_q;

    // SE_i_unnamed_add173(STALLENABLE,3529)
    // Valid signal propagation
    assign SE_i_unnamed_add173_V0 = SE_i_unnamed_add173_wireValid;
    // Backward Stall generation
    assign SE_i_unnamed_add173_backStall = SR_SE_redist142_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_23_shuffle_i139_add0_NO_NAME_x_q_1_0_backStall | ~ (SE_i_unnamed_add173_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_unnamed_add173_and0 = SE_i_cmp3_i_22_i134_add172_V0;
    assign SE_i_unnamed_add173_and1 = SE_redist96_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_34_0_V0 & SE_i_unnamed_add173_and0;
    assign SE_i_unnamed_add173_and2 = SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_V0 & SE_i_unnamed_add173_and1;
    assign SE_i_unnamed_add173_wireValid = SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_V0 & SE_i_unnamed_add173_and2;

    // SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0(STALLENABLE,3765)
    // Valid signal propagation
    assign SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_V0 = SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_R_v_0;
    assign SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_V1 = SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_R_v_1;
    // Stall signal propagation
    assign SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_s_tv_0 = SE_i_unnamed_add173_backStall & SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_R_v_0;
    assign SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_s_tv_1 = SR_SE_redist47_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_36_0_backStall & SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_R_v_1;
    // Backward Enable generation
    assign SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_or0 = SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_s_tv_0;
    assign SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_backEN = ~ (SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_s_tv_1 | SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_v_s_0 = SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_backEN & SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_V1;
    // Backward Stall generation
    assign SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_backStall = ~ (SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_R_v_0 <= 1'b0;
            SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_backEN == 1'b0)
            begin
                SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_R_v_0 <= SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_R_v_0 & SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_s_tv_0;
            end
            else
            begin
                SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_R_v_0 <= SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_v_s_0;
            end

            if (SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_backEN == 1'b0)
            begin
                SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_R_v_1 <= SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_R_v_1 & SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_s_tv_1;
            end
            else
            begin
                SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_R_v_1 <= SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_v_s_0;
            end

        end
    end

    // SE_i_sub4_i_21_i129_add169(STALLENABLE,3495)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_sub4_i_21_i129_add169_fromReg0 <= '0;
            SE_i_sub4_i_21_i129_add169_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_i_sub4_i_21_i129_add169_fromReg0 <= SE_i_sub4_i_21_i129_add169_toReg0;
            // Successor 1
            SE_i_sub4_i_21_i129_add169_fromReg1 <= SE_i_sub4_i_21_i129_add169_toReg1;
        end
    end
    // Input Stall processing
    assign SE_i_sub4_i_21_i129_add169_consumed0 = (~ (SR_SE_i_cmp3_i_22_i134_add172_backStall) & SE_i_sub4_i_21_i129_add169_wireValid) | SE_i_sub4_i_21_i129_add169_fromReg0;
    assign SE_i_sub4_i_21_i129_add169_consumed1 = (~ (SR_SE_redist144_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_22_shuffle_i133_add0_NO_NAME_x_q_1_0_backStall) & SE_i_sub4_i_21_i129_add169_wireValid) | SE_i_sub4_i_21_i129_add169_fromReg1;
    // Consuming
    assign SE_i_sub4_i_21_i129_add169_StallValid = SE_i_sub4_i_21_i129_add169_backStall & SE_i_sub4_i_21_i129_add169_wireValid;
    assign SE_i_sub4_i_21_i129_add169_toReg0 = SE_i_sub4_i_21_i129_add169_StallValid & SE_i_sub4_i_21_i129_add169_consumed0;
    assign SE_i_sub4_i_21_i129_add169_toReg1 = SE_i_sub4_i_21_i129_add169_StallValid & SE_i_sub4_i_21_i129_add169_consumed1;
    // Backward Stall generation
    assign SE_i_sub4_i_21_i129_add169_or0 = SE_i_sub4_i_21_i129_add169_consumed0;
    assign SE_i_sub4_i_21_i129_add169_wireStall = ~ (SE_i_sub4_i_21_i129_add169_consumed1 & SE_i_sub4_i_21_i129_add169_or0);
    assign SE_i_sub4_i_21_i129_add169_backStall = SE_i_sub4_i_21_i129_add169_wireStall;
    // Valid signal propagation
    assign SE_i_sub4_i_21_i129_add169_V0 = SE_i_sub4_i_21_i129_add169_wireValid & ~ (SE_i_sub4_i_21_i129_add169_fromReg0);
    assign SE_i_sub4_i_21_i129_add169_V1 = SE_i_sub4_i_21_i129_add169_wireValid & ~ (SE_i_sub4_i_21_i129_add169_fromReg1);
    // Computing multiple Valid(s)
    assign SE_i_sub4_i_21_i129_add169_and0 = SE_i_unnamed_add168_V0;
    assign SE_i_sub4_i_21_i129_add169_and1 = SE_redist146_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_2_0_V0 & SE_i_sub4_i_21_i129_add169_and0;
    assign SE_i_sub4_i_21_i129_add169_wireValid = SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_V0 & SE_i_sub4_i_21_i129_add169_and1;

    // SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1(STALLENABLE,3764)
    // Valid signal propagation
    assign SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_V0 = SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_R_v_0;
    assign SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_V1 = SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_R_v_1;
    // Stall signal propagation
    assign SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_s_tv_0 = SE_i_sub4_i_21_i129_add169_backStall & SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_R_v_0;
    assign SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_s_tv_1 = SE_redist46_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_34_0_backStall & SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_R_v_1;
    // Backward Enable generation
    assign SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_or0 = SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_s_tv_0;
    assign SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_backEN = ~ (SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_s_tv_1 | SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_v_s_0 = SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_backEN & SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_V0;
    // Backward Stall generation
    assign SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_backStall = ~ (SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_R_v_0 <= 1'b0;
            SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_backEN == 1'b0)
            begin
                SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_R_v_0 <= SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_R_v_0 & SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_s_tv_0;
            end
            else
            begin
                SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_R_v_0 <= SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_v_s_0;
            end

            if (SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_backEN == 1'b0)
            begin
                SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_R_v_1 <= SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_R_v_1 & SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_s_tv_1;
            end
            else
            begin
                SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_R_v_1 <= SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_v_s_0;
            end

        end
    end

    // SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0(STALLENABLE,3763)
    // Valid signal propagation
    assign SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_V0 = SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_R_v_0;
    // Stall signal propagation
    assign SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_s_tv_0 = SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_1_backStall & SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_R_v_0;
    // Backward Enable generation
    assign SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_backEN = ~ (SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_v_s_0 = SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_backEN & SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_V1;
    // Backward Stall generation
    assign SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_backStall = ~ (SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_backEN == 1'b0)
            begin
                SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_R_v_0 <= SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_R_v_0 & SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_s_tv_0;
            end
            else
            begin
                SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_R_v_0 <= SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_v_s_0;
            end

        end
    end

    // SE_i_unnamed_add163(STALLENABLE,3527)
    // Valid signal propagation
    assign SE_i_unnamed_add163_V0 = SE_i_unnamed_add163_wireValid;
    // Backward Stall generation
    assign SE_i_unnamed_add163_backStall = SR_SE_redist145_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_21_shuffle_i127_add0_NO_NAME_x_q_1_0_backStall | ~ (SE_i_unnamed_add163_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_unnamed_add163_and0 = SE_i_cmp3_i_20_i122_add162_V0;
    assign SE_i_unnamed_add163_and1 = SE_redist93_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_31_0_V0 & SE_i_unnamed_add163_and0;
    assign SE_i_unnamed_add163_and2 = SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_V0 & SE_i_unnamed_add163_and1;
    assign SE_i_unnamed_add163_wireValid = SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_V0 & SE_i_unnamed_add163_and2;

    // SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0(STALLENABLE,3762)
    // Valid signal propagation
    assign SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_V0 = SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_R_v_0;
    assign SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_V1 = SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_R_v_1;
    // Stall signal propagation
    assign SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_s_tv_0 = SE_i_unnamed_add163_backStall & SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_R_v_0;
    assign SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_s_tv_1 = SE_redist45_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_33_0_backStall & SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_R_v_1;
    // Backward Enable generation
    assign SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_or0 = SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_s_tv_0;
    assign SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_backEN = ~ (SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_s_tv_1 | SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_v_s_0 = SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_backEN & SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_V1;
    // Backward Stall generation
    assign SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_backStall = ~ (SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_R_v_0 <= 1'b0;
            SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_backEN == 1'b0)
            begin
                SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_R_v_0 <= SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_R_v_0 & SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_s_tv_0;
            end
            else
            begin
                SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_R_v_0 <= SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_v_s_0;
            end

            if (SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_backEN == 1'b0)
            begin
                SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_R_v_1 <= SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_R_v_1 & SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_s_tv_1;
            end
            else
            begin
                SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_R_v_1 <= SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_v_s_0;
            end

        end
    end

    // SE_i_sub4_i_19_i117_add159(STALLENABLE,3492)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_sub4_i_19_i117_add159_fromReg0 <= '0;
            SE_i_sub4_i_19_i117_add159_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_i_sub4_i_19_i117_add159_fromReg0 <= SE_i_sub4_i_19_i117_add159_toReg0;
            // Successor 1
            SE_i_sub4_i_19_i117_add159_fromReg1 <= SE_i_sub4_i_19_i117_add159_toReg1;
        end
    end
    // Input Stall processing
    assign SE_i_sub4_i_19_i117_add159_consumed0 = (~ (SE_i_cmp3_i_20_i122_add162_backStall) & SE_i_sub4_i_19_i117_add159_wireValid) | SE_i_sub4_i_19_i117_add159_fromReg0;
    assign SE_i_sub4_i_19_i117_add159_consumed1 = (~ (SE_redist147_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_20_shuffle_i121_add0_NO_NAME_x_q_1_0_backStall) & SE_i_sub4_i_19_i117_add159_wireValid) | SE_i_sub4_i_19_i117_add159_fromReg1;
    // Consuming
    assign SE_i_sub4_i_19_i117_add159_StallValid = SE_i_sub4_i_19_i117_add159_backStall & SE_i_sub4_i_19_i117_add159_wireValid;
    assign SE_i_sub4_i_19_i117_add159_toReg0 = SE_i_sub4_i_19_i117_add159_StallValid & SE_i_sub4_i_19_i117_add159_consumed0;
    assign SE_i_sub4_i_19_i117_add159_toReg1 = SE_i_sub4_i_19_i117_add159_StallValid & SE_i_sub4_i_19_i117_add159_consumed1;
    // Backward Stall generation
    assign SE_i_sub4_i_19_i117_add159_or0 = SE_i_sub4_i_19_i117_add159_consumed0;
    assign SE_i_sub4_i_19_i117_add159_wireStall = ~ (SE_i_sub4_i_19_i117_add159_consumed1 & SE_i_sub4_i_19_i117_add159_or0);
    assign SE_i_sub4_i_19_i117_add159_backStall = SE_i_sub4_i_19_i117_add159_wireStall;
    // Valid signal propagation
    assign SE_i_sub4_i_19_i117_add159_V0 = SE_i_sub4_i_19_i117_add159_wireValid & ~ (SE_i_sub4_i_19_i117_add159_fromReg0);
    assign SE_i_sub4_i_19_i117_add159_V1 = SE_i_sub4_i_19_i117_add159_wireValid & ~ (SE_i_sub4_i_19_i117_add159_fromReg1);
    // Computing multiple Valid(s)
    assign SE_i_sub4_i_19_i117_add159_and0 = SE_i_unnamed_add158_V0;
    assign SE_i_sub4_i_19_i117_add159_and1 = SE_redist150_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_2_0_V0 & SE_i_sub4_i_19_i117_add159_and0;
    assign SE_i_sub4_i_19_i117_add159_wireValid = SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_V0 & SE_i_sub4_i_19_i117_add159_and1;

    // SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1(STALLENABLE,3761)
    // Valid signal propagation
    assign SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_V0 = SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_R_v_0;
    assign SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_V1 = SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_R_v_1;
    // Stall signal propagation
    assign SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_s_tv_0 = SE_i_sub4_i_19_i117_add159_backStall & SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_R_v_0;
    assign SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_s_tv_1 = SE_redist44_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_31_0_backStall & SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_R_v_1;
    // Backward Enable generation
    assign SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_or0 = SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_s_tv_0;
    assign SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_backEN = ~ (SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_s_tv_1 | SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_v_s_0 = SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_backEN & SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_V;
    // Backward Stall generation
    assign SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_backStall = ~ (SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_R_v_0 <= 1'b0;
            SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_backEN == 1'b0)
            begin
                SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_R_v_0 <= SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_R_v_0 & SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_s_tv_0;
            end
            else
            begin
                SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_R_v_0 <= SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_v_s_0;
            end

            if (SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_backEN == 1'b0)
            begin
                SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_R_v_1 <= SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_R_v_1 & SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_s_tv_1;
            end
            else
            begin
                SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_R_v_1 <= SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_v_s_0;
            end

        end
    end

    // SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1(STALLREG,4441)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_r_valid <= 1'b0;
            SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_r_valid <= SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_backStall & (SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_r_valid | SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_i_valid);

            if (SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_r_data0 <= $unsigned(redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_i_valid = SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_V0;
    // Stall signal propagation
    assign SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_backStall = SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_r_valid | ~ (SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_i_valid);

    // Valid
    assign SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_V = SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_r_valid == 1'b1 ? SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_r_valid : SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_i_valid;

    assign SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_D0 = SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_r_valid == 1'b1 ? SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_r_data0 : redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_q;

    // SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0(STALLENABLE,3760)
    // Valid signal propagation
    assign SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_V0 = SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_R_v_0;
    // Stall signal propagation
    assign SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_s_tv_0 = SR_SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_1_backStall & SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_R_v_0;
    // Backward Enable generation
    assign SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_backEN = ~ (SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_v_s_0 = SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_backEN & SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_V1;
    // Backward Stall generation
    assign SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_backStall = ~ (SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_backEN == 1'b0)
            begin
                SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_R_v_0 <= SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_R_v_0 & SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_s_tv_0;
            end
            else
            begin
                SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_R_v_0 <= SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_v_s_0;
            end

        end
    end

    // SE_i_unnamed_add153(STALLENABLE,3525)
    // Valid signal propagation
    assign SE_i_unnamed_add153_V0 = SE_i_unnamed_add153_wireValid;
    // Backward Stall generation
    assign SE_i_unnamed_add153_backStall = SR_SE_redist149_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_19_shuffle_i115_add0_NO_NAME_x_q_1_0_backStall | ~ (SE_i_unnamed_add153_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_unnamed_add153_and0 = SE_i_cmp3_i_18_i110_add152_V0;
    assign SE_i_unnamed_add153_and1 = SE_redist90_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_28_0_V0 & SE_i_unnamed_add153_and0;
    assign SE_i_unnamed_add153_and2 = SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_V0 & SE_i_unnamed_add153_and1;
    assign SE_i_unnamed_add153_wireValid = SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_V0 & SE_i_unnamed_add153_and2;

    // SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0(STALLENABLE,3759)
    // Valid signal propagation
    assign SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_V0 = SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_R_v_0;
    assign SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_V1 = SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_R_v_1;
    // Stall signal propagation
    assign SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_s_tv_0 = SE_i_unnamed_add153_backStall & SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_R_v_0;
    assign SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_s_tv_1 = SE_redist43_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_30_0_backStall & SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_R_v_1;
    // Backward Enable generation
    assign SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_or0 = SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_s_tv_0;
    assign SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_backEN = ~ (SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_s_tv_1 | SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_v_s_0 = SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_backEN & SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_V1;
    // Backward Stall generation
    assign SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_backStall = ~ (SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_R_v_0 <= 1'b0;
            SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_backEN == 1'b0)
            begin
                SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_R_v_0 <= SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_R_v_0 & SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_s_tv_0;
            end
            else
            begin
                SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_R_v_0 <= SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_v_s_0;
            end

            if (SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_backEN == 1'b0)
            begin
                SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_R_v_1 <= SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_R_v_1 & SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_s_tv_1;
            end
            else
            begin
                SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_R_v_1 <= SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_v_s_0;
            end

        end
    end

    // SE_i_sub4_i_17_i105_add149(STALLENABLE,3490)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_sub4_i_17_i105_add149_fromReg0 <= '0;
            SE_i_sub4_i_17_i105_add149_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_i_sub4_i_17_i105_add149_fromReg0 <= SE_i_sub4_i_17_i105_add149_toReg0;
            // Successor 1
            SE_i_sub4_i_17_i105_add149_fromReg1 <= SE_i_sub4_i_17_i105_add149_toReg1;
        end
    end
    // Input Stall processing
    assign SE_i_sub4_i_17_i105_add149_consumed0 = (~ (SE_i_cmp3_i_18_i110_add152_backStall) & SE_i_sub4_i_17_i105_add149_wireValid) | SE_i_sub4_i_17_i105_add149_fromReg0;
    assign SE_i_sub4_i_17_i105_add149_consumed1 = (~ (SE_redist151_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_18_shuffle_i109_add0_NO_NAME_x_q_1_0_backStall) & SE_i_sub4_i_17_i105_add149_wireValid) | SE_i_sub4_i_17_i105_add149_fromReg1;
    // Consuming
    assign SE_i_sub4_i_17_i105_add149_StallValid = SE_i_sub4_i_17_i105_add149_backStall & SE_i_sub4_i_17_i105_add149_wireValid;
    assign SE_i_sub4_i_17_i105_add149_toReg0 = SE_i_sub4_i_17_i105_add149_StallValid & SE_i_sub4_i_17_i105_add149_consumed0;
    assign SE_i_sub4_i_17_i105_add149_toReg1 = SE_i_sub4_i_17_i105_add149_StallValid & SE_i_sub4_i_17_i105_add149_consumed1;
    // Backward Stall generation
    assign SE_i_sub4_i_17_i105_add149_or0 = SE_i_sub4_i_17_i105_add149_consumed0;
    assign SE_i_sub4_i_17_i105_add149_wireStall = ~ (SE_i_sub4_i_17_i105_add149_consumed1 & SE_i_sub4_i_17_i105_add149_or0);
    assign SE_i_sub4_i_17_i105_add149_backStall = SE_i_sub4_i_17_i105_add149_wireStall;
    // Valid signal propagation
    assign SE_i_sub4_i_17_i105_add149_V0 = SE_i_sub4_i_17_i105_add149_wireValid & ~ (SE_i_sub4_i_17_i105_add149_fromReg0);
    assign SE_i_sub4_i_17_i105_add149_V1 = SE_i_sub4_i_17_i105_add149_wireValid & ~ (SE_i_sub4_i_17_i105_add149_fromReg1);
    // Computing multiple Valid(s)
    assign SE_i_sub4_i_17_i105_add149_and0 = SE_i_unnamed_add148_V0;
    assign SE_i_sub4_i_17_i105_add149_and1 = SE_redist153_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_2_0_V0 & SE_i_sub4_i_17_i105_add149_and0;
    assign SE_i_sub4_i_17_i105_add149_wireValid = SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_V0 & SE_i_sub4_i_17_i105_add149_and1;

    // SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1(STALLENABLE,3758)
    // Valid signal propagation
    assign SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_V0 = SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_R_v_0;
    assign SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_V1 = SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_R_v_1;
    // Stall signal propagation
    assign SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_s_tv_0 = SE_i_sub4_i_17_i105_add149_backStall & SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_R_v_0;
    assign SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_s_tv_1 = SE_redist42_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_28_0_backStall & SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_R_v_1;
    // Backward Enable generation
    assign SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_or0 = SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_s_tv_0;
    assign SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_backEN = ~ (SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_s_tv_1 | SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_v_s_0 = SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_backEN & SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_V0;
    // Backward Stall generation
    assign SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_backStall = ~ (SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_R_v_0 <= 1'b0;
            SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_backEN == 1'b0)
            begin
                SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_R_v_0 <= SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_R_v_0 & SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_s_tv_0;
            end
            else
            begin
                SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_R_v_0 <= SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_v_s_0;
            end

            if (SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_backEN == 1'b0)
            begin
                SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_R_v_1 <= SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_R_v_1 & SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_s_tv_1;
            end
            else
            begin
                SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_R_v_1 <= SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_v_s_0;
            end

        end
    end

    // SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0(STALLENABLE,3757)
    // Valid signal propagation
    assign SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_V0 = SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_R_v_0;
    // Stall signal propagation
    assign SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_s_tv_0 = SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_1_backStall & SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_R_v_0;
    // Backward Enable generation
    assign SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_backEN = ~ (SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_v_s_0 = SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_backEN & SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_V1;
    // Backward Stall generation
    assign SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_backStall = ~ (SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_backEN == 1'b0)
            begin
                SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_R_v_0 <= SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_R_v_0 & SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_s_tv_0;
            end
            else
            begin
                SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_R_v_0 <= SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_v_s_0;
            end

        end
    end

    // SE_i_unnamed_add143(STALLENABLE,3523)
    // Valid signal propagation
    assign SE_i_unnamed_add143_V0 = SE_i_unnamed_add143_wireValid;
    // Backward Stall generation
    assign SE_i_unnamed_add143_backStall = SE_redist152_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_17_shuffle_i103_add0_NO_NAME_x_q_1_0_backStall | ~ (SE_i_unnamed_add143_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_unnamed_add143_and0 = SE_i_cmp3_i_16_i98_add142_V0;
    assign SE_i_unnamed_add143_and1 = SE_redist87_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_25_0_V0 & SE_i_unnamed_add143_and0;
    assign SE_i_unnamed_add143_and2 = SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_V0 & SE_i_unnamed_add143_and1;
    assign SE_i_unnamed_add143_wireValid = SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_V0 & SE_i_unnamed_add143_and2;

    // SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0(STALLENABLE,3756)
    // Valid signal propagation
    assign SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_V0 = SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_R_v_0;
    assign SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_V1 = SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_R_v_1;
    // Stall signal propagation
    assign SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_s_tv_0 = SE_i_unnamed_add143_backStall & SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_R_v_0;
    assign SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_s_tv_1 = SE_redist41_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_27_0_backStall & SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_R_v_1;
    // Backward Enable generation
    assign SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_or0 = SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_s_tv_0;
    assign SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_backEN = ~ (SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_s_tv_1 | SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_v_s_0 = SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_backEN & SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_V;
    // Backward Stall generation
    assign SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_backStall = ~ (SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_R_v_0 <= 1'b0;
            SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_backEN == 1'b0)
            begin
                SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_R_v_0 <= SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_R_v_0 & SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_s_tv_0;
            end
            else
            begin
                SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_R_v_0 <= SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_v_s_0;
            end

            if (SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_backEN == 1'b0)
            begin
                SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_R_v_1 <= SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_R_v_1 & SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_s_tv_1;
            end
            else
            begin
                SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_R_v_1 <= SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_v_s_0;
            end

        end
    end

    // SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0(STALLREG,4440)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_r_valid <= 1'b0;
            SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_r_valid <= SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_backStall & (SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_r_valid | SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_i_valid);

            if (SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_r_data0 <= $unsigned(redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_i_valid = SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_V1;
    // Stall signal propagation
    assign SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_backStall = SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_r_valid | ~ (SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_i_valid);

    // Valid
    assign SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_V = SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_r_valid == 1'b1 ? SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_r_valid : SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_i_valid;

    assign SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_D0 = SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_r_valid == 1'b1 ? SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_r_data0 : redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_q;

    // SE_i_sub4_i_15_i93_add139(STALLENABLE,3488)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_sub4_i_15_i93_add139_fromReg0 <= '0;
            SE_i_sub4_i_15_i93_add139_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_i_sub4_i_15_i93_add139_fromReg0 <= SE_i_sub4_i_15_i93_add139_toReg0;
            // Successor 1
            SE_i_sub4_i_15_i93_add139_fromReg1 <= SE_i_sub4_i_15_i93_add139_toReg1;
        end
    end
    // Input Stall processing
    assign SE_i_sub4_i_15_i93_add139_consumed0 = (~ (SR_SE_i_cmp3_i_16_i98_add142_backStall) & SE_i_sub4_i_15_i93_add139_wireValid) | SE_i_sub4_i_15_i93_add139_fromReg0;
    assign SE_i_sub4_i_15_i93_add139_consumed1 = (~ (SR_SE_redist154_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_16_shuffle_i97_add0_NO_NAME_x_q_1_0_backStall) & SE_i_sub4_i_15_i93_add139_wireValid) | SE_i_sub4_i_15_i93_add139_fromReg1;
    // Consuming
    assign SE_i_sub4_i_15_i93_add139_StallValid = SE_i_sub4_i_15_i93_add139_backStall & SE_i_sub4_i_15_i93_add139_wireValid;
    assign SE_i_sub4_i_15_i93_add139_toReg0 = SE_i_sub4_i_15_i93_add139_StallValid & SE_i_sub4_i_15_i93_add139_consumed0;
    assign SE_i_sub4_i_15_i93_add139_toReg1 = SE_i_sub4_i_15_i93_add139_StallValid & SE_i_sub4_i_15_i93_add139_consumed1;
    // Backward Stall generation
    assign SE_i_sub4_i_15_i93_add139_or0 = SE_i_sub4_i_15_i93_add139_consumed0;
    assign SE_i_sub4_i_15_i93_add139_wireStall = ~ (SE_i_sub4_i_15_i93_add139_consumed1 & SE_i_sub4_i_15_i93_add139_or0);
    assign SE_i_sub4_i_15_i93_add139_backStall = SE_i_sub4_i_15_i93_add139_wireStall;
    // Valid signal propagation
    assign SE_i_sub4_i_15_i93_add139_V0 = SE_i_sub4_i_15_i93_add139_wireValid & ~ (SE_i_sub4_i_15_i93_add139_fromReg0);
    assign SE_i_sub4_i_15_i93_add139_V1 = SE_i_sub4_i_15_i93_add139_wireValid & ~ (SE_i_sub4_i_15_i93_add139_fromReg1);
    // Computing multiple Valid(s)
    assign SE_i_sub4_i_15_i93_add139_and0 = SE_i_unnamed_add138_V0;
    assign SE_i_sub4_i_15_i93_add139_and1 = SE_redist156_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_2_0_V0 & SE_i_sub4_i_15_i93_add139_and0;
    assign SE_i_sub4_i_15_i93_add139_wireValid = SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_V0 & SE_i_sub4_i_15_i93_add139_and1;

    // SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1(STALLENABLE,3755)
    // Valid signal propagation
    assign SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_V0 = SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_R_v_0;
    assign SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_V1 = SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_R_v_1;
    // Stall signal propagation
    assign SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_s_tv_0 = SE_i_sub4_i_15_i93_add139_backStall & SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_R_v_0;
    assign SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_s_tv_1 = SR_SE_redist40_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_25_0_backStall & SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_R_v_1;
    // Backward Enable generation
    assign SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_or0 = SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_s_tv_0;
    assign SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_backEN = ~ (SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_s_tv_1 | SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_v_s_0 = SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_backEN & SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_V0;
    // Backward Stall generation
    assign SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_backStall = ~ (SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_R_v_0 <= 1'b0;
            SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_backEN == 1'b0)
            begin
                SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_R_v_0 <= SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_R_v_0 & SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_s_tv_0;
            end
            else
            begin
                SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_R_v_0 <= SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_v_s_0;
            end

            if (SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_backEN == 1'b0)
            begin
                SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_R_v_1 <= SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_R_v_1 & SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_s_tv_1;
            end
            else
            begin
                SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_R_v_1 <= SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_v_s_0;
            end

        end
    end

    // SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0(STALLENABLE,3754)
    // Valid signal propagation
    assign SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_V0 = SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_R_v_0;
    // Stall signal propagation
    assign SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_s_tv_0 = SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_1_backStall & SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_R_v_0;
    // Backward Enable generation
    assign SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_backEN = ~ (SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_v_s_0 = SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_backEN & SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_V1;
    // Backward Stall generation
    assign SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_backStall = ~ (SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_backEN == 1'b0)
            begin
                SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_R_v_0 <= SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_R_v_0 & SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_s_tv_0;
            end
            else
            begin
                SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_R_v_0 <= SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_v_s_0;
            end

        end
    end

    // SE_i_unnamed_add133(STALLENABLE,3521)
    // Valid signal propagation
    assign SE_i_unnamed_add133_V0 = SE_i_unnamed_add133_wireValid;
    // Backward Stall generation
    assign SE_i_unnamed_add133_backStall = SR_SE_redist155_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_15_shuffle_i91_add0_NO_NAME_x_q_1_0_backStall | ~ (SE_i_unnamed_add133_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_unnamed_add133_and0 = SE_i_cmp3_i_14_i86_add132_V0;
    assign SE_i_unnamed_add133_and1 = SE_redist84_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_22_0_V0 & SE_i_unnamed_add133_and0;
    assign SE_i_unnamed_add133_and2 = SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_V0 & SE_i_unnamed_add133_and1;
    assign SE_i_unnamed_add133_wireValid = SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_V0 & SE_i_unnamed_add133_and2;

    // SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0(STALLENABLE,3753)
    // Valid signal propagation
    assign SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_V0 = SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_R_v_0;
    assign SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_V1 = SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_R_v_1;
    // Stall signal propagation
    assign SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_s_tv_0 = SE_i_unnamed_add133_backStall & SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_R_v_0;
    assign SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_s_tv_1 = SE_redist39_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_24_0_backStall & SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_R_v_1;
    // Backward Enable generation
    assign SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_or0 = SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_s_tv_0;
    assign SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_backEN = ~ (SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_s_tv_1 | SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_v_s_0 = SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_backEN & SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_V1;
    // Backward Stall generation
    assign SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_backStall = ~ (SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_R_v_0 <= 1'b0;
            SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_backEN == 1'b0)
            begin
                SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_R_v_0 <= SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_R_v_0 & SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_s_tv_0;
            end
            else
            begin
                SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_R_v_0 <= SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_v_s_0;
            end

            if (SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_backEN == 1'b0)
            begin
                SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_R_v_1 <= SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_R_v_1 & SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_s_tv_1;
            end
            else
            begin
                SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_R_v_1 <= SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_v_s_0;
            end

        end
    end

    // SE_i_sub4_i_13_i81_add129(STALLENABLE,3486)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_sub4_i_13_i81_add129_fromReg0 <= '0;
            SE_i_sub4_i_13_i81_add129_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_i_sub4_i_13_i81_add129_fromReg0 <= SE_i_sub4_i_13_i81_add129_toReg0;
            // Successor 1
            SE_i_sub4_i_13_i81_add129_fromReg1 <= SE_i_sub4_i_13_i81_add129_toReg1;
        end
    end
    // Input Stall processing
    assign SE_i_sub4_i_13_i81_add129_consumed0 = (~ (SE_i_cmp3_i_14_i86_add132_backStall) & SE_i_sub4_i_13_i81_add129_wireValid) | SE_i_sub4_i_13_i81_add129_fromReg0;
    assign SE_i_sub4_i_13_i81_add129_consumed1 = (~ (SE_redist157_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_14_shuffle_i85_add0_NO_NAME_x_q_1_0_backStall) & SE_i_sub4_i_13_i81_add129_wireValid) | SE_i_sub4_i_13_i81_add129_fromReg1;
    // Consuming
    assign SE_i_sub4_i_13_i81_add129_StallValid = SE_i_sub4_i_13_i81_add129_backStall & SE_i_sub4_i_13_i81_add129_wireValid;
    assign SE_i_sub4_i_13_i81_add129_toReg0 = SE_i_sub4_i_13_i81_add129_StallValid & SE_i_sub4_i_13_i81_add129_consumed0;
    assign SE_i_sub4_i_13_i81_add129_toReg1 = SE_i_sub4_i_13_i81_add129_StallValid & SE_i_sub4_i_13_i81_add129_consumed1;
    // Backward Stall generation
    assign SE_i_sub4_i_13_i81_add129_or0 = SE_i_sub4_i_13_i81_add129_consumed0;
    assign SE_i_sub4_i_13_i81_add129_wireStall = ~ (SE_i_sub4_i_13_i81_add129_consumed1 & SE_i_sub4_i_13_i81_add129_or0);
    assign SE_i_sub4_i_13_i81_add129_backStall = SE_i_sub4_i_13_i81_add129_wireStall;
    // Valid signal propagation
    assign SE_i_sub4_i_13_i81_add129_V0 = SE_i_sub4_i_13_i81_add129_wireValid & ~ (SE_i_sub4_i_13_i81_add129_fromReg0);
    assign SE_i_sub4_i_13_i81_add129_V1 = SE_i_sub4_i_13_i81_add129_wireValid & ~ (SE_i_sub4_i_13_i81_add129_fromReg1);
    // Computing multiple Valid(s)
    assign SE_i_sub4_i_13_i81_add129_and0 = SE_i_unnamed_add128_V0;
    assign SE_i_sub4_i_13_i81_add129_and1 = SE_redist159_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_2_0_V0 & SE_i_sub4_i_13_i81_add129_and0;
    assign SE_i_sub4_i_13_i81_add129_wireValid = SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_V0 & SE_i_sub4_i_13_i81_add129_and1;

    // SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1(STALLENABLE,3752)
    // Valid signal propagation
    assign SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_V0 = SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_R_v_0;
    assign SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_V1 = SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_R_v_1;
    // Stall signal propagation
    assign SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_s_tv_0 = SE_i_sub4_i_13_i81_add129_backStall & SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_R_v_0;
    assign SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_s_tv_1 = SE_redist38_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_22_0_backStall & SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_R_v_1;
    // Backward Enable generation
    assign SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_or0 = SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_s_tv_0;
    assign SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_backEN = ~ (SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_s_tv_1 | SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_v_s_0 = SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_backEN & SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_V0;
    // Backward Stall generation
    assign SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_backStall = ~ (SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_R_v_0 <= 1'b0;
            SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_backEN == 1'b0)
            begin
                SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_R_v_0 <= SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_R_v_0 & SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_s_tv_0;
            end
            else
            begin
                SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_R_v_0 <= SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_v_s_0;
            end

            if (SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_backEN == 1'b0)
            begin
                SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_R_v_1 <= SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_R_v_1 & SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_s_tv_1;
            end
            else
            begin
                SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_R_v_1 <= SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_v_s_0;
            end

        end
    end

    // SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0(STALLENABLE,3751)
    // Valid signal propagation
    assign SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_V0 = SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_R_v_0;
    // Stall signal propagation
    assign SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_s_tv_0 = SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_1_backStall & SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_R_v_0;
    // Backward Enable generation
    assign SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_backEN = ~ (SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_v_s_0 = SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_backEN & SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_V;
    // Backward Stall generation
    assign SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_backStall = ~ (SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_backEN == 1'b0)
            begin
                SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_R_v_0 <= SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_R_v_0 & SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_s_tv_0;
            end
            else
            begin
                SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_R_v_0 <= SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_v_s_0;
            end

        end
    end

    // SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0(STALLREG,4439)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_r_valid <= 1'b0;
            SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_r_valid <= SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_backStall & (SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_r_valid | SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_i_valid);

            if (SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_r_data0 <= $unsigned(redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_i_valid = SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_V1;
    // Stall signal propagation
    assign SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_backStall = SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_r_valid | ~ (SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_i_valid);

    // Valid
    assign SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_V = SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_r_valid == 1'b1 ? SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_r_valid : SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_i_valid;

    assign SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_D0 = SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_r_valid == 1'b1 ? SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_r_data0 : redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_q;

    // SE_i_unnamed_add123(STALLENABLE,3519)
    // Valid signal propagation
    assign SE_i_unnamed_add123_V0 = SE_i_unnamed_add123_wireValid;
    // Backward Stall generation
    assign SE_i_unnamed_add123_backStall = SR_SE_redist158_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_13_shuffle_i79_add0_NO_NAME_x_q_1_0_backStall | ~ (SE_i_unnamed_add123_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_unnamed_add123_and0 = SE_i_cmp3_i_12_i74_add122_V0;
    assign SE_i_unnamed_add123_and1 = SE_redist81_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_19_0_V0 & SE_i_unnamed_add123_and0;
    assign SE_i_unnamed_add123_and2 = SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_V0 & SE_i_unnamed_add123_and1;
    assign SE_i_unnamed_add123_wireValid = SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_V0 & SE_i_unnamed_add123_and2;

    // SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0(STALLENABLE,3750)
    // Valid signal propagation
    assign SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_V0 = SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_R_v_0;
    assign SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_V1 = SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_R_v_1;
    // Stall signal propagation
    assign SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_s_tv_0 = SE_i_unnamed_add123_backStall & SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_R_v_0;
    assign SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_s_tv_1 = SR_SE_redist37_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_21_0_backStall & SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_R_v_1;
    // Backward Enable generation
    assign SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_or0 = SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_s_tv_0;
    assign SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_backEN = ~ (SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_s_tv_1 | SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_v_s_0 = SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_backEN & SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_V1;
    // Backward Stall generation
    assign SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_backStall = ~ (SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_R_v_0 <= 1'b0;
            SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_backEN == 1'b0)
            begin
                SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_R_v_0 <= SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_R_v_0 & SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_s_tv_0;
            end
            else
            begin
                SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_R_v_0 <= SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_v_s_0;
            end

            if (SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_backEN == 1'b0)
            begin
                SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_R_v_1 <= SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_R_v_1 & SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_s_tv_1;
            end
            else
            begin
                SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_R_v_1 <= SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_v_s_0;
            end

        end
    end

    // SE_i_sub4_i_11_i69_add119(STALLENABLE,3484)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_sub4_i_11_i69_add119_fromReg0 <= '0;
            SE_i_sub4_i_11_i69_add119_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_i_sub4_i_11_i69_add119_fromReg0 <= SE_i_sub4_i_11_i69_add119_toReg0;
            // Successor 1
            SE_i_sub4_i_11_i69_add119_fromReg1 <= SE_i_sub4_i_11_i69_add119_toReg1;
        end
    end
    // Input Stall processing
    assign SE_i_sub4_i_11_i69_add119_consumed0 = (~ (SR_SE_i_cmp3_i_12_i74_add122_backStall) & SE_i_sub4_i_11_i69_add119_wireValid) | SE_i_sub4_i_11_i69_add119_fromReg0;
    assign SE_i_sub4_i_11_i69_add119_consumed1 = (~ (SR_SE_redist160_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_12_shuffle_i73_add0_NO_NAME_x_q_1_0_backStall) & SE_i_sub4_i_11_i69_add119_wireValid) | SE_i_sub4_i_11_i69_add119_fromReg1;
    // Consuming
    assign SE_i_sub4_i_11_i69_add119_StallValid = SE_i_sub4_i_11_i69_add119_backStall & SE_i_sub4_i_11_i69_add119_wireValid;
    assign SE_i_sub4_i_11_i69_add119_toReg0 = SE_i_sub4_i_11_i69_add119_StallValid & SE_i_sub4_i_11_i69_add119_consumed0;
    assign SE_i_sub4_i_11_i69_add119_toReg1 = SE_i_sub4_i_11_i69_add119_StallValid & SE_i_sub4_i_11_i69_add119_consumed1;
    // Backward Stall generation
    assign SE_i_sub4_i_11_i69_add119_or0 = SE_i_sub4_i_11_i69_add119_consumed0;
    assign SE_i_sub4_i_11_i69_add119_wireStall = ~ (SE_i_sub4_i_11_i69_add119_consumed1 & SE_i_sub4_i_11_i69_add119_or0);
    assign SE_i_sub4_i_11_i69_add119_backStall = SE_i_sub4_i_11_i69_add119_wireStall;
    // Valid signal propagation
    assign SE_i_sub4_i_11_i69_add119_V0 = SE_i_sub4_i_11_i69_add119_wireValid & ~ (SE_i_sub4_i_11_i69_add119_fromReg0);
    assign SE_i_sub4_i_11_i69_add119_V1 = SE_i_sub4_i_11_i69_add119_wireValid & ~ (SE_i_sub4_i_11_i69_add119_fromReg1);
    // Computing multiple Valid(s)
    assign SE_i_sub4_i_11_i69_add119_and0 = SE_i_unnamed_add118_V0;
    assign SE_i_sub4_i_11_i69_add119_and1 = SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_V0 & SE_i_sub4_i_11_i69_add119_and0;
    assign SE_i_sub4_i_11_i69_add119_wireValid = SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_V0 & SE_i_sub4_i_11_i69_add119_and1;

    // SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0(STALLENABLE,3749)
    // Valid signal propagation
    assign SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_V0 = SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_R_v_0;
    assign SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_V1 = SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_R_v_1;
    // Stall signal propagation
    assign SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_s_tv_0 = SE_i_sub4_i_11_i69_add119_backStall & SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_R_v_0;
    assign SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_s_tv_1 = SE_redist36_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_19_0_backStall & SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_R_v_1;
    // Backward Enable generation
    assign SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_or0 = SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_s_tv_0;
    assign SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_backEN = ~ (SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_s_tv_1 | SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_v_s_0 = SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_backEN & SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_V1;
    // Backward Stall generation
    assign SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_backStall = ~ (SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_R_v_0 <= 1'b0;
            SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_backEN == 1'b0)
            begin
                SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_R_v_0 <= SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_R_v_0 & SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_s_tv_0;
            end
            else
            begin
                SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_R_v_0 <= SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_v_s_0;
            end

            if (SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_backEN == 1'b0)
            begin
                SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_R_v_1 <= SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_R_v_1 & SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_s_tv_1;
            end
            else
            begin
                SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_R_v_1 <= SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_v_s_0;
            end

        end
    end

    // SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x(STALLENABLE,3195)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_fromReg0 <= '0;
            SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_fromReg0 <= SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_toReg0;
            // Successor 1
            SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_fromReg1 <= SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_toReg1;
        end
    end
    // Input Stall processing
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_consumed0 = (~ (SE_i_cmp3_i_11_i68_add117_backStall) & SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_wireValid) | SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_fromReg0;
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_consumed1 = (~ (SE_redist161_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_NO_NAME_x_q_1_0_backStall) & SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_wireValid) | SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_fromReg1;
    // Consuming
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_StallValid = SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_backStall & SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_wireValid;
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_toReg0 = SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_StallValid & SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_consumed0;
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_toReg1 = SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_StallValid & SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_consumed1;
    // Backward Stall generation
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_or0 = SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_consumed0;
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_wireStall = ~ (SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_consumed1 & SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_or0);
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_backStall = SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_wireStall;
    // Valid signal propagation
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_V0 = SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_wireValid & ~ (SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_fromReg0);
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_V1 = SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_wireValid & ~ (SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_fromReg1);
    // Computing multiple Valid(s)
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_and0 = SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_V0;
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_wireValid = SE_redist186_bgTrunc_i_sub4_i_10_i63_add114_sel_x_b_1_0_V0 & SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_and0;

    // SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1(STALLENABLE,3748)
    // Valid signal propagation
    assign SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_V0 = SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_R_v_0;
    assign SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_V1 = SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_R_v_1;
    // Stall signal propagation
    assign SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_s_tv_0 = SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_11_shuffle_i67_add0_dsdk_ip_adapt_bitjoin1_x_backStall & SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_R_v_0;
    assign SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_s_tv_1 = SE_redist35_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_18_0_backStall & SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_R_v_1;
    // Backward Enable generation
    assign SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_or0 = SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_s_tv_0;
    assign SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_backEN = ~ (SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_s_tv_1 | SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_v_s_0 = SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_backEN & SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_V0;
    // Backward Stall generation
    assign SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_backStall = ~ (SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_R_v_0 <= 1'b0;
            SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_backEN == 1'b0)
            begin
                SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_R_v_0 <= SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_R_v_0 & SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_s_tv_0;
            end
            else
            begin
                SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_R_v_0 <= SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_v_s_0;
            end

            if (SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_backEN == 1'b0)
            begin
                SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_R_v_1 <= SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_R_v_1 & SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_s_tv_1;
            end
            else
            begin
                SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_R_v_1 <= SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_v_s_0;
            end

        end
    end

    // SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0(STALLENABLE,3747)
    // Valid signal propagation
    assign SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_V0 = SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_R_v_0;
    // Stall signal propagation
    assign SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_s_tv_0 = SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_1_backStall & SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_R_v_0;
    // Backward Enable generation
    assign SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_backEN = ~ (SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_v_s_0 = SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_backEN & SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_V1;
    // Backward Stall generation
    assign SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_backStall = ~ (SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_backEN == 1'b0)
            begin
                SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_R_v_0 <= SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_R_v_0 & SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_s_tv_0;
            end
            else
            begin
                SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_R_v_0 <= SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_v_s_0;
            end

        end
    end

    // SE_i_sub4_i_9_i57_add109(STALLENABLE,3513)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_sub4_i_9_i57_add109_fromReg0 <= '0;
            SE_i_sub4_i_9_i57_add109_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_i_sub4_i_9_i57_add109_fromReg0 <= SE_i_sub4_i_9_i57_add109_toReg0;
            // Successor 1
            SE_i_sub4_i_9_i57_add109_fromReg1 <= SE_i_sub4_i_9_i57_add109_toReg1;
        end
    end
    // Input Stall processing
    assign SE_i_sub4_i_9_i57_add109_consumed0 = (~ (SE_i_cmp3_i_10_i62_add112_backStall) & SE_i_sub4_i_9_i57_add109_wireValid) | SE_i_sub4_i_9_i57_add109_fromReg0;
    assign SE_i_sub4_i_9_i57_add109_consumed1 = (~ (SE_redist162_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_10_shuffle_i61_add0_NO_NAME_x_q_1_0_backStall) & SE_i_sub4_i_9_i57_add109_wireValid) | SE_i_sub4_i_9_i57_add109_fromReg1;
    // Consuming
    assign SE_i_sub4_i_9_i57_add109_StallValid = SE_i_sub4_i_9_i57_add109_backStall & SE_i_sub4_i_9_i57_add109_wireValid;
    assign SE_i_sub4_i_9_i57_add109_toReg0 = SE_i_sub4_i_9_i57_add109_StallValid & SE_i_sub4_i_9_i57_add109_consumed0;
    assign SE_i_sub4_i_9_i57_add109_toReg1 = SE_i_sub4_i_9_i57_add109_StallValid & SE_i_sub4_i_9_i57_add109_consumed1;
    // Backward Stall generation
    assign SE_i_sub4_i_9_i57_add109_or0 = SE_i_sub4_i_9_i57_add109_consumed0;
    assign SE_i_sub4_i_9_i57_add109_wireStall = ~ (SE_i_sub4_i_9_i57_add109_consumed1 & SE_i_sub4_i_9_i57_add109_or0);
    assign SE_i_sub4_i_9_i57_add109_backStall = SE_i_sub4_i_9_i57_add109_wireStall;
    // Valid signal propagation
    assign SE_i_sub4_i_9_i57_add109_V0 = SE_i_sub4_i_9_i57_add109_wireValid & ~ (SE_i_sub4_i_9_i57_add109_fromReg0);
    assign SE_i_sub4_i_9_i57_add109_V1 = SE_i_sub4_i_9_i57_add109_wireValid & ~ (SE_i_sub4_i_9_i57_add109_fromReg1);
    // Computing multiple Valid(s)
    assign SE_i_sub4_i_9_i57_add109_and0 = SE_i_unnamed_add108_V0;
    assign SE_i_sub4_i_9_i57_add109_and1 = SE_redist119_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_2_0_V0 & SE_i_sub4_i_9_i57_add109_and0;
    assign SE_i_sub4_i_9_i57_add109_wireValid = SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_V0 & SE_i_sub4_i_9_i57_add109_and1;

    // SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1(STALLENABLE,3746)
    // Valid signal propagation
    assign SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_V0 = SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_R_v_0;
    assign SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_V1 = SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_R_v_1;
    // Stall signal propagation
    assign SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_s_tv_0 = SE_i_sub4_i_9_i57_add109_backStall & SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_R_v_0;
    assign SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_s_tv_1 = SE_redist34_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_17_0_backStall & SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_R_v_1;
    // Backward Enable generation
    assign SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_or0 = SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_s_tv_0;
    assign SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_backEN = ~ (SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_s_tv_1 | SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_v_s_0 = SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_backEN & SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_V;
    // Backward Stall generation
    assign SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_backStall = ~ (SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_R_v_0 <= 1'b0;
            SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_backEN == 1'b0)
            begin
                SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_R_v_0 <= SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_R_v_0 & SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_s_tv_0;
            end
            else
            begin
                SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_R_v_0 <= SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_v_s_0;
            end

            if (SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_backEN == 1'b0)
            begin
                SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_R_v_1 <= SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_R_v_1 & SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_s_tv_1;
            end
            else
            begin
                SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_R_v_1 <= SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_v_s_0;
            end

        end
    end

    // SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1(STALLREG,4438)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_r_valid <= 1'b0;
            SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_r_valid <= SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_backStall & (SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_r_valid | SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_i_valid);

            if (SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_r_data0 <= $unsigned(redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_i_valid = SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_V0;
    // Stall signal propagation
    assign SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_backStall = SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_r_valid | ~ (SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_i_valid);

    // Valid
    assign SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_V = SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_r_valid == 1'b1 ? SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_r_valid : SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_i_valid;

    assign SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_D0 = SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_r_valid == 1'b1 ? SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_r_data0 : redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_q;

    // SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0(STALLENABLE,3745)
    // Valid signal propagation
    assign SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_V0 = SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_R_v_0;
    // Stall signal propagation
    assign SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_s_tv_0 = SR_SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_1_backStall & SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_R_v_0;
    // Backward Enable generation
    assign SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_backEN = ~ (SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_v_s_0 = SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_backEN & SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_V1;
    // Backward Stall generation
    assign SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_backStall = ~ (SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_backEN == 1'b0)
            begin
                SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_R_v_0 <= SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_R_v_0 & SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_s_tv_0;
            end
            else
            begin
                SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_R_v_0 <= SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_v_s_0;
            end

        end
    end

    // SE_i_unnamed_add103(STALLENABLE,3515)
    // Valid signal propagation
    assign SE_i_unnamed_add103_V0 = SE_i_unnamed_add103_wireValid;
    // Backward Stall generation
    assign SE_i_unnamed_add103_backStall = SR_SE_redist118_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_9_shuffle_i55_add0_NO_NAME_x_q_1_0_backStall | ~ (SE_i_unnamed_add103_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_unnamed_add103_and0 = SE_i_cmp3_i_8_i50_add102_V0;
    assign SE_i_unnamed_add103_and1 = SE_redist75_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_13_0_V0 & SE_i_unnamed_add103_and0;
    assign SE_i_unnamed_add103_and2 = SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_V0 & SE_i_unnamed_add103_and1;
    assign SE_i_unnamed_add103_wireValid = SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_V0 & SE_i_unnamed_add103_and2;

    // SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0(STALLENABLE,3744)
    // Valid signal propagation
    assign SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_V0 = SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_R_v_0;
    assign SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_V1 = SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_R_v_1;
    // Stall signal propagation
    assign SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_s_tv_0 = SE_i_unnamed_add103_backStall & SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_R_v_0;
    assign SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_s_tv_1 = SE_redist33_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_15_0_backStall & SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_R_v_1;
    // Backward Enable generation
    assign SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_or0 = SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_s_tv_0;
    assign SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_backEN = ~ (SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_s_tv_1 | SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_v_s_0 = SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_backEN & SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_V1;
    // Backward Stall generation
    assign SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_backStall = ~ (SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_R_v_0 <= 1'b0;
            SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_backEN == 1'b0)
            begin
                SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_R_v_0 <= SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_R_v_0 & SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_s_tv_0;
            end
            else
            begin
                SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_R_v_0 <= SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_v_s_0;
            end

            if (SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_backEN == 1'b0)
            begin
                SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_R_v_1 <= SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_R_v_1 & SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_s_tv_1;
            end
            else
            begin
                SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_R_v_1 <= SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_v_s_0;
            end

        end
    end

    // SE_i_sub4_i_7_i45_add99(STALLENABLE,3511)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_sub4_i_7_i45_add99_fromReg0 <= '0;
            SE_i_sub4_i_7_i45_add99_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_i_sub4_i_7_i45_add99_fromReg0 <= SE_i_sub4_i_7_i45_add99_toReg0;
            // Successor 1
            SE_i_sub4_i_7_i45_add99_fromReg1 <= SE_i_sub4_i_7_i45_add99_toReg1;
        end
    end
    // Input Stall processing
    assign SE_i_sub4_i_7_i45_add99_consumed0 = (~ (SE_i_cmp3_i_8_i50_add102_backStall) & SE_i_sub4_i_7_i45_add99_wireValid) | SE_i_sub4_i_7_i45_add99_fromReg0;
    assign SE_i_sub4_i_7_i45_add99_consumed1 = (~ (SE_redist120_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_8_shuffle_i49_add0_NO_NAME_x_q_1_0_backStall) & SE_i_sub4_i_7_i45_add99_wireValid) | SE_i_sub4_i_7_i45_add99_fromReg1;
    // Consuming
    assign SE_i_sub4_i_7_i45_add99_StallValid = SE_i_sub4_i_7_i45_add99_backStall & SE_i_sub4_i_7_i45_add99_wireValid;
    assign SE_i_sub4_i_7_i45_add99_toReg0 = SE_i_sub4_i_7_i45_add99_StallValid & SE_i_sub4_i_7_i45_add99_consumed0;
    assign SE_i_sub4_i_7_i45_add99_toReg1 = SE_i_sub4_i_7_i45_add99_StallValid & SE_i_sub4_i_7_i45_add99_consumed1;
    // Backward Stall generation
    assign SE_i_sub4_i_7_i45_add99_or0 = SE_i_sub4_i_7_i45_add99_consumed0;
    assign SE_i_sub4_i_7_i45_add99_wireStall = ~ (SE_i_sub4_i_7_i45_add99_consumed1 & SE_i_sub4_i_7_i45_add99_or0);
    assign SE_i_sub4_i_7_i45_add99_backStall = SE_i_sub4_i_7_i45_add99_wireStall;
    // Valid signal propagation
    assign SE_i_sub4_i_7_i45_add99_V0 = SE_i_sub4_i_7_i45_add99_wireValid & ~ (SE_i_sub4_i_7_i45_add99_fromReg0);
    assign SE_i_sub4_i_7_i45_add99_V1 = SE_i_sub4_i_7_i45_add99_wireValid & ~ (SE_i_sub4_i_7_i45_add99_fromReg1);
    // Computing multiple Valid(s)
    assign SE_i_sub4_i_7_i45_add99_and0 = SE_i_unnamed_add98_V0;
    assign SE_i_sub4_i_7_i45_add99_and1 = SE_redist122_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_2_0_V0 & SE_i_sub4_i_7_i45_add99_and0;
    assign SE_i_sub4_i_7_i45_add99_wireValid = SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_V0 & SE_i_sub4_i_7_i45_add99_and1;

    // SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1(STALLENABLE,3743)
    // Valid signal propagation
    assign SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_V0 = SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_R_v_0;
    assign SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_V1 = SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_R_v_1;
    // Stall signal propagation
    assign SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_s_tv_0 = SE_i_sub4_i_7_i45_add99_backStall & SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_R_v_0;
    assign SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_s_tv_1 = SE_redist32_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_13_0_backStall & SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_R_v_1;
    // Backward Enable generation
    assign SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_or0 = SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_s_tv_0;
    assign SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_backEN = ~ (SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_s_tv_1 | SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_v_s_0 = SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_backEN & SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_V0;
    // Backward Stall generation
    assign SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_backStall = ~ (SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_R_v_0 <= 1'b0;
            SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_backEN == 1'b0)
            begin
                SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_R_v_0 <= SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_R_v_0 & SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_s_tv_0;
            end
            else
            begin
                SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_R_v_0 <= SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_v_s_0;
            end

            if (SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_backEN == 1'b0)
            begin
                SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_R_v_1 <= SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_R_v_1 & SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_s_tv_1;
            end
            else
            begin
                SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_R_v_1 <= SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_v_s_0;
            end

        end
    end

    // SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0(STALLENABLE,3742)
    // Valid signal propagation
    assign SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_V0 = SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_R_v_0;
    // Stall signal propagation
    assign SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_s_tv_0 = SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_1_backStall & SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_R_v_0;
    // Backward Enable generation
    assign SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_backEN = ~ (SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_v_s_0 = SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_backEN & SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_V1;
    // Backward Stall generation
    assign SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_backStall = ~ (SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_backEN == 1'b0)
            begin
                SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_R_v_0 <= SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_R_v_0 & SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_s_tv_0;
            end
            else
            begin
                SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_R_v_0 <= SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_v_s_0;
            end

        end
    end

    // SE_i_unnamed_add93(STALLENABLE,3553)
    // Valid signal propagation
    assign SE_i_unnamed_add93_V0 = SE_i_unnamed_add93_wireValid;
    // Backward Stall generation
    assign SE_i_unnamed_add93_backStall = SE_redist121_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_7_shuffle_i43_add0_NO_NAME_x_q_1_0_backStall | ~ (SE_i_unnamed_add93_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_unnamed_add93_and0 = SE_i_cmp3_i_6_i38_add92_V0;
    assign SE_i_unnamed_add93_and1 = SE_redist72_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_10_0_V0 & SE_i_unnamed_add93_and0;
    assign SE_i_unnamed_add93_and2 = SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_V0 & SE_i_unnamed_add93_and1;
    assign SE_i_unnamed_add93_wireValid = SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_V0 & SE_i_unnamed_add93_and2;

    // SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0(STALLENABLE,3741)
    // Valid signal propagation
    assign SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_V0 = SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_R_v_0;
    assign SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_V1 = SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_R_v_1;
    // Stall signal propagation
    assign SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_s_tv_0 = SE_i_unnamed_add93_backStall & SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_R_v_0;
    assign SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_s_tv_1 = SE_redist31_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_12_0_backStall & SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_R_v_1;
    // Backward Enable generation
    assign SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_or0 = SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_s_tv_0;
    assign SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_backEN = ~ (SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_s_tv_1 | SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_v_s_0 = SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_backEN & SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_V;
    // Backward Stall generation
    assign SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_backStall = ~ (SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_R_v_0 <= 1'b0;
            SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_backEN == 1'b0)
            begin
                SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_R_v_0 <= SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_R_v_0 & SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_s_tv_0;
            end
            else
            begin
                SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_R_v_0 <= SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_v_s_0;
            end

            if (SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_backEN == 1'b0)
            begin
                SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_R_v_1 <= SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_R_v_1 & SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_s_tv_1;
            end
            else
            begin
                SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_R_v_1 <= SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_v_s_0;
            end

        end
    end

    // SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0(STALLREG,4437)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_r_valid <= 1'b0;
            SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_r_valid <= SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_backStall & (SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_r_valid | SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_i_valid);

            if (SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_r_data0 <= $unsigned(redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_i_valid = SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_V1;
    // Stall signal propagation
    assign SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_backStall = SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_r_valid | ~ (SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_i_valid);

    // Valid
    assign SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_V = SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_r_valid == 1'b1 ? SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_r_valid : SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_i_valid;

    assign SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_D0 = SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_r_valid == 1'b1 ? SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_r_data0 : redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_q;

    // SE_i_sub4_i_5_i33_add89(STALLENABLE,3509)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_sub4_i_5_i33_add89_fromReg0 <= '0;
            SE_i_sub4_i_5_i33_add89_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_i_sub4_i_5_i33_add89_fromReg0 <= SE_i_sub4_i_5_i33_add89_toReg0;
            // Successor 1
            SE_i_sub4_i_5_i33_add89_fromReg1 <= SE_i_sub4_i_5_i33_add89_toReg1;
        end
    end
    // Input Stall processing
    assign SE_i_sub4_i_5_i33_add89_consumed0 = (~ (SR_SE_i_cmp3_i_6_i38_add92_backStall) & SE_i_sub4_i_5_i33_add89_wireValid) | SE_i_sub4_i_5_i33_add89_fromReg0;
    assign SE_i_sub4_i_5_i33_add89_consumed1 = (~ (SR_SE_redist123_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_6_shuffle_i37_add0_NO_NAME_x_q_1_0_backStall) & SE_i_sub4_i_5_i33_add89_wireValid) | SE_i_sub4_i_5_i33_add89_fromReg1;
    // Consuming
    assign SE_i_sub4_i_5_i33_add89_StallValid = SE_i_sub4_i_5_i33_add89_backStall & SE_i_sub4_i_5_i33_add89_wireValid;
    assign SE_i_sub4_i_5_i33_add89_toReg0 = SE_i_sub4_i_5_i33_add89_StallValid & SE_i_sub4_i_5_i33_add89_consumed0;
    assign SE_i_sub4_i_5_i33_add89_toReg1 = SE_i_sub4_i_5_i33_add89_StallValid & SE_i_sub4_i_5_i33_add89_consumed1;
    // Backward Stall generation
    assign SE_i_sub4_i_5_i33_add89_or0 = SE_i_sub4_i_5_i33_add89_consumed0;
    assign SE_i_sub4_i_5_i33_add89_wireStall = ~ (SE_i_sub4_i_5_i33_add89_consumed1 & SE_i_sub4_i_5_i33_add89_or0);
    assign SE_i_sub4_i_5_i33_add89_backStall = SE_i_sub4_i_5_i33_add89_wireStall;
    // Valid signal propagation
    assign SE_i_sub4_i_5_i33_add89_V0 = SE_i_sub4_i_5_i33_add89_wireValid & ~ (SE_i_sub4_i_5_i33_add89_fromReg0);
    assign SE_i_sub4_i_5_i33_add89_V1 = SE_i_sub4_i_5_i33_add89_wireValid & ~ (SE_i_sub4_i_5_i33_add89_fromReg1);
    // Computing multiple Valid(s)
    assign SE_i_sub4_i_5_i33_add89_and0 = SE_i_unnamed_add88_V0;
    assign SE_i_sub4_i_5_i33_add89_and1 = SE_redist125_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_2_0_V0 & SE_i_sub4_i_5_i33_add89_and0;
    assign SE_i_sub4_i_5_i33_add89_wireValid = SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_V0 & SE_i_sub4_i_5_i33_add89_and1;

    // SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1(STALLENABLE,3740)
    // Valid signal propagation
    assign SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_V0 = SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_R_v_0;
    assign SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_V1 = SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_R_v_1;
    // Stall signal propagation
    assign SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_s_tv_0 = SE_i_sub4_i_5_i33_add89_backStall & SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_R_v_0;
    assign SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_s_tv_1 = SR_SE_redist30_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_10_0_backStall & SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_R_v_1;
    // Backward Enable generation
    assign SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_or0 = SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_s_tv_0;
    assign SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_backEN = ~ (SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_s_tv_1 | SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_v_s_0 = SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_backEN & SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_V0;
    // Backward Stall generation
    assign SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_backStall = ~ (SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_R_v_0 <= 1'b0;
            SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_backEN == 1'b0)
            begin
                SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_R_v_0 <= SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_R_v_0 & SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_s_tv_0;
            end
            else
            begin
                SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_R_v_0 <= SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_v_s_0;
            end

            if (SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_backEN == 1'b0)
            begin
                SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_R_v_1 <= SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_R_v_1 & SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_s_tv_1;
            end
            else
            begin
                SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_R_v_1 <= SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_v_s_0;
            end

        end
    end

    // SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0(STALLENABLE,3739)
    // Valid signal propagation
    assign SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_V0 = SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_R_v_0;
    // Stall signal propagation
    assign SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_s_tv_0 = SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_1_backStall & SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_R_v_0;
    // Backward Enable generation
    assign SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_backEN = ~ (SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_v_s_0 = SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_backEN & SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_V1;
    // Backward Stall generation
    assign SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_backStall = ~ (SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_backEN == 1'b0)
            begin
                SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_R_v_0 <= SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_R_v_0 & SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_s_tv_0;
            end
            else
            begin
                SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_R_v_0 <= SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_v_s_0;
            end

        end
    end

    // SE_i_unnamed_add83(STALLENABLE,3551)
    // Valid signal propagation
    assign SE_i_unnamed_add83_V0 = SE_i_unnamed_add83_wireValid;
    // Backward Stall generation
    assign SE_i_unnamed_add83_backStall = SR_SE_redist124_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_5_shuffle_i31_add0_NO_NAME_x_q_1_0_backStall | ~ (SE_i_unnamed_add83_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_unnamed_add83_and0 = SE_i_cmp3_i_4_i26_add82_V0;
    assign SE_i_unnamed_add83_and1 = SE_redist69_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_7_0_V0 & SE_i_unnamed_add83_and0;
    assign SE_i_unnamed_add83_and2 = SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_V0 & SE_i_unnamed_add83_and1;
    assign SE_i_unnamed_add83_wireValid = SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_V0 & SE_i_unnamed_add83_and2;

    // SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0(STALLENABLE,3738)
    // Valid signal propagation
    assign SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_V0 = SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_R_v_0;
    assign SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_V1 = SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_R_v_1;
    // Stall signal propagation
    assign SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_s_tv_0 = SE_i_unnamed_add83_backStall & SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_R_v_0;
    assign SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_s_tv_1 = SE_redist29_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_9_0_backStall & SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_R_v_1;
    // Backward Enable generation
    assign SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_or0 = SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_s_tv_0;
    assign SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_backEN = ~ (SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_s_tv_1 | SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_v_s_0 = SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_backEN & SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_V1;
    // Backward Stall generation
    assign SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_backStall = ~ (SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_R_v_0 <= 1'b0;
            SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_backEN == 1'b0)
            begin
                SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_R_v_0 <= SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_R_v_0 & SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_s_tv_0;
            end
            else
            begin
                SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_R_v_0 <= SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_v_s_0;
            end

            if (SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_backEN == 1'b0)
            begin
                SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_R_v_1 <= SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_R_v_1 & SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_s_tv_1;
            end
            else
            begin
                SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_R_v_1 <= SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_v_s_0;
            end

        end
    end

    // SE_i_sub4_i_3_i21_add79(STALLENABLE,3507)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_sub4_i_3_i21_add79_fromReg0 <= '0;
            SE_i_sub4_i_3_i21_add79_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_i_sub4_i_3_i21_add79_fromReg0 <= SE_i_sub4_i_3_i21_add79_toReg0;
            // Successor 1
            SE_i_sub4_i_3_i21_add79_fromReg1 <= SE_i_sub4_i_3_i21_add79_toReg1;
        end
    end
    // Input Stall processing
    assign SE_i_sub4_i_3_i21_add79_consumed0 = (~ (SE_i_cmp3_i_4_i26_add82_backStall) & SE_i_sub4_i_3_i21_add79_wireValid) | SE_i_sub4_i_3_i21_add79_fromReg0;
    assign SE_i_sub4_i_3_i21_add79_consumed1 = (~ (SE_redist126_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_4_shuffle_i25_add0_NO_NAME_x_q_1_0_backStall) & SE_i_sub4_i_3_i21_add79_wireValid) | SE_i_sub4_i_3_i21_add79_fromReg1;
    // Consuming
    assign SE_i_sub4_i_3_i21_add79_StallValid = SE_i_sub4_i_3_i21_add79_backStall & SE_i_sub4_i_3_i21_add79_wireValid;
    assign SE_i_sub4_i_3_i21_add79_toReg0 = SE_i_sub4_i_3_i21_add79_StallValid & SE_i_sub4_i_3_i21_add79_consumed0;
    assign SE_i_sub4_i_3_i21_add79_toReg1 = SE_i_sub4_i_3_i21_add79_StallValid & SE_i_sub4_i_3_i21_add79_consumed1;
    // Backward Stall generation
    assign SE_i_sub4_i_3_i21_add79_or0 = SE_i_sub4_i_3_i21_add79_consumed0;
    assign SE_i_sub4_i_3_i21_add79_wireStall = ~ (SE_i_sub4_i_3_i21_add79_consumed1 & SE_i_sub4_i_3_i21_add79_or0);
    assign SE_i_sub4_i_3_i21_add79_backStall = SE_i_sub4_i_3_i21_add79_wireStall;
    // Valid signal propagation
    assign SE_i_sub4_i_3_i21_add79_V0 = SE_i_sub4_i_3_i21_add79_wireValid & ~ (SE_i_sub4_i_3_i21_add79_fromReg0);
    assign SE_i_sub4_i_3_i21_add79_V1 = SE_i_sub4_i_3_i21_add79_wireValid & ~ (SE_i_sub4_i_3_i21_add79_fromReg1);
    // Computing multiple Valid(s)
    assign SE_i_sub4_i_3_i21_add79_and0 = SE_i_unnamed_add78_V0;
    assign SE_i_sub4_i_3_i21_add79_and1 = SE_redist128_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_2_0_V0 & SE_i_sub4_i_3_i21_add79_and0;
    assign SE_i_sub4_i_3_i21_add79_wireValid = SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_V0 & SE_i_sub4_i_3_i21_add79_and1;

    // SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1(STALLENABLE,3737)
    // Valid signal propagation
    assign SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_V0 = SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_R_v_0;
    assign SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_V1 = SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_R_v_1;
    // Stall signal propagation
    assign SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_s_tv_0 = SE_i_sub4_i_3_i21_add79_backStall & SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_R_v_0;
    assign SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_s_tv_1 = SE_redist28_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_7_0_backStall & SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_R_v_1;
    // Backward Enable generation
    assign SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_or0 = SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_s_tv_0;
    assign SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_backEN = ~ (SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_s_tv_1 | SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_v_s_0 = SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_backEN & SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_V0;
    // Backward Stall generation
    assign SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_backStall = ~ (SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_R_v_0 <= 1'b0;
            SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_backEN == 1'b0)
            begin
                SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_R_v_0 <= SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_R_v_0 & SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_s_tv_0;
            end
            else
            begin
                SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_R_v_0 <= SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_v_s_0;
            end

            if (SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_backEN == 1'b0)
            begin
                SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_R_v_1 <= SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_R_v_1 & SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_s_tv_1;
            end
            else
            begin
                SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_R_v_1 <= SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_v_s_0;
            end

        end
    end

    // SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0(STALLENABLE,3736)
    // Valid signal propagation
    assign SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_V0 = SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_R_v_0;
    // Stall signal propagation
    assign SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_s_tv_0 = SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_1_backStall & SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_R_v_0;
    // Backward Enable generation
    assign SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_backEN = ~ (SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_v_s_0 = SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_backEN & SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_V;
    // Backward Stall generation
    assign SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_backStall = ~ (SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_backEN == 1'b0)
            begin
                SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_R_v_0 <= SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_R_v_0 & SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_s_tv_0;
            end
            else
            begin
                SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_R_v_0 <= SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_v_s_0;
            end

        end
    end

    // SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0(STALLREG,4436)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_r_valid <= 1'b0;
            SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
        end
        else
        begin
            // Valid
            SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_r_valid <= SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_backStall & (SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_r_valid | SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_i_valid);

            if (SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_r_data0 <= $unsigned(redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_q);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_i_valid = SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_V1;
    // Stall signal propagation
    assign SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_backStall = SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_r_valid | ~ (SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_i_valid);

    // Valid
    assign SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_V = SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_r_valid == 1'b1 ? SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_r_valid : SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_i_valid;

    assign SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_D0 = SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_r_valid == 1'b1 ? SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_r_data0 : redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_q;

    // SE_i_unnamed_add73(STALLENABLE,3549)
    // Valid signal propagation
    assign SE_i_unnamed_add73_V0 = SE_i_unnamed_add73_wireValid;
    // Backward Stall generation
    assign SE_i_unnamed_add73_backStall = SR_SE_redist127_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_3_shuffle_i19_add0_NO_NAME_x_q_1_0_backStall | ~ (SE_i_unnamed_add73_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_unnamed_add73_and0 = SE_i_cmp3_i_2_i14_add72_V0;
    assign SE_i_unnamed_add73_and1 = SE_redist66_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_4_0_V0 & SE_i_unnamed_add73_and0;
    assign SE_i_unnamed_add73_and2 = SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_V0 & SE_i_unnamed_add73_and1;
    assign SE_i_unnamed_add73_wireValid = SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_V0 & SE_i_unnamed_add73_and2;

    // SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0(STALLENABLE,3735)
    // Valid signal propagation
    assign SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_V0 = SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_R_v_0;
    assign SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_V1 = SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_R_v_1;
    // Stall signal propagation
    assign SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_s_tv_0 = SE_i_unnamed_add73_backStall & SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_R_v_0;
    assign SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_s_tv_1 = SR_SE_redist27_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_6_0_backStall & SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_R_v_1;
    // Backward Enable generation
    assign SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_or0 = SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_s_tv_0;
    assign SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_backEN = ~ (SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_s_tv_1 | SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_v_s_0 = SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_backEN & SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_V1;
    // Backward Stall generation
    assign SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_backStall = ~ (SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_R_v_0 <= 1'b0;
            SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_backEN == 1'b0)
            begin
                SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_R_v_0 <= SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_R_v_0 & SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_s_tv_0;
            end
            else
            begin
                SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_R_v_0 <= SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_v_s_0;
            end

            if (SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_backEN == 1'b0)
            begin
                SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_R_v_1 <= SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_R_v_1 & SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_s_tv_1;
            end
            else
            begin
                SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_R_v_1 <= SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_v_s_0;
            end

        end
    end

    // SE_i_sub4_i_1_i9_add69(STALLENABLE,3493)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_sub4_i_1_i9_add69_fromReg0 <= '0;
            SE_i_sub4_i_1_i9_add69_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_i_sub4_i_1_i9_add69_fromReg0 <= SE_i_sub4_i_1_i9_add69_toReg0;
            // Successor 1
            SE_i_sub4_i_1_i9_add69_fromReg1 <= SE_i_sub4_i_1_i9_add69_toReg1;
        end
    end
    // Input Stall processing
    assign SE_i_sub4_i_1_i9_add69_consumed0 = (~ (SR_SE_i_cmp3_i_2_i14_add72_backStall) & SE_i_sub4_i_1_i9_add69_wireValid) | SE_i_sub4_i_1_i9_add69_fromReg0;
    assign SE_i_sub4_i_1_i9_add69_consumed1 = (~ (SR_SE_redist132_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_2_shuffle_i13_add0_NO_NAME_x_q_1_0_backStall) & SE_i_sub4_i_1_i9_add69_wireValid) | SE_i_sub4_i_1_i9_add69_fromReg1;
    // Consuming
    assign SE_i_sub4_i_1_i9_add69_StallValid = SE_i_sub4_i_1_i9_add69_backStall & SE_i_sub4_i_1_i9_add69_wireValid;
    assign SE_i_sub4_i_1_i9_add69_toReg0 = SE_i_sub4_i_1_i9_add69_StallValid & SE_i_sub4_i_1_i9_add69_consumed0;
    assign SE_i_sub4_i_1_i9_add69_toReg1 = SE_i_sub4_i_1_i9_add69_StallValid & SE_i_sub4_i_1_i9_add69_consumed1;
    // Backward Stall generation
    assign SE_i_sub4_i_1_i9_add69_or0 = SE_i_sub4_i_1_i9_add69_consumed0;
    assign SE_i_sub4_i_1_i9_add69_wireStall = ~ (SE_i_sub4_i_1_i9_add69_consumed1 & SE_i_sub4_i_1_i9_add69_or0);
    assign SE_i_sub4_i_1_i9_add69_backStall = SE_i_sub4_i_1_i9_add69_wireStall;
    // Valid signal propagation
    assign SE_i_sub4_i_1_i9_add69_V0 = SE_i_sub4_i_1_i9_add69_wireValid & ~ (SE_i_sub4_i_1_i9_add69_fromReg0);
    assign SE_i_sub4_i_1_i9_add69_V1 = SE_i_sub4_i_1_i9_add69_wireValid & ~ (SE_i_sub4_i_1_i9_add69_fromReg1);
    // Computing multiple Valid(s)
    assign SE_i_sub4_i_1_i9_add69_and0 = SE_i_unnamed_add68_V0;
    assign SE_i_sub4_i_1_i9_add69_and1 = SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_V0 & SE_i_sub4_i_1_i9_add69_and0;
    assign SE_i_sub4_i_1_i9_add69_wireValid = SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_V0 & SE_i_sub4_i_1_i9_add69_and1;

    // SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0(STALLENABLE,3734)
    // Valid signal propagation
    assign SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_V0 = SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_R_v_0;
    assign SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_V1 = SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_R_v_1;
    // Stall signal propagation
    assign SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_s_tv_0 = SE_i_sub4_i_1_i9_add69_backStall & SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_R_v_0;
    assign SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_s_tv_1 = SE_redist26_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_4_0_backStall & SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_R_v_1;
    // Backward Enable generation
    assign SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_or0 = SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_s_tv_0;
    assign SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_backEN = ~ (SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_s_tv_1 | SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_v_s_0 = SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_backEN & SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_V1;
    // Backward Stall generation
    assign SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_backStall = ~ (SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_R_v_0 <= 1'b0;
            SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_backEN == 1'b0)
            begin
                SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_R_v_0 <= SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_R_v_0 & SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_s_tv_0;
            end
            else
            begin
                SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_R_v_0 <= SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_v_s_0;
            end

            if (SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_backEN == 1'b0)
            begin
                SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_R_v_1 <= SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_R_v_1 & SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_s_tv_1;
            end
            else
            begin
                SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_R_v_1 <= SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_v_s_0;
            end

        end
    end

    // SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x(STALLENABLE,3213)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_fromReg0 <= '0;
            SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_fromReg0 <= SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_toReg0;
            // Successor 1
            SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_fromReg1 <= SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_toReg1;
        end
    end
    // Input Stall processing
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_consumed0 = (~ (SE_i_cmp3_i_1_i8_add67_backStall) & SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_wireValid) | SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_fromReg0;
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_consumed1 = (~ (SE_redist148_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_NO_NAME_x_q_1_0_backStall) & SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_wireValid) | SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_fromReg1;
    // Consuming
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_StallValid = SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_backStall & SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_wireValid;
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_toReg0 = SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_StallValid & SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_consumed0;
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_toReg1 = SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_StallValid & SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_consumed1;
    // Backward Stall generation
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_or0 = SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_consumed0;
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_wireStall = ~ (SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_consumed1 & SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_or0);
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_backStall = SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_wireStall;
    // Valid signal propagation
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_V0 = SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_wireValid & ~ (SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_fromReg0);
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_V1 = SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_wireValid & ~ (SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_fromReg1);
    // Computing multiple Valid(s)
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_and0 = SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_V0;
    assign SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_wireValid = SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_V0 & SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_and0;

    // SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1(STALLENABLE,3733)
    // Valid signal propagation
    assign SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_V0 = SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_R_v_0;
    assign SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_V1 = SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_R_v_1;
    // Stall signal propagation
    assign SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_s_tv_0 = SE_i_llvm_fpga_bit_shuffle_i32_s_s_in_entry_acl_soft_single_precision_fp_add_fpgaunique_1s_v32i32_or_i_1_shuffle_i7_add0_dsdk_ip_adapt_bitjoin1_x_backStall & SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_R_v_0;
    assign SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_s_tv_1 = SE_redist25_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_3_0_backStall & SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_R_v_1;
    // Backward Enable generation
    assign SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_or0 = SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_s_tv_0;
    assign SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_backEN = ~ (SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_s_tv_1 | SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_v_s_0 = SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_backEN & SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_V1;
    // Backward Stall generation
    assign SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_backStall = ~ (SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_R_v_0 <= 1'b0;
            SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_backEN == 1'b0)
            begin
                SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_R_v_0 <= SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_R_v_0 & SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_s_tv_0;
            end
            else
            begin
                SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_R_v_0 <= SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_v_s_0;
            end

            if (SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_backEN == 1'b0)
            begin
                SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_R_v_1 <= SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_R_v_1 & SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_s_tv_1;
            end
            else
            begin
                SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_R_v_1 <= SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_v_s_0;
            end

        end
    end

    // SE_i_unnamed_add62(STALLENABLE,3547)
    // Valid signal propagation
    assign SE_i_unnamed_add62_V0 = SE_i_unnamed_add62_wireValid;
    // Backward Stall generation
    assign SE_i_unnamed_add62_backStall = SE_redist184_bgTrunc_i_sub4_i_i3_add63_sel_x_b_1_0_backStall | ~ (SE_i_unnamed_add62_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_unnamed_add62_and0 = SE_i_cmp3_i_i2_add61_V0;
    assign SE_i_unnamed_add62_and1 = SE_redist63_i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0_1_0_V0 & SE_i_unnamed_add62_and0;
    assign SE_i_unnamed_add62_wireValid = SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_V0 & SE_i_unnamed_add62_and1;

    // SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0(STALLENABLE,3731)
    // Valid signal propagation
    assign SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_V0 = SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_R_v_0;
    assign SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_V1 = SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_R_v_1;
    // Stall signal propagation
    assign SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_s_tv_0 = SE_i_unnamed_add62_backStall & SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_R_v_0;
    assign SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_s_tv_1 = SE_redist24_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_2_1_backStall & SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_R_v_1;
    // Backward Enable generation
    assign SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_or0 = SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_s_tv_0;
    assign SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_backEN = ~ (SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_s_tv_1 | SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_v_s_0 = SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_backEN & SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_V3;
    // Backward Stall generation
    assign SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_backStall = ~ (SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_R_v_0 <= 1'b0;
            SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_backEN == 1'b0)
            begin
                SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_R_v_0 <= SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_R_v_0 & SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_s_tv_0;
            end
            else
            begin
                SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_R_v_0 <= SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_v_s_0;
            end

            if (SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_backEN == 1'b0)
            begin
                SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_R_v_1 <= SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_R_v_1 & SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_s_tv_1;
            end
            else
            begin
                SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_R_v_1 <= SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_v_s_0;
            end

        end
    end

    // SE_i_cmp3_i_i2_add61(STALLENABLE,3306)
    // Valid signal propagation
    assign SE_i_cmp3_i_i2_add61_V0 = SE_i_cmp3_i_i2_add61_R_v_0;
    // Stall signal propagation
    assign SE_i_cmp3_i_i2_add61_s_tv_0 = SE_i_unnamed_add62_backStall & SE_i_cmp3_i_i2_add61_R_v_0;
    // Backward Enable generation
    assign SE_i_cmp3_i_i2_add61_backEN = ~ (SE_i_cmp3_i_i2_add61_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_cmp3_i_i2_add61_and0 = SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_V2 & SE_i_cmp3_i_i2_add61_backEN;
    assign SE_i_cmp3_i_i2_add61_v_s_0 = SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_V0 & SE_i_cmp3_i_i2_add61_and0;
    // Backward Stall generation
    assign SE_i_cmp3_i_i2_add61_backStall = ~ (SE_i_cmp3_i_i2_add61_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_cmp3_i_i2_add61_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_cmp3_i_i2_add61_backEN == 1'b0)
            begin
                SE_i_cmp3_i_i2_add61_R_v_0 <= SE_i_cmp3_i_i2_add61_R_v_0 & SE_i_cmp3_i_i2_add61_s_tv_0;
            end
            else
            begin
                SE_i_cmp3_i_i2_add61_R_v_0 <= SE_i_cmp3_i_i2_add61_v_s_0;
            end

        end
    end

    // SE_out_i_llvm_fpga_ffwd_dest_i32_lm74369_add27(STALLENABLE,3363)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_V0 = SE_out_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_backStall = SE_i_acl_26_add248_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_and0 = i_llvm_fpga_ffwd_dest_i32_lm74369_add27_out_valid_out;
    assign SE_out_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_and1 = i_llvm_fpga_ffwd_dest_i1_cmp_i65109_add28_out_valid_out & SE_out_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_and0;
    assign SE_out_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_wireValid = SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_V1 & SE_out_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_and1;

    // SE_out_i_llvm_fpga_ffwd_dest_i32_lm72267_add29(STALLENABLE,3361)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_V0 = SE_out_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_backStall = SE_i_unnamed_add254_backStall | ~ (SE_out_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_and0 = i_llvm_fpga_ffwd_dest_i32_lm72267_add29_out_valid_out;
    assign SE_out_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_and1 = i_llvm_fpga_ffwd_dest_i1_cmp_i65108_add30_out_valid_out & SE_out_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_and0;
    assign SE_out_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_wireValid = SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_V0 & SE_out_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_and1;

    // SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49(STALLENABLE,3437)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_fromReg0 <= '0;
            SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_fromReg1 <= '0;
            SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_fromReg2 <= '0;
            SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_fromReg3 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_fromReg0 <= SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_toReg0;
            // Successor 1
            SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_fromReg1 <= SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_toReg1;
            // Successor 2
            SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_fromReg2 <= SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_toReg2;
            // Successor 3
            SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_fromReg3 <= SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_toReg3;
        end
    end
    // Input Stall processing
    assign SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_consumed0 = (~ (SE_out_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_backStall) & SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_wireValid) | SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_fromReg0;
    assign SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_consumed1 = (~ (SE_out_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_backStall) & SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_wireValid) | SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_fromReg1;
    assign SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_consumed2 = (~ (SE_i_cmp3_i_i2_add61_backStall) & SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_wireValid) | SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_fromReg2;
    assign SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_consumed3 = (~ (SE_redist23_i_shr_i_i1_add60_vt_join_q_1_0_backStall) & SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_wireValid) | SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_fromReg3;
    // Consuming
    assign SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_StallValid = SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_backStall & SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_wireValid;
    assign SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_toReg0 = SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_StallValid & SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_consumed0;
    assign SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_toReg1 = SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_StallValid & SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_consumed1;
    assign SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_toReg2 = SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_StallValid & SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_consumed2;
    assign SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_toReg3 = SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_StallValid & SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_consumed3;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_or0 = SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_consumed0;
    assign SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_or1 = SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_consumed1 & SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_or0;
    assign SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_or2 = SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_consumed2 & SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_or1;
    assign SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_wireStall = ~ (SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_consumed3 & SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_or2);
    assign SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_backStall = SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_wireStall;
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_V0 = SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_wireValid & ~ (SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_fromReg0);
    assign SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_V1 = SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_wireValid & ~ (SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_fromReg1);
    assign SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_V2 = SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_wireValid & ~ (SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_fromReg2);
    assign SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_V3 = SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_wireValid & ~ (SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_fromReg3);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_wireValid = i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_valid_out;

    // SE_out_i_llvm_fpga_push_i32_j_0440_push8_add240(STALLENABLE,3459)
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_push_i32_j_0440_push8_add240_backStall = $unsigned(1'b0);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_push_i32_j_0440_push8_add240_wireValid = i_llvm_fpga_push_i32_j_0440_push8_add240_out_valid_out;

    // i_llvm_fpga_push_i32_j_0440_push8_add240(BLACKBOX,467)@104
    // in in_stall_in@20000000
    // out out_data_out@105
    // out out_feedback_out_8@20000000
    // out out_feedback_valid_out_8@20000000
    // out out_stall_out@20000000
    // out out_valid_out@105
    add_i_llvm_fpga_push_i32_j_0440_push8_0 thei_llvm_fpga_push_i32_j_0440_push8_add240 (
        .in_data_in(bgTrunc_i_inc_add222_sel_x_b),
        .in_feedback_stall_in_8(i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_feedback_stall_out_8),
        .in_keep_going126(bubble_select_i_llvm_fpga_pipeline_keep_going126_add45_b),
        .in_stall_in(SE_out_i_llvm_fpga_push_i32_j_0440_push8_add240_backStall),
        .in_valid_in(SE_in_i_llvm_fpga_push_i32_j_0440_push8_add240_V0),
        .out_data_out(),
        .out_feedback_out_8(i_llvm_fpga_push_i32_j_0440_push8_add240_out_feedback_out_8),
        .out_feedback_valid_out_8(i_llvm_fpga_push_i32_j_0440_push8_add240_out_feedback_valid_out_8),
        .out_stall_out(i_llvm_fpga_push_i32_j_0440_push8_add240_out_stall_out),
        .out_valid_out(i_llvm_fpga_push_i32_j_0440_push8_add240_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // c_i32_0297(CONSTANT,322)
    assign c_i32_0297_q = $unsigned(32'b00000000000000000000000000000000);

    // i_llvm_fpga_pop_i32_j_0440_pop8_add49(BLACKBOX,456)@1
    // in in_stall_in@20000000
    // out out_data_out@2
    // out out_feedback_stall_out_8@20000000
    // out out_stall_out@20000000
    // out out_valid_out@2
    add_i_llvm_fpga_pop_i32_j_0440_pop8_0 thei_llvm_fpga_pop_i32_j_0440_pop8_add49 (
        .in_data_in(c_i32_0297_q),
        .in_dir(bubble_select_add_B8_merge_reg_aunroll_x_b),
        .in_feedback_in_8(i_llvm_fpga_push_i32_j_0440_push8_add240_out_feedback_out_8),
        .in_feedback_valid_in_8(i_llvm_fpga_push_i32_j_0440_push8_add240_out_feedback_valid_out_8),
        .in_predicate(GND_q),
        .in_stall_in(SE_out_i_llvm_fpga_pop_i32_j_0440_pop8_add49_backStall),
        .in_valid_in(SE_out_add_B8_merge_reg_aunroll_x_V44),
        .out_data_out(i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out),
        .out_feedback_stall_out_8(i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_feedback_stall_out_8),
        .out_stall_out(i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_stall_out),
        .out_valid_out(i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_44_reg(STALLFIFO,4418)
    assign bubble_out_add_B8_merge_reg_aunroll_x_44_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V43;
    assign bubble_out_add_B8_merge_reg_aunroll_x_44_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_44_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_44_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_44_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_44_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_44_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_44_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_44_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_44_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_44_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(154),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_44_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_44_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_44_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_44_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_44_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_43_reg(STALLFIFO,4417)
    assign bubble_out_add_B8_merge_reg_aunroll_x_43_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V42;
    assign bubble_out_add_B8_merge_reg_aunroll_x_43_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_43_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_43_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_43_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_43_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_43_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_43_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_43_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_43_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_43_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(154),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_43_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_43_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_43_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_43_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_43_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_42_reg(STALLFIFO,4416)
    assign bubble_out_add_B8_merge_reg_aunroll_x_42_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V41;
    assign bubble_out_add_B8_merge_reg_aunroll_x_42_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_42_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_42_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_42_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_42_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_42_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_42_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_42_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_42_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_42_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(154),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_42_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_42_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_42_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_42_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_42_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_41_reg(STALLFIFO,4415)
    assign bubble_out_add_B8_merge_reg_aunroll_x_41_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V40;
    assign bubble_out_add_B8_merge_reg_aunroll_x_41_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_41_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_41_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_41_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_41_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_41_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_41_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_41_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_41_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_41_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(122),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_41_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_41_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_41_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_41_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_41_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_40_reg(STALLFIFO,4414)
    assign bubble_out_add_B8_merge_reg_aunroll_x_40_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V39;
    assign bubble_out_add_B8_merge_reg_aunroll_x_40_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_40_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_40_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_40_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_40_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_40_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_40_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_40_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_40_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_40_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(154),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_40_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_40_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_40_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_40_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_40_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_39_reg(STALLFIFO,4413)
    assign bubble_out_add_B8_merge_reg_aunroll_x_39_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V38;
    assign bubble_out_add_B8_merge_reg_aunroll_x_39_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_39_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_39_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_39_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_39_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_39_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_39_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_39_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_39_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_39_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(122),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_39_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_39_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_39_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_39_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_39_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_36_reg(STALLFIFO,4412)
    assign bubble_out_add_B8_merge_reg_aunroll_x_36_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V37;
    assign bubble_out_add_B8_merge_reg_aunroll_x_36_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_36_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_36_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_36_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_36_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_36_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_36_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_36_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_36_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_36_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(49),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_36_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_36_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_36_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_36_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_36_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_35_reg(STALLFIFO,4411)
    assign bubble_out_add_B8_merge_reg_aunroll_x_35_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V36;
    assign bubble_out_add_B8_merge_reg_aunroll_x_35_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_35_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_35_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_35_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_35_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_35_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_35_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_35_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_35_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_35_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(51),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_35_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_35_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_35_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_35_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_35_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_33_reg(STALLFIFO,4410)
    assign bubble_out_add_B8_merge_reg_aunroll_x_33_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V35;
    assign bubble_out_add_B8_merge_reg_aunroll_x_33_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_33_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_33_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_33_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_33_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_33_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_33_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_33_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_33_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_33_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(52),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_33_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_33_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_33_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_33_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_33_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_32_reg(STALLFIFO,4409)
    assign bubble_out_add_B8_merge_reg_aunroll_x_32_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V34;
    assign bubble_out_add_B8_merge_reg_aunroll_x_32_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_32_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_32_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_32_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_32_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_32_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_32_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_32_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_32_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_32_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(51),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_32_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_32_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_32_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_32_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_32_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_27_reg(STALLFIFO,4408)
    assign bubble_out_add_B8_merge_reg_aunroll_x_27_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V33;
    assign bubble_out_add_B8_merge_reg_aunroll_x_27_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_27_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_27_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_27_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_27_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_27_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_27_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_27_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_27_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_27_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(52),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_27_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_27_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_27_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_27_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_27_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_26_reg(STALLFIFO,4407)
    assign bubble_out_add_B8_merge_reg_aunroll_x_26_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V32;
    assign bubble_out_add_B8_merge_reg_aunroll_x_26_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_26_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_26_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_26_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_26_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_26_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_26_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_26_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_26_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_26_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(154),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_26_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_26_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_26_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_26_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_26_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_25_reg(STALLFIFO,4406)
    assign bubble_out_add_B8_merge_reg_aunroll_x_25_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V31;
    assign bubble_out_add_B8_merge_reg_aunroll_x_25_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_25_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_25_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_25_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_25_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_25_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_25_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_25_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_25_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_25_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(154),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_25_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_25_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_25_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_25_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_25_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_24_reg(STALLFIFO,4405)
    assign bubble_out_add_B8_merge_reg_aunroll_x_24_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V30;
    assign bubble_out_add_B8_merge_reg_aunroll_x_24_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_24_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_24_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_24_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_24_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_24_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_24_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_24_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_24_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_24_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(47),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_24_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_24_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_24_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_24_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_24_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_23_reg(STALLFIFO,4404)
    assign bubble_out_add_B8_merge_reg_aunroll_x_23_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V29;
    assign bubble_out_add_B8_merge_reg_aunroll_x_23_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_23_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_23_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_23_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_23_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_23_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_23_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_23_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_23_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_23_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(49),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_23_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_23_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_23_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_23_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_23_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_21_reg(STALLFIFO,4403)
    assign bubble_out_add_B8_merge_reg_aunroll_x_21_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V28;
    assign bubble_out_add_B8_merge_reg_aunroll_x_21_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_21_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_21_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_21_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_21_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_21_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_21_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_21_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_21_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_21_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(52),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_21_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_21_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_21_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_21_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_21_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_20_reg(STALLFIFO,4402)
    assign bubble_out_add_B8_merge_reg_aunroll_x_20_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V27;
    assign bubble_out_add_B8_merge_reg_aunroll_x_20_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_20_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_20_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_20_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_20_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_20_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_20_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_20_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_20_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_20_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(51),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_20_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_20_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_20_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_20_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_20_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_19_reg(STALLFIFO,4401)
    assign bubble_out_add_B8_merge_reg_aunroll_x_19_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V26;
    assign bubble_out_add_B8_merge_reg_aunroll_x_19_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_19_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_19_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_19_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_19_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_19_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_19_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_19_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_19_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_19_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(52),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_19_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_19_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_19_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_19_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_19_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_17_reg(STALLFIFO,4400)
    assign bubble_out_add_B8_merge_reg_aunroll_x_17_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V25;
    assign bubble_out_add_B8_merge_reg_aunroll_x_17_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_17_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_17_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_17_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_17_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_17_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_17_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_17_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_17_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_17_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(154),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_17_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_17_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_17_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_17_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_17_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_16_reg(STALLFIFO,4399)
    assign bubble_out_add_B8_merge_reg_aunroll_x_16_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V24;
    assign bubble_out_add_B8_merge_reg_aunroll_x_16_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_16_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_16_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_16_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_16_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_16_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_16_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_16_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_16_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_16_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(20),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_16_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_16_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_16_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_16_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_16_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_15_reg(STALLFIFO,4398)
    assign bubble_out_add_B8_merge_reg_aunroll_x_15_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V23;
    assign bubble_out_add_B8_merge_reg_aunroll_x_15_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_15_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_15_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_15_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_15_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_15_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_15_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_15_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_15_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_15_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(154),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_15_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_15_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_15_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_15_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_15_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_bubble_out_add_B8_merge_reg_aunroll_x_14(STALLENABLE,3978)
    // Valid signal propagation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_14_V0 = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_14_wireValid;
    // Backward Stall generation
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_14_backStall = i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_out_stall_out | ~ (SE_out_bubble_out_add_B8_merge_reg_aunroll_x_14_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_bubble_out_add_B8_merge_reg_aunroll_x_14_wireValid = bubble_out_add_B8_merge_reg_aunroll_x_14_reg_valid_out;

    // bubble_out_add_B8_merge_reg_aunroll_x_14_reg(STALLFIFO,4397)
    assign bubble_out_add_B8_merge_reg_aunroll_x_14_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V22;
    assign bubble_out_add_B8_merge_reg_aunroll_x_14_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_14_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_14_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_14_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_14_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_14_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_14_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_14_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_14_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_14_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(20),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_14_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_14_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_14_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_14_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_14_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_12_reg(STALLFIFO,4396)
    assign bubble_out_add_B8_merge_reg_aunroll_x_12_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V21;
    assign bubble_out_add_B8_merge_reg_aunroll_x_12_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_12_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_12_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_12_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_12_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_12_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_12_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_12_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_12_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_12_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(53),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_12_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_12_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_12_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_12_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_12_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_11_reg(STALLFIFO,4395)
    assign bubble_out_add_B8_merge_reg_aunroll_x_11_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V20;
    assign bubble_out_add_B8_merge_reg_aunroll_x_11_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_11_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_11_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_11_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_11_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_11_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_11_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_11_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_11_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_11_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(154),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_11_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_11_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_11_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_11_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_11_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_10_reg(STALLFIFO,4394)
    assign bubble_out_add_B8_merge_reg_aunroll_x_10_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V19;
    assign bubble_out_add_B8_merge_reg_aunroll_x_10_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_10_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_10_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_10_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_10_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_10_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_10_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_10_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_10_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_10_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(154),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_10_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_10_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_10_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_10_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_10_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_9_reg(STALLFIFO,4393)
    assign bubble_out_add_B8_merge_reg_aunroll_x_9_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V18;
    assign bubble_out_add_B8_merge_reg_aunroll_x_9_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_9_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_9_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_9_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_9_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_9_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_9_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_9_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_9_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_9_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(49),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_9_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_9_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_9_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_9_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_9_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_8_reg(STALLFIFO,4392)
    assign bubble_out_add_B8_merge_reg_aunroll_x_8_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V17;
    assign bubble_out_add_B8_merge_reg_aunroll_x_8_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_8_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_8_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_8_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_8_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_8_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_8_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_8_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_8_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_8_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(51),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_8_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_8_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_8_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_8_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_8_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_6_reg(STALLFIFO,4391)
    assign bubble_out_add_B8_merge_reg_aunroll_x_6_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V16;
    assign bubble_out_add_B8_merge_reg_aunroll_x_6_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_6_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_6_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_6_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_6_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_6_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_6_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_6_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_6_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_6_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(52),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_6_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_6_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_6_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_6_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_6_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_5_reg(STALLFIFO,4390)
    assign bubble_out_add_B8_merge_reg_aunroll_x_5_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V15;
    assign bubble_out_add_B8_merge_reg_aunroll_x_5_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_5_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_5_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_5_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_5_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_5_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_5_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_5_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_5_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_5_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(51),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_5_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_5_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_5_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_5_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_5_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_4_reg(STALLFIFO,4389)
    assign bubble_out_add_B8_merge_reg_aunroll_x_4_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V14;
    assign bubble_out_add_B8_merge_reg_aunroll_x_4_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_4_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_4_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_4_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_4_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_4_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_4_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_4_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_4_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_4_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(52),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_4_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_4_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_4_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_4_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_4_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_2_reg(STALLFIFO,4388)
    assign bubble_out_add_B8_merge_reg_aunroll_x_2_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V13;
    assign bubble_out_add_B8_merge_reg_aunroll_x_2_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_2_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_2_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_2_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_2_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_2_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_2_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_2_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_2_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_2_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(52),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_2_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_2_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_2_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_2_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_2_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_out_add_B8_merge_reg_aunroll_x_1_reg(STALLFIFO,4387)
    assign bubble_out_add_B8_merge_reg_aunroll_x_1_reg_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V12;
    assign bubble_out_add_B8_merge_reg_aunroll_x_1_reg_stall_in = SE_out_bubble_out_add_B8_merge_reg_aunroll_x_1_backStall;
    assign bubble_out_add_B8_merge_reg_aunroll_x_1_reg_valid_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_1_reg_valid_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_1_reg_stall_in_bitsignaltemp = bubble_out_add_B8_merge_reg_aunroll_x_1_reg_stall_in[0];
    assign bubble_out_add_B8_merge_reg_aunroll_x_1_reg_valid_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_1_reg_valid_out_bitsignaltemp;
    assign bubble_out_add_B8_merge_reg_aunroll_x_1_reg_stall_out[0] = bubble_out_add_B8_merge_reg_aunroll_x_1_reg_stall_out_bitsignaltemp;
    acl_valid_fifo_counter #(
        .DEPTH(52),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .ASYNC_RESET(1)
    ) thebubble_out_add_B8_merge_reg_aunroll_x_1_reg (
        .valid_in(bubble_out_add_B8_merge_reg_aunroll_x_1_reg_valid_in_bitsignaltemp),
        .stall_in(bubble_out_add_B8_merge_reg_aunroll_x_1_reg_stall_in_bitsignaltemp),
        .valid_out(bubble_out_add_B8_merge_reg_aunroll_x_1_reg_valid_out_bitsignaltemp),
        .stall_out(bubble_out_add_B8_merge_reg_aunroll_x_1_reg_stall_out_bitsignaltemp),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_ffwd_dest_i32_select6359_add12(BLACKBOX,423)@1
    // in in_stall_in@20000000
    // out out_dest_data_out_12_0@2
    // out out_stall_out@20000000
    // out out_valid_out@2
    add_i_llvm_fpga_ffwd_dest_i32_select6359_0 thei_llvm_fpga_ffwd_dest_i32_select6359_add12 (
        .in_intel_reserved_ffwd_12_0(in_intel_reserved_ffwd_12_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i32_select6359_add12_backStall),
        .in_valid_in(SE_out_add_B8_merge_reg_aunroll_x_V11),
        .out_dest_data_out_12_0(i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_dest_data_out_12_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_ffwd_dest_i32_lm74369_add27(BLACKBOX,419)@1
    // in in_stall_in@20000000
    // out out_dest_data_out_17_0@2
    // out out_stall_out@20000000
    // out out_valid_out@2
    add_i_llvm_fpga_ffwd_dest_i32_lm74369_0 thei_llvm_fpga_ffwd_dest_i32_lm74369_add27 (
        .in_intel_reserved_ffwd_17_0(in_intel_reserved_ffwd_17_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_backStall),
        .in_valid_in(SE_out_add_B8_merge_reg_aunroll_x_V10),
        .out_dest_data_out_17_0(i_llvm_fpga_ffwd_dest_i32_lm74369_add27_out_dest_data_out_17_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i32_lm74369_add27_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i32_lm74369_add27_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_ffwd_dest_i32_lm72267_add29(BLACKBOX,418)@1
    // in in_stall_in@20000000
    // out out_dest_data_out_16_0@2
    // out out_stall_out@20000000
    // out out_valid_out@2
    add_i_llvm_fpga_ffwd_dest_i32_lm72267_0 thei_llvm_fpga_ffwd_dest_i32_lm72267_add29 (
        .in_intel_reserved_ffwd_16_0(in_intel_reserved_ffwd_16_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_backStall),
        .in_valid_in(SE_out_add_B8_merge_reg_aunroll_x_V9),
        .out_dest_data_out_16_0(i_llvm_fpga_ffwd_dest_i32_lm72267_add29_out_dest_data_out_16_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i32_lm72267_add29_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i32_lm72267_add29_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37(BLACKBOX,414)@1
    // in in_stall_in@20000000
    // out out_dest_data_out_35_0@2
    // out out_stall_out@20000000
    // out out_valid_out@2
    add_i_llvm_fpga_ffwd_dest_i1_unnamed_71_add0 thei_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37 (
        .in_intel_reserved_ffwd_35_0(in_intel_reserved_ffwd_35_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_backStall),
        .in_valid_in(SE_out_add_B8_merge_reg_aunroll_x_V8),
        .out_dest_data_out_35_0(i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2(BLACKBOX,409)@1
    // in in_stall_in@20000000
    // out out_dest_data_out_3_0@2
    // out out_stall_out@20000000
    // out out_valid_out@2
    add_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_0 thei_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2 (
        .in_intel_reserved_ffwd_3_0(in_intel_reserved_ffwd_3_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_backStall),
        .in_valid_in(SE_out_add_B8_merge_reg_aunroll_x_V7),
        .out_dest_data_out_3_0(i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6(STALLENABLE,3341)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_V0 = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_backStall = redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_stall_out | ~ (SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_wireValid = i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_valid_out;

    // i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6(BLACKBOX,408)@1
    // in in_stall_in@20000000
    // out out_dest_data_out_3_0@2
    // out out_stall_out@20000000
    // out out_valid_out@2
    add_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_0 thei_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6 (
        .in_intel_reserved_ffwd_3_0(in_intel_reserved_ffwd_3_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_backStall),
        .in_valid_in(SE_out_add_B8_merge_reg_aunroll_x_V6),
        .out_dest_data_out_3_0(i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17(BLACKBOX,404)@1
    // in in_stall_in@20000000
    // out out_dest_data_out_8_0@2
    // out out_stall_out@20000000
    // out out_valid_out@2
    add_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_0 thei_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17 (
        .in_intel_reserved_ffwd_8_0(in_intel_reserved_ffwd_8_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_backStall),
        .in_valid_in(SE_out_add_B8_merge_reg_aunroll_x_V5),
        .out_dest_data_out_8_0(i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21(BLACKBOX,403)@1
    // in in_stall_in@20000000
    // out out_dest_data_out_8_0@2
    // out out_stall_out@20000000
    // out out_valid_out@2
    add_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_0 thei_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21 (
        .in_intel_reserved_ffwd_8_0(in_intel_reserved_ffwd_8_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_backStall),
        .in_valid_in(SE_out_add_B8_merge_reg_aunroll_x_V4),
        .out_dest_data_out_8_0(i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_dest_data_out_8_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33(BLACKBOX,399)@1
    // in in_stall_in@20000000
    // out out_dest_data_out_15_0@2
    // out out_stall_out@20000000
    // out out_valid_out@2
    add_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_0 thei_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33 (
        .in_intel_reserved_ffwd_15_0(in_intel_reserved_ffwd_15_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_backStall),
        .in_valid_in(SE_out_add_B8_merge_reg_aunroll_x_V3),
        .out_dest_data_out_15_0(i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_out_dest_data_out_15_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36(BLACKBOX,398)@1
    // in in_stall_in@20000000
    // out out_dest_data_out_15_0@2
    // out out_stall_out@20000000
    // out out_valid_out@2
    add_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_0 thei_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36 (
        .in_intel_reserved_ffwd_15_0(in_intel_reserved_ffwd_15_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_backStall),
        .in_valid_in(SE_out_add_B8_merge_reg_aunroll_x_V2),
        .out_dest_data_out_15_0(i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_out_dest_data_out_15_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_ffwd_dest_i1_cmp_i65109_add28(BLACKBOX,397)@1
    // in in_stall_in@20000000
    // out out_dest_data_out_39_0@2
    // out out_stall_out@20000000
    // out out_valid_out@2
    add_i_llvm_fpga_ffwd_dest_i1_cmp_i65109_0 thei_llvm_fpga_ffwd_dest_i1_cmp_i65109_add28 (
        .in_intel_reserved_ffwd_39_0(in_intel_reserved_ffwd_39_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i32_lm74369_add27_backStall),
        .in_valid_in(SE_out_add_B8_merge_reg_aunroll_x_V1),
        .out_dest_data_out_39_0(i_llvm_fpga_ffwd_dest_i1_cmp_i65109_add28_out_dest_data_out_39_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i1_cmp_i65109_add28_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i1_cmp_i65109_add28_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_ffwd_dest_i1_cmp_i65108_add30(BLACKBOX,396)@1
    // in in_stall_in@20000000
    // out out_dest_data_out_39_0@2
    // out out_stall_out@20000000
    // out out_valid_out@2
    add_i_llvm_fpga_ffwd_dest_i1_cmp_i65108_0 thei_llvm_fpga_ffwd_dest_i1_cmp_i65108_add30 (
        .in_intel_reserved_ffwd_39_0(in_intel_reserved_ffwd_39_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_backStall),
        .in_valid_in(SE_out_add_B8_merge_reg_aunroll_x_V0),
        .out_dest_data_out_39_0(i_llvm_fpga_ffwd_dest_i1_cmp_i65108_add30_out_dest_data_out_39_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_i1_cmp_i65108_add30_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_i1_cmp_i65108_add30_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_add_B8_merge_reg_aunroll_x(STALLENABLE,3096)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_add_B8_merge_reg_aunroll_x_fromReg0 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg1 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg2 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg3 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg4 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg5 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg6 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg7 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg8 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg9 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg10 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg11 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg12 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg13 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg14 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg15 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg16 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg17 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg18 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg19 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg20 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg21 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg22 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg23 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg24 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg25 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg26 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg27 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg28 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg29 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg30 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg31 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg32 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg33 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg34 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg35 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg36 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg37 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg38 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg39 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg40 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg41 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg42 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg43 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg44 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg45 <= '0;
            SE_out_add_B8_merge_reg_aunroll_x_fromReg46 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_add_B8_merge_reg_aunroll_x_fromReg0 <= SE_out_add_B8_merge_reg_aunroll_x_toReg0;
            // Successor 1
            SE_out_add_B8_merge_reg_aunroll_x_fromReg1 <= SE_out_add_B8_merge_reg_aunroll_x_toReg1;
            // Successor 2
            SE_out_add_B8_merge_reg_aunroll_x_fromReg2 <= SE_out_add_B8_merge_reg_aunroll_x_toReg2;
            // Successor 3
            SE_out_add_B8_merge_reg_aunroll_x_fromReg3 <= SE_out_add_B8_merge_reg_aunroll_x_toReg3;
            // Successor 4
            SE_out_add_B8_merge_reg_aunroll_x_fromReg4 <= SE_out_add_B8_merge_reg_aunroll_x_toReg4;
            // Successor 5
            SE_out_add_B8_merge_reg_aunroll_x_fromReg5 <= SE_out_add_B8_merge_reg_aunroll_x_toReg5;
            // Successor 6
            SE_out_add_B8_merge_reg_aunroll_x_fromReg6 <= SE_out_add_B8_merge_reg_aunroll_x_toReg6;
            // Successor 7
            SE_out_add_B8_merge_reg_aunroll_x_fromReg7 <= SE_out_add_B8_merge_reg_aunroll_x_toReg7;
            // Successor 8
            SE_out_add_B8_merge_reg_aunroll_x_fromReg8 <= SE_out_add_B8_merge_reg_aunroll_x_toReg8;
            // Successor 9
            SE_out_add_B8_merge_reg_aunroll_x_fromReg9 <= SE_out_add_B8_merge_reg_aunroll_x_toReg9;
            // Successor 10
            SE_out_add_B8_merge_reg_aunroll_x_fromReg10 <= SE_out_add_B8_merge_reg_aunroll_x_toReg10;
            // Successor 11
            SE_out_add_B8_merge_reg_aunroll_x_fromReg11 <= SE_out_add_B8_merge_reg_aunroll_x_toReg11;
            // Successor 12
            SE_out_add_B8_merge_reg_aunroll_x_fromReg12 <= SE_out_add_B8_merge_reg_aunroll_x_toReg12;
            // Successor 13
            SE_out_add_B8_merge_reg_aunroll_x_fromReg13 <= SE_out_add_B8_merge_reg_aunroll_x_toReg13;
            // Successor 14
            SE_out_add_B8_merge_reg_aunroll_x_fromReg14 <= SE_out_add_B8_merge_reg_aunroll_x_toReg14;
            // Successor 15
            SE_out_add_B8_merge_reg_aunroll_x_fromReg15 <= SE_out_add_B8_merge_reg_aunroll_x_toReg15;
            // Successor 16
            SE_out_add_B8_merge_reg_aunroll_x_fromReg16 <= SE_out_add_B8_merge_reg_aunroll_x_toReg16;
            // Successor 17
            SE_out_add_B8_merge_reg_aunroll_x_fromReg17 <= SE_out_add_B8_merge_reg_aunroll_x_toReg17;
            // Successor 18
            SE_out_add_B8_merge_reg_aunroll_x_fromReg18 <= SE_out_add_B8_merge_reg_aunroll_x_toReg18;
            // Successor 19
            SE_out_add_B8_merge_reg_aunroll_x_fromReg19 <= SE_out_add_B8_merge_reg_aunroll_x_toReg19;
            // Successor 20
            SE_out_add_B8_merge_reg_aunroll_x_fromReg20 <= SE_out_add_B8_merge_reg_aunroll_x_toReg20;
            // Successor 21
            SE_out_add_B8_merge_reg_aunroll_x_fromReg21 <= SE_out_add_B8_merge_reg_aunroll_x_toReg21;
            // Successor 22
            SE_out_add_B8_merge_reg_aunroll_x_fromReg22 <= SE_out_add_B8_merge_reg_aunroll_x_toReg22;
            // Successor 23
            SE_out_add_B8_merge_reg_aunroll_x_fromReg23 <= SE_out_add_B8_merge_reg_aunroll_x_toReg23;
            // Successor 24
            SE_out_add_B8_merge_reg_aunroll_x_fromReg24 <= SE_out_add_B8_merge_reg_aunroll_x_toReg24;
            // Successor 25
            SE_out_add_B8_merge_reg_aunroll_x_fromReg25 <= SE_out_add_B8_merge_reg_aunroll_x_toReg25;
            // Successor 26
            SE_out_add_B8_merge_reg_aunroll_x_fromReg26 <= SE_out_add_B8_merge_reg_aunroll_x_toReg26;
            // Successor 27
            SE_out_add_B8_merge_reg_aunroll_x_fromReg27 <= SE_out_add_B8_merge_reg_aunroll_x_toReg27;
            // Successor 28
            SE_out_add_B8_merge_reg_aunroll_x_fromReg28 <= SE_out_add_B8_merge_reg_aunroll_x_toReg28;
            // Successor 29
            SE_out_add_B8_merge_reg_aunroll_x_fromReg29 <= SE_out_add_B8_merge_reg_aunroll_x_toReg29;
            // Successor 30
            SE_out_add_B8_merge_reg_aunroll_x_fromReg30 <= SE_out_add_B8_merge_reg_aunroll_x_toReg30;
            // Successor 31
            SE_out_add_B8_merge_reg_aunroll_x_fromReg31 <= SE_out_add_B8_merge_reg_aunroll_x_toReg31;
            // Successor 32
            SE_out_add_B8_merge_reg_aunroll_x_fromReg32 <= SE_out_add_B8_merge_reg_aunroll_x_toReg32;
            // Successor 33
            SE_out_add_B8_merge_reg_aunroll_x_fromReg33 <= SE_out_add_B8_merge_reg_aunroll_x_toReg33;
            // Successor 34
            SE_out_add_B8_merge_reg_aunroll_x_fromReg34 <= SE_out_add_B8_merge_reg_aunroll_x_toReg34;
            // Successor 35
            SE_out_add_B8_merge_reg_aunroll_x_fromReg35 <= SE_out_add_B8_merge_reg_aunroll_x_toReg35;
            // Successor 36
            SE_out_add_B8_merge_reg_aunroll_x_fromReg36 <= SE_out_add_B8_merge_reg_aunroll_x_toReg36;
            // Successor 37
            SE_out_add_B8_merge_reg_aunroll_x_fromReg37 <= SE_out_add_B8_merge_reg_aunroll_x_toReg37;
            // Successor 38
            SE_out_add_B8_merge_reg_aunroll_x_fromReg38 <= SE_out_add_B8_merge_reg_aunroll_x_toReg38;
            // Successor 39
            SE_out_add_B8_merge_reg_aunroll_x_fromReg39 <= SE_out_add_B8_merge_reg_aunroll_x_toReg39;
            // Successor 40
            SE_out_add_B8_merge_reg_aunroll_x_fromReg40 <= SE_out_add_B8_merge_reg_aunroll_x_toReg40;
            // Successor 41
            SE_out_add_B8_merge_reg_aunroll_x_fromReg41 <= SE_out_add_B8_merge_reg_aunroll_x_toReg41;
            // Successor 42
            SE_out_add_B8_merge_reg_aunroll_x_fromReg42 <= SE_out_add_B8_merge_reg_aunroll_x_toReg42;
            // Successor 43
            SE_out_add_B8_merge_reg_aunroll_x_fromReg43 <= SE_out_add_B8_merge_reg_aunroll_x_toReg43;
            // Successor 44
            SE_out_add_B8_merge_reg_aunroll_x_fromReg44 <= SE_out_add_B8_merge_reg_aunroll_x_toReg44;
            // Successor 45
            SE_out_add_B8_merge_reg_aunroll_x_fromReg45 <= SE_out_add_B8_merge_reg_aunroll_x_toReg45;
            // Successor 46
            SE_out_add_B8_merge_reg_aunroll_x_fromReg46 <= SE_out_add_B8_merge_reg_aunroll_x_toReg46;
        end
    end
    // Input Stall processing
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed0 = (~ (i_llvm_fpga_ffwd_dest_i1_cmp_i65108_add30_out_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg0;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed1 = (~ (i_llvm_fpga_ffwd_dest_i1_cmp_i65109_add28_out_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg1;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed2 = (~ (i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_out_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg2;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed3 = (~ (i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i065_add33_out_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg3;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed4 = (~ (i_llvm_fpga_ffwd_dest_i1_tobool_i30_i54_add21_out_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg4;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed5 = (~ (i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg5;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed6 = (~ (i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg6;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed7 = (~ (i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg7;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed8 = (~ (i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg8;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed9 = (~ (i_llvm_fpga_ffwd_dest_i32_lm72267_add29_out_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg9;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed10 = (~ (i_llvm_fpga_ffwd_dest_i32_lm74369_add27_out_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg10;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed11 = (~ (i_llvm_fpga_ffwd_dest_i32_select6359_add12_out_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg11;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed12 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_1_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg12;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed13 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_2_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg13;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed14 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_4_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg14;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed15 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_5_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg15;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed16 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_6_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg16;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed17 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_8_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg17;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed18 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_9_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg18;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed19 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_10_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg19;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed20 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_11_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg20;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed21 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_12_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg21;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed22 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_14_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg22;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed23 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_15_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg23;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed24 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_16_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg24;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed25 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_17_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg25;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed26 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_19_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg26;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed27 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_20_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg27;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed28 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_21_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg28;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed29 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_23_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg29;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed30 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_24_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg30;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed31 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_25_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg31;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed32 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_26_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg32;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed33 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_27_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg33;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed34 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_32_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg34;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed35 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_33_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg35;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed36 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_35_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg36;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed37 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_36_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg37;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed38 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_39_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg38;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed39 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_40_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg39;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed40 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_41_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg40;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed41 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_42_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg41;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed42 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_43_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg42;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed43 = (~ (bubble_out_add_B8_merge_reg_aunroll_x_44_reg_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg43;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed44 = (~ (i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg44;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed45 = (~ (redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg45;
    assign SE_out_add_B8_merge_reg_aunroll_x_consumed46 = (~ (redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_stall_out) & SE_out_add_B8_merge_reg_aunroll_x_wireValid) | SE_out_add_B8_merge_reg_aunroll_x_fromReg46;
    // Consuming
    assign SE_out_add_B8_merge_reg_aunroll_x_StallValid = SE_out_add_B8_merge_reg_aunroll_x_backStall & SE_out_add_B8_merge_reg_aunroll_x_wireValid;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg0 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed0;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg1 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed1;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg2 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed2;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg3 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed3;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg4 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed4;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg5 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed5;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg6 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed6;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg7 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed7;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg8 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed8;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg9 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed9;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg10 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed10;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg11 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed11;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg12 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed12;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg13 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed13;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg14 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed14;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg15 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed15;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg16 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed16;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg17 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed17;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg18 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed18;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg19 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed19;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg20 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed20;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg21 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed21;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg22 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed22;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg23 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed23;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg24 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed24;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg25 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed25;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg26 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed26;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg27 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed27;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg28 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed28;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg29 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed29;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg30 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed30;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg31 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed31;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg32 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed32;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg33 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed33;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg34 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed34;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg35 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed35;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg36 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed36;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg37 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed37;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg38 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed38;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg39 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed39;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg40 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed40;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg41 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed41;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg42 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed42;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg43 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed43;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg44 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed44;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg45 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed45;
    assign SE_out_add_B8_merge_reg_aunroll_x_toReg46 = SE_out_add_B8_merge_reg_aunroll_x_StallValid & SE_out_add_B8_merge_reg_aunroll_x_consumed46;
    // Backward Stall generation
    assign SE_out_add_B8_merge_reg_aunroll_x_or0 = SE_out_add_B8_merge_reg_aunroll_x_consumed0;
    assign SE_out_add_B8_merge_reg_aunroll_x_or1 = SE_out_add_B8_merge_reg_aunroll_x_consumed1 & SE_out_add_B8_merge_reg_aunroll_x_or0;
    assign SE_out_add_B8_merge_reg_aunroll_x_or2 = SE_out_add_B8_merge_reg_aunroll_x_consumed2 & SE_out_add_B8_merge_reg_aunroll_x_or1;
    assign SE_out_add_B8_merge_reg_aunroll_x_or3 = SE_out_add_B8_merge_reg_aunroll_x_consumed3 & SE_out_add_B8_merge_reg_aunroll_x_or2;
    assign SE_out_add_B8_merge_reg_aunroll_x_or4 = SE_out_add_B8_merge_reg_aunroll_x_consumed4 & SE_out_add_B8_merge_reg_aunroll_x_or3;
    assign SE_out_add_B8_merge_reg_aunroll_x_or5 = SE_out_add_B8_merge_reg_aunroll_x_consumed5 & SE_out_add_B8_merge_reg_aunroll_x_or4;
    assign SE_out_add_B8_merge_reg_aunroll_x_or6 = SE_out_add_B8_merge_reg_aunroll_x_consumed6 & SE_out_add_B8_merge_reg_aunroll_x_or5;
    assign SE_out_add_B8_merge_reg_aunroll_x_or7 = SE_out_add_B8_merge_reg_aunroll_x_consumed7 & SE_out_add_B8_merge_reg_aunroll_x_or6;
    assign SE_out_add_B8_merge_reg_aunroll_x_or8 = SE_out_add_B8_merge_reg_aunroll_x_consumed8 & SE_out_add_B8_merge_reg_aunroll_x_or7;
    assign SE_out_add_B8_merge_reg_aunroll_x_or9 = SE_out_add_B8_merge_reg_aunroll_x_consumed9 & SE_out_add_B8_merge_reg_aunroll_x_or8;
    assign SE_out_add_B8_merge_reg_aunroll_x_or10 = SE_out_add_B8_merge_reg_aunroll_x_consumed10 & SE_out_add_B8_merge_reg_aunroll_x_or9;
    assign SE_out_add_B8_merge_reg_aunroll_x_or11 = SE_out_add_B8_merge_reg_aunroll_x_consumed11 & SE_out_add_B8_merge_reg_aunroll_x_or10;
    assign SE_out_add_B8_merge_reg_aunroll_x_or12 = SE_out_add_B8_merge_reg_aunroll_x_consumed12 & SE_out_add_B8_merge_reg_aunroll_x_or11;
    assign SE_out_add_B8_merge_reg_aunroll_x_or13 = SE_out_add_B8_merge_reg_aunroll_x_consumed13 & SE_out_add_B8_merge_reg_aunroll_x_or12;
    assign SE_out_add_B8_merge_reg_aunroll_x_or14 = SE_out_add_B8_merge_reg_aunroll_x_consumed14 & SE_out_add_B8_merge_reg_aunroll_x_or13;
    assign SE_out_add_B8_merge_reg_aunroll_x_or15 = SE_out_add_B8_merge_reg_aunroll_x_consumed15 & SE_out_add_B8_merge_reg_aunroll_x_or14;
    assign SE_out_add_B8_merge_reg_aunroll_x_or16 = SE_out_add_B8_merge_reg_aunroll_x_consumed16 & SE_out_add_B8_merge_reg_aunroll_x_or15;
    assign SE_out_add_B8_merge_reg_aunroll_x_or17 = SE_out_add_B8_merge_reg_aunroll_x_consumed17 & SE_out_add_B8_merge_reg_aunroll_x_or16;
    assign SE_out_add_B8_merge_reg_aunroll_x_or18 = SE_out_add_B8_merge_reg_aunroll_x_consumed18 & SE_out_add_B8_merge_reg_aunroll_x_or17;
    assign SE_out_add_B8_merge_reg_aunroll_x_or19 = SE_out_add_B8_merge_reg_aunroll_x_consumed19 & SE_out_add_B8_merge_reg_aunroll_x_or18;
    assign SE_out_add_B8_merge_reg_aunroll_x_or20 = SE_out_add_B8_merge_reg_aunroll_x_consumed20 & SE_out_add_B8_merge_reg_aunroll_x_or19;
    assign SE_out_add_B8_merge_reg_aunroll_x_or21 = SE_out_add_B8_merge_reg_aunroll_x_consumed21 & SE_out_add_B8_merge_reg_aunroll_x_or20;
    assign SE_out_add_B8_merge_reg_aunroll_x_or22 = SE_out_add_B8_merge_reg_aunroll_x_consumed22 & SE_out_add_B8_merge_reg_aunroll_x_or21;
    assign SE_out_add_B8_merge_reg_aunroll_x_or23 = SE_out_add_B8_merge_reg_aunroll_x_consumed23 & SE_out_add_B8_merge_reg_aunroll_x_or22;
    assign SE_out_add_B8_merge_reg_aunroll_x_or24 = SE_out_add_B8_merge_reg_aunroll_x_consumed24 & SE_out_add_B8_merge_reg_aunroll_x_or23;
    assign SE_out_add_B8_merge_reg_aunroll_x_or25 = SE_out_add_B8_merge_reg_aunroll_x_consumed25 & SE_out_add_B8_merge_reg_aunroll_x_or24;
    assign SE_out_add_B8_merge_reg_aunroll_x_or26 = SE_out_add_B8_merge_reg_aunroll_x_consumed26 & SE_out_add_B8_merge_reg_aunroll_x_or25;
    assign SE_out_add_B8_merge_reg_aunroll_x_or27 = SE_out_add_B8_merge_reg_aunroll_x_consumed27 & SE_out_add_B8_merge_reg_aunroll_x_or26;
    assign SE_out_add_B8_merge_reg_aunroll_x_or28 = SE_out_add_B8_merge_reg_aunroll_x_consumed28 & SE_out_add_B8_merge_reg_aunroll_x_or27;
    assign SE_out_add_B8_merge_reg_aunroll_x_or29 = SE_out_add_B8_merge_reg_aunroll_x_consumed29 & SE_out_add_B8_merge_reg_aunroll_x_or28;
    assign SE_out_add_B8_merge_reg_aunroll_x_or30 = SE_out_add_B8_merge_reg_aunroll_x_consumed30 & SE_out_add_B8_merge_reg_aunroll_x_or29;
    assign SE_out_add_B8_merge_reg_aunroll_x_or31 = SE_out_add_B8_merge_reg_aunroll_x_consumed31 & SE_out_add_B8_merge_reg_aunroll_x_or30;
    assign SE_out_add_B8_merge_reg_aunroll_x_or32 = SE_out_add_B8_merge_reg_aunroll_x_consumed32 & SE_out_add_B8_merge_reg_aunroll_x_or31;
    assign SE_out_add_B8_merge_reg_aunroll_x_or33 = SE_out_add_B8_merge_reg_aunroll_x_consumed33 & SE_out_add_B8_merge_reg_aunroll_x_or32;
    assign SE_out_add_B8_merge_reg_aunroll_x_or34 = SE_out_add_B8_merge_reg_aunroll_x_consumed34 & SE_out_add_B8_merge_reg_aunroll_x_or33;
    assign SE_out_add_B8_merge_reg_aunroll_x_or35 = SE_out_add_B8_merge_reg_aunroll_x_consumed35 & SE_out_add_B8_merge_reg_aunroll_x_or34;
    assign SE_out_add_B8_merge_reg_aunroll_x_or36 = SE_out_add_B8_merge_reg_aunroll_x_consumed36 & SE_out_add_B8_merge_reg_aunroll_x_or35;
    assign SE_out_add_B8_merge_reg_aunroll_x_or37 = SE_out_add_B8_merge_reg_aunroll_x_consumed37 & SE_out_add_B8_merge_reg_aunroll_x_or36;
    assign SE_out_add_B8_merge_reg_aunroll_x_or38 = SE_out_add_B8_merge_reg_aunroll_x_consumed38 & SE_out_add_B8_merge_reg_aunroll_x_or37;
    assign SE_out_add_B8_merge_reg_aunroll_x_or39 = SE_out_add_B8_merge_reg_aunroll_x_consumed39 & SE_out_add_B8_merge_reg_aunroll_x_or38;
    assign SE_out_add_B8_merge_reg_aunroll_x_or40 = SE_out_add_B8_merge_reg_aunroll_x_consumed40 & SE_out_add_B8_merge_reg_aunroll_x_or39;
    assign SE_out_add_B8_merge_reg_aunroll_x_or41 = SE_out_add_B8_merge_reg_aunroll_x_consumed41 & SE_out_add_B8_merge_reg_aunroll_x_or40;
    assign SE_out_add_B8_merge_reg_aunroll_x_or42 = SE_out_add_B8_merge_reg_aunroll_x_consumed42 & SE_out_add_B8_merge_reg_aunroll_x_or41;
    assign SE_out_add_B8_merge_reg_aunroll_x_or43 = SE_out_add_B8_merge_reg_aunroll_x_consumed43 & SE_out_add_B8_merge_reg_aunroll_x_or42;
    assign SE_out_add_B8_merge_reg_aunroll_x_or44 = SE_out_add_B8_merge_reg_aunroll_x_consumed44 & SE_out_add_B8_merge_reg_aunroll_x_or43;
    assign SE_out_add_B8_merge_reg_aunroll_x_or45 = SE_out_add_B8_merge_reg_aunroll_x_consumed45 & SE_out_add_B8_merge_reg_aunroll_x_or44;
    assign SE_out_add_B8_merge_reg_aunroll_x_wireStall = ~ (SE_out_add_B8_merge_reg_aunroll_x_consumed46 & SE_out_add_B8_merge_reg_aunroll_x_or45);
    assign SE_out_add_B8_merge_reg_aunroll_x_backStall = SE_out_add_B8_merge_reg_aunroll_x_wireStall;
    // Valid signal propagation
    assign SE_out_add_B8_merge_reg_aunroll_x_V0 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg0);
    assign SE_out_add_B8_merge_reg_aunroll_x_V1 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg1);
    assign SE_out_add_B8_merge_reg_aunroll_x_V2 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg2);
    assign SE_out_add_B8_merge_reg_aunroll_x_V3 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg3);
    assign SE_out_add_B8_merge_reg_aunroll_x_V4 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg4);
    assign SE_out_add_B8_merge_reg_aunroll_x_V5 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg5);
    assign SE_out_add_B8_merge_reg_aunroll_x_V6 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg6);
    assign SE_out_add_B8_merge_reg_aunroll_x_V7 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg7);
    assign SE_out_add_B8_merge_reg_aunroll_x_V8 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg8);
    assign SE_out_add_B8_merge_reg_aunroll_x_V9 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg9);
    assign SE_out_add_B8_merge_reg_aunroll_x_V10 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg10);
    assign SE_out_add_B8_merge_reg_aunroll_x_V11 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg11);
    assign SE_out_add_B8_merge_reg_aunroll_x_V12 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg12);
    assign SE_out_add_B8_merge_reg_aunroll_x_V13 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg13);
    assign SE_out_add_B8_merge_reg_aunroll_x_V14 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg14);
    assign SE_out_add_B8_merge_reg_aunroll_x_V15 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg15);
    assign SE_out_add_B8_merge_reg_aunroll_x_V16 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg16);
    assign SE_out_add_B8_merge_reg_aunroll_x_V17 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg17);
    assign SE_out_add_B8_merge_reg_aunroll_x_V18 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg18);
    assign SE_out_add_B8_merge_reg_aunroll_x_V19 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg19);
    assign SE_out_add_B8_merge_reg_aunroll_x_V20 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg20);
    assign SE_out_add_B8_merge_reg_aunroll_x_V21 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg21);
    assign SE_out_add_B8_merge_reg_aunroll_x_V22 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg22);
    assign SE_out_add_B8_merge_reg_aunroll_x_V23 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg23);
    assign SE_out_add_B8_merge_reg_aunroll_x_V24 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg24);
    assign SE_out_add_B8_merge_reg_aunroll_x_V25 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg25);
    assign SE_out_add_B8_merge_reg_aunroll_x_V26 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg26);
    assign SE_out_add_B8_merge_reg_aunroll_x_V27 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg27);
    assign SE_out_add_B8_merge_reg_aunroll_x_V28 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg28);
    assign SE_out_add_B8_merge_reg_aunroll_x_V29 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg29);
    assign SE_out_add_B8_merge_reg_aunroll_x_V30 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg30);
    assign SE_out_add_B8_merge_reg_aunroll_x_V31 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg31);
    assign SE_out_add_B8_merge_reg_aunroll_x_V32 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg32);
    assign SE_out_add_B8_merge_reg_aunroll_x_V33 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg33);
    assign SE_out_add_B8_merge_reg_aunroll_x_V34 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg34);
    assign SE_out_add_B8_merge_reg_aunroll_x_V35 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg35);
    assign SE_out_add_B8_merge_reg_aunroll_x_V36 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg36);
    assign SE_out_add_B8_merge_reg_aunroll_x_V37 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg37);
    assign SE_out_add_B8_merge_reg_aunroll_x_V38 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg38);
    assign SE_out_add_B8_merge_reg_aunroll_x_V39 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg39);
    assign SE_out_add_B8_merge_reg_aunroll_x_V40 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg40);
    assign SE_out_add_B8_merge_reg_aunroll_x_V41 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg41);
    assign SE_out_add_B8_merge_reg_aunroll_x_V42 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg42);
    assign SE_out_add_B8_merge_reg_aunroll_x_V43 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg43);
    assign SE_out_add_B8_merge_reg_aunroll_x_V44 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg44);
    assign SE_out_add_B8_merge_reg_aunroll_x_V45 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg45);
    assign SE_out_add_B8_merge_reg_aunroll_x_V46 = SE_out_add_B8_merge_reg_aunroll_x_wireValid & ~ (SE_out_add_B8_merge_reg_aunroll_x_fromReg46);
    // Computing multiple Valid(s)
    assign SE_out_add_B8_merge_reg_aunroll_x_wireValid = add_B8_merge_reg_aunroll_x_out_valid_out;

    // redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo(STALLFIFO,2788)
    assign redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_valid_in = SE_out_add_B8_merge_reg_aunroll_x_V45;
    assign redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_stall_in = SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_backStall;
    assign redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_data_in = bubble_select_add_B8_merge_reg_aunroll_x_b;
    assign redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_valid_in_bitsignaltemp = redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_valid_in[0];
    assign redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_stall_in_bitsignaltemp = redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_stall_in[0];
    assign redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_valid_out[0] = redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_valid_out_bitsignaltemp;
    assign redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_stall_out[0] = redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(20),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(1),
        .IMPL("ram")
    ) theredist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo (
        .valid_in(redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_valid_in_bitsignaltemp),
        .stall_in(redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_stall_in_bitsignaltemp),
        .data_in(bubble_select_add_B8_merge_reg_aunroll_x_b),
        .valid_out(redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_valid_out_bitsignaltemp),
        .stall_out(redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_stall_out_bitsignaltemp),
        .data_out(redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo(BITJOIN,3078)
    assign bubble_join_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_q = redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_data_out;

    // bubble_select_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo(BITSELECT,3079)
    assign bubble_select_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_b = $unsigned(bubble_join_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_q[0:0]);

    // SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo(STALLENABLE,3935)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_fromReg0 <= '0;
            SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_fromReg0 <= SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_toReg0;
            // Successor 1
            SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_fromReg1 <= SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_toReg1;
        end
    end
    // Input Stall processing
    assign SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_consumed0 = (~ (i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_stall_out) & SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_wireValid) | SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_fromReg0;
    assign SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_consumed1 = (~ (redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_stall_out) & SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_wireValid) | SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_fromReg1;
    // Consuming
    assign SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_StallValid = SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_backStall & SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_wireValid;
    assign SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_toReg0 = SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_StallValid & SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_consumed0;
    assign SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_toReg1 = SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_StallValid & SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_consumed1;
    // Backward Stall generation
    assign SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_or0 = SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_consumed0;
    assign SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_wireStall = ~ (SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_consumed1 & SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_or0);
    assign SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_backStall = SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_wireStall;
    // Valid signal propagation
    assign SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_V0 = SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_wireValid & ~ (SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_fromReg0);
    assign SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_V1 = SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_wireValid & ~ (SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_fromReg1);
    // Computing multiple Valid(s)
    assign SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_wireValid = redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_valid_out;

    // redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo(STALLFIFO,2789)
    assign redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_valid_in = SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_V1;
    assign redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_stall_in = SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_backStall;
    assign redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_data_in = bubble_select_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_b;
    assign redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_valid_in_bitsignaltemp = redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_valid_in[0];
    assign redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_stall_in_bitsignaltemp = redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_stall_in[0];
    assign redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_valid_out[0] = redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_valid_out_bitsignaltemp;
    assign redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_stall_out[0] = redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(33),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(1),
        .IMPL("ram")
    ) theredist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo (
        .valid_in(redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_valid_in_bitsignaltemp),
        .stall_in(redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_stall_in_bitsignaltemp),
        .data_in(bubble_select_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_b),
        .valid_out(redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_valid_out_bitsignaltemp),
        .stall_out(redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_stall_out_bitsignaltemp),
        .data_out(redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo(BITJOIN,3081)
    assign bubble_join_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_q = redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_data_out;

    // bubble_select_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo(BITSELECT,3082)
    assign bubble_select_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_b = $unsigned(bubble_join_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_q[0:0]);

    // SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo(STALLENABLE,3937)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_fromReg0 <= '0;
            SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_fromReg1 <= '0;
            SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_fromReg2 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_fromReg0 <= SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_toReg0;
            // Successor 1
            SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_fromReg1 <= SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_toReg1;
            // Successor 2
            SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_fromReg2 <= SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_toReg2;
        end
    end
    // Input Stall processing
    assign SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_consumed0 = (~ (SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_backStall) & SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_wireValid) | SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_fromReg0;
    assign SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_consumed1 = (~ (i_llvm_fpga_pop_i32_pop6_add47_out_stall_out) & SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_wireValid) | SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_fromReg1;
    assign SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_consumed2 = (~ (i_llvm_fpga_pop_i32_pop7_add48_out_stall_out) & SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_wireValid) | SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_fromReg2;
    // Consuming
    assign SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_StallValid = SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_backStall & SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_wireValid;
    assign SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_toReg0 = SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_StallValid & SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_consumed0;
    assign SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_toReg1 = SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_StallValid & SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_consumed1;
    assign SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_toReg2 = SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_StallValid & SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_consumed2;
    // Backward Stall generation
    assign SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_or0 = SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_consumed0;
    assign SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_or1 = SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_consumed1 & SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_or0;
    assign SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_wireStall = ~ (SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_consumed2 & SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_or1);
    assign SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_backStall = SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_wireStall;
    // Valid signal propagation
    assign SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_V0 = SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_wireValid & ~ (SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_fromReg0);
    assign SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_V1 = SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_wireValid & ~ (SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_fromReg1);
    assign SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_V2 = SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_wireValid & ~ (SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_fromReg2);
    // Computing multiple Valid(s)
    assign SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_wireValid = redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_valid_out;

    // SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0(STALLREG,4434)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_r_valid <= 1'b0;
            SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_r_data0 <= 1'bx;
        end
        else
        begin
            // Valid
            SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_r_valid <= SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_backStall & (SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_r_valid | SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_i_valid);

            if (SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_r_data0 <= $unsigned(bubble_select_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_b);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_i_valid = SE_out_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_V0;
    // Stall signal propagation
    assign SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_backStall = SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_r_valid | ~ (SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_i_valid);

    // Valid
    assign SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_V = SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_r_valid == 1'b1 ? SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_r_valid : SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_i_valid;

    assign SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_D0 = SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_r_valid == 1'b1 ? SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_r_data0 : bubble_select_redist189_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_51_fifo_b;

    // redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0(REG,2790)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_q <= $unsigned(1'b0);
        end
        else if (SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_backEN == 1'b1)
        begin
            redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_q <= $unsigned(SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_D0);
        end
    end

    // SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0(STALLENABLE,3938)
    // Valid signal propagation
    assign SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_V0 = SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_R_v_0;
    assign SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_V1 = SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_R_v_1;
    assign SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_V2 = SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_R_v_2;
    // Stall signal propagation
    assign SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_s_tv_0 = SE_out_i_llvm_fpga_pop_i32_pop7_add48_backStall & SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_R_v_0;
    assign SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_s_tv_1 = SE_out_i_llvm_fpga_pop_i32_pop6_add47_backStall & SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_R_v_1;
    assign SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_s_tv_2 = redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_stall_out & SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_R_v_2;
    // Backward Enable generation
    assign SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_or0 = SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_s_tv_0;
    assign SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_or1 = SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_s_tv_1 | SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_or0;
    assign SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_backEN = ~ (SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_s_tv_2 | SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_or1);
    // Determine whether to write valid data into the first register stage
    assign SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_v_s_0 = SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_backEN & SR_SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_V;
    // Backward Stall generation
    assign SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_backStall = ~ (SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_R_v_0 <= 1'b0;
            SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_R_v_1 <= 1'b0;
            SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_R_v_2 <= 1'b0;
        end
        else
        begin
            if (SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_backEN == 1'b0)
            begin
                SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_R_v_0 <= SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_R_v_0 & SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_s_tv_0;
            end
            else
            begin
                SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_R_v_0 <= SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_v_s_0;
            end

            if (SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_backEN == 1'b0)
            begin
                SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_R_v_1 <= SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_R_v_1 & SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_s_tv_1;
            end
            else
            begin
                SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_R_v_1 <= SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_v_s_0;
            end

            if (SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_backEN == 1'b0)
            begin
                SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_R_v_2 <= SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_R_v_2 & SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_s_tv_2;
            end
            else
            begin
                SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_R_v_2 <= SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_v_s_0;
            end

        end
    end

    // redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo(STALLFIFO,2791)
    assign redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_valid_in = SE_redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_V2;
    assign redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_stall_in = SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_backStall;
    assign redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_data_in = redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_q;
    assign redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_valid_in_bitsignaltemp = redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_valid_in[0];
    assign redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_stall_in_bitsignaltemp = redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_stall_in[0];
    assign redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_valid_out[0] = redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_valid_out_bitsignaltemp;
    assign redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_stall_out[0] = redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(39),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(1),
        .IMPL("ram")
    ) theredist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo (
        .valid_in(redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_valid_in_bitsignaltemp),
        .stall_in(redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_stall_in_bitsignaltemp),
        .data_in(redist190_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_52_0_q),
        .valid_out(redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_valid_out_bitsignaltemp),
        .stall_out(redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_stall_out_bitsignaltemp),
        .data_out(redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo(STALLENABLE,3940)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_fromReg0 <= '0;
            SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_fromReg1 <= '0;
            SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_fromReg2 <= '0;
            SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_fromReg3 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_fromReg0 <= SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_toReg0;
            // Successor 1
            SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_fromReg1 <= SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_toReg1;
            // Successor 2
            SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_fromReg2 <= SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_toReg2;
            // Successor 3
            SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_fromReg3 <= SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_toReg3;
        end
    end
    // Input Stall processing
    assign SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_consumed0 = (~ (i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_stall_out) & SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_wireValid) | SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_fromReg0;
    assign SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_consumed1 = (~ (i_llvm_fpga_pop_i1_memdep_phi18_pop10_add51_out_stall_out) & SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_wireValid) | SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_fromReg1;
    assign SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_consumed2 = (~ (i_llvm_fpga_pop_i1_memdep_phi19_pop11_add52_out_stall_out) & SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_wireValid) | SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_fromReg2;
    assign SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_consumed3 = (~ (redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_stall_out) & SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_wireValid) | SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_fromReg3;
    // Consuming
    assign SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_StallValid = SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_backStall & SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_wireValid;
    assign SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_toReg0 = SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_StallValid & SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_consumed0;
    assign SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_toReg1 = SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_StallValid & SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_consumed1;
    assign SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_toReg2 = SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_StallValid & SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_consumed2;
    assign SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_toReg3 = SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_StallValid & SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_consumed3;
    // Backward Stall generation
    assign SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_or0 = SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_consumed0;
    assign SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_or1 = SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_consumed1 & SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_or0;
    assign SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_or2 = SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_consumed2 & SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_or1;
    assign SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_wireStall = ~ (SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_consumed3 & SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_or2);
    assign SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_backStall = SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_wireStall;
    // Valid signal propagation
    assign SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_V0 = SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_wireValid & ~ (SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_fromReg0);
    assign SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_V1 = SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_wireValid & ~ (SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_fromReg1);
    assign SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_V2 = SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_wireValid & ~ (SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_fromReg2);
    assign SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_V3 = SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_wireValid & ~ (SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_fromReg3);
    // Computing multiple Valid(s)
    assign SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_wireValid = redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_valid_out;

    // bubble_join_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo(BITJOIN,3084)
    assign bubble_join_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_q = redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_data_out;

    // bubble_select_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo(BITSELECT,3085)
    assign bubble_select_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_b = $unsigned(bubble_join_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_q[0:0]);

    // i_llvm_fpga_pop_i17_cleanups129_pop13_add44(BLACKBOX,450)@91
    // in in_stall_in@20000000
    // out out_data_out@92
    // out out_feedback_stall_out_13@20000000
    // out out_stall_out@20000000
    // out out_valid_out@92
    add_i_llvm_fpga_pop_i17_cleanups129_pop13_0 thei_llvm_fpga_pop_i17_cleanups129_pop13_add44 (
        .in_data_in(c_i17_65535294_q),
        .in_dir(bubble_select_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_b),
        .in_feedback_in_13(i_llvm_fpga_push_i17_cleanups129_push13_add293_out_feedback_out_13),
        .in_feedback_valid_in_13(i_llvm_fpga_push_i17_cleanups129_push13_add293_out_feedback_valid_out_13),
        .in_predicate(GND_q),
        .in_stall_in(SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_backStall),
        .in_valid_in(SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_V0),
        .out_data_out(i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out),
        .out_feedback_stall_out_13(i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_feedback_stall_out_13),
        .out_stall_out(i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_stall_out),
        .out_valid_out(i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // leftShiftStage0Idx1Rng1_uid902_i_cleanups_shl130_add0_shift_x(BITSELECT,901)@156
    assign leftShiftStage0Idx1Rng1_uid902_i_cleanups_shl130_add0_shift_x_in = bubble_select_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_b[15:0];
    assign leftShiftStage0Idx1Rng1_uid902_i_cleanups_shl130_add0_shift_x_b = leftShiftStage0Idx1Rng1_uid902_i_cleanups_shl130_add0_shift_x_in[15:0];

    // leftShiftStage0Idx1_uid903_i_cleanups_shl130_add0_shift_x(BITJOIN,902)@156
    assign leftShiftStage0Idx1_uid903_i_cleanups_shl130_add0_shift_x_q = {leftShiftStage0Idx1Rng1_uid902_i_cleanups_shl130_add0_shift_x_b, GND_q};

    // leftShiftStage0_uid905_i_cleanups_shl130_add0_shift_x(MUX,904)@156
    assign leftShiftStage0_uid905_i_cleanups_shl130_add0_shift_x_s = VCC_q;
    always @(leftShiftStage0_uid905_i_cleanups_shl130_add0_shift_x_s or bubble_select_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_b or leftShiftStage0Idx1_uid903_i_cleanups_shl130_add0_shift_x_q)
    begin
        unique case (leftShiftStage0_uid905_i_cleanups_shl130_add0_shift_x_s)
            1'b0 : leftShiftStage0_uid905_i_cleanups_shl130_add0_shift_x_q = bubble_select_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_b;
            1'b1 : leftShiftStage0_uid905_i_cleanups_shl130_add0_shift_x_q = leftShiftStage0Idx1_uid903_i_cleanups_shl130_add0_shift_x_q;
            default : leftShiftStage0_uid905_i_cleanups_shl130_add0_shift_x_q = 17'b0;
        endcase
    end

    // i_cleanups_shl130_add55_vt_select_16(BITSELECT,341)@156
    assign i_cleanups_shl130_add55_vt_select_16_b = leftShiftStage0_uid905_i_cleanups_shl130_add0_shift_x_q[16:1];

    // i_cleanups_shl130_add55_vt_join(BITJOIN,340)@156
    assign i_cleanups_shl130_add55_vt_join_q = {i_cleanups_shl130_add55_vt_select_16_b, GND_q};

    // bubble_join_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo(BITJOIN,3042)
    assign bubble_join_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_q = redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_data_out;

    // bubble_select_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo(BITSELECT,3043)
    assign bubble_select_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_b = $unsigned(bubble_join_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_q[16:0]);

    // i_or133_add290(LOGICAL,479)@155 + 1
    assign i_or133_add290_qi = SR_SE_i_or133_add290_D0 | SR_SE_i_or133_add290_D1;
    dspba_delay_ver #( .width(1), .depth(1), .reset_kind("ASYNC"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_or133_add290_delay ( .xin(i_or133_add290_qi), .xout(i_or133_add290_q), .ena(SE_i_or133_add290_backEN[0]), .clk(clock), .aclr(resetn) );

    // i_next_cleanups134_add292(MUX,474)@156
    assign i_next_cleanups134_add292_s = i_or133_add290_q;
    always @(i_next_cleanups134_add292_s or bubble_select_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_b or i_cleanups_shl130_add55_vt_join_q)
    begin
        unique case (i_next_cleanups134_add292_s)
            1'b0 : i_next_cleanups134_add292_q = bubble_select_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_b;
            1'b1 : i_next_cleanups134_add292_q = i_cleanups_shl130_add55_vt_join_q;
            default : i_next_cleanups134_add292_q = 17'b0;
        endcase
    end

    // i_llvm_fpga_push_i17_cleanups129_push13_add293(BLACKBOX,459)@156
    // in in_stall_in@20000000
    // out out_data_out@157
    // out out_feedback_out_13@20000000
    // out out_feedback_valid_out_13@20000000
    // out out_stall_out@20000000
    // out out_valid_out@157
    add_i_llvm_fpga_push_i17_cleanups129_push13_0 thei_llvm_fpga_push_i17_cleanups129_push13_add293 (
        .in_data_in(i_next_cleanups134_add292_q),
        .in_feedback_stall_in_13(i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_feedback_stall_out_13),
        .in_keep_going126(redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_q),
        .in_stall_in(SE_out_i_llvm_fpga_push_i17_cleanups129_push13_add293_backStall),
        .in_valid_in(SE_out_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_V0),
        .out_data_out(),
        .out_feedback_out_13(i_llvm_fpga_push_i17_cleanups129_push13_add293_out_feedback_out_13),
        .out_feedback_valid_out_13(i_llvm_fpga_push_i17_cleanups129_push13_add293_out_feedback_valid_out_13),
        .out_stall_out(i_llvm_fpga_push_i17_cleanups129_push13_add293_out_stall_out),
        .out_valid_out(i_llvm_fpga_push_i17_cleanups129_push13_add293_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_i_or133_add290(STALLENABLE,3470)
    // Valid signal propagation
    assign SE_i_or133_add290_V0 = SE_i_or133_add290_R_v_0;
    // Stall signal propagation
    assign SE_i_or133_add290_s_tv_0 = SE_out_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_backStall & SE_i_or133_add290_R_v_0;
    // Backward Enable generation
    assign SE_i_or133_add290_backEN = ~ (SE_i_or133_add290_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_or133_add290_v_s_0 = SE_i_or133_add290_backEN & SR_SE_i_or133_add290_V;
    // Backward Stall generation
    assign SE_i_or133_add290_backStall = ~ (SE_i_or133_add290_backEN);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_or133_add290_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_i_or133_add290_backEN == 1'b0)
            begin
                SE_i_or133_add290_R_v_0 <= SE_i_or133_add290_R_v_0 & SE_i_or133_add290_s_tv_0;
            end
            else
            begin
                SE_i_or133_add290_R_v_0 <= SE_i_or133_add290_v_s_0;
            end

        end
    end

    // redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo(STALLFIFO,2653)
    assign redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_valid_in = SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_V0;
    assign redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_stall_in = SE_out_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_backStall;
    assign redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_data_in = bubble_select_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_b;
    assign redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_valid_in_bitsignaltemp = redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_valid_in[0];
    assign redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_stall_in_bitsignaltemp = redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_stall_in[0];
    assign redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_valid_out[0] = redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_valid_out_bitsignaltemp;
    assign redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_stall_out[0] = redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(65),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(17),
        .IMPL("ram")
    ) theredist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo (
        .valid_in(redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_valid_in_bitsignaltemp),
        .stall_in(redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_stall_in_bitsignaltemp),
        .data_in(bubble_select_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_b),
        .valid_out(redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_valid_out_bitsignaltemp),
        .stall_out(redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_stall_out_bitsignaltemp),
        .data_out(redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo(STALLENABLE,3788)
    // Valid signal propagation
    assign SE_out_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_V0 = SE_out_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_wireValid;
    // Backward Stall generation
    assign SE_out_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_backStall = i_llvm_fpga_push_i17_cleanups129_push13_add293_out_stall_out | ~ (SE_out_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_and0 = redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_valid_out;
    assign SE_out_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_and1 = SE_i_or133_add290_V0 & SE_out_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_and0;
    assign SE_out_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_wireValid = SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_V0 & SE_out_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_and1;

    // SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0(STALLENABLE,3793)
    // Valid signal propagation
    assign SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_V0 = SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_R_v_0;
    // Stall signal propagation
    assign SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_s_tv_0 = SE_out_redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_backStall & SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_R_v_0;
    // Backward Enable generation
    assign SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_backEN = ~ (SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_v_s_0 = SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_backEN & SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_V4;
    // Backward Stall generation
    assign SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_backStall = ~ (SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_backEN == 1'b0)
            begin
                SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_R_v_0 <= SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_R_v_0 & SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_s_tv_0;
            end
            else
            begin
                SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_R_v_0 <= SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_v_s_0;
            end

        end
    end

    // SE_in_i_llvm_fpga_push_i32_inc35145_push14_add226(STALLENABLE,3456)
    // Valid signal propagation
    assign SE_in_i_llvm_fpga_push_i32_inc35145_push14_add226_V0 = SE_in_i_llvm_fpga_push_i32_inc35145_push14_add226_wireValid;
    // Backward Stall generation
    assign SE_in_i_llvm_fpga_push_i32_inc35145_push14_add226_backStall = i_llvm_fpga_push_i32_inc35145_push14_add226_out_stall_out | ~ (SE_in_i_llvm_fpga_push_i32_inc35145_push14_add226_wireValid);
    // Computing multiple Valid(s)
    assign SE_in_i_llvm_fpga_push_i32_inc35145_push14_add226_and0 = SE_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_V1;
    assign SE_in_i_llvm_fpga_push_i32_inc35145_push14_add226_wireValid = SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_V3 & SE_in_i_llvm_fpga_push_i32_inc35145_push14_add226_and0;

    // SE_out_i_llvm_fpga_push_i1_memdep_phi19_push11_add285(STALLENABLE,3453)
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_push_i1_memdep_phi19_push11_add285_backStall = $unsigned(1'b0);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_push_i1_memdep_phi19_push11_add285_wireValid = i_llvm_fpga_push_i1_memdep_phi19_push11_add285_out_valid_out;

    // i_lm13413_toi1_intcast_add281_sel_x(BITSELECT,274)@155
    assign i_lm13413_toi1_intcast_add281_sel_x_b = bubble_select_i_llvm_fpga_mem_lm13413_add276_b[0:0];

    // i_llvm_fpga_push_i1_memdep_phi19_push11_add285(BLACKBOX,464)@155
    // in in_stall_in@20000000
    // out out_data_out@156
    // out out_feedback_out_11@20000000
    // out out_feedback_valid_out_11@20000000
    // out out_stall_out@20000000
    // out out_valid_out@156
    add_i_llvm_fpga_push_i1_memdep_phi19_push11_0 thei_llvm_fpga_push_i1_memdep_phi19_push11_add285 (
        .in_data_in(i_lm13413_toi1_intcast_add281_sel_x_b),
        .in_feedback_stall_in_11(i_llvm_fpga_pop_i1_memdep_phi19_pop11_add52_out_feedback_stall_out_11),
        .in_keep_going126(bubble_select_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_b),
        .in_stall_in(SE_out_i_llvm_fpga_push_i1_memdep_phi19_push11_add285_backStall),
        .in_valid_in(SE_i_lm13413_toi1_intcast_add281_sel_x_V0),
        .out_data_out(),
        .out_feedback_out_11(i_llvm_fpga_push_i1_memdep_phi19_push11_add285_out_feedback_out_11),
        .out_feedback_valid_out_11(i_llvm_fpga_push_i1_memdep_phi19_push11_add285_out_feedback_valid_out_11),
        .out_stall_out(i_llvm_fpga_push_i1_memdep_phi19_push11_add285_out_stall_out),
        .out_valid_out(i_llvm_fpga_push_i1_memdep_phi19_push11_add285_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_i_lm13413_toi1_intcast_add281_sel_x(STALLENABLE,3255)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_lm13413_toi1_intcast_add281_sel_x_fromReg0 <= '0;
            SE_i_lm13413_toi1_intcast_add281_sel_x_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_i_lm13413_toi1_intcast_add281_sel_x_fromReg0 <= SE_i_lm13413_toi1_intcast_add281_sel_x_toReg0;
            // Successor 1
            SE_i_lm13413_toi1_intcast_add281_sel_x_fromReg1 <= SE_i_lm13413_toi1_intcast_add281_sel_x_toReg1;
        end
    end
    // Input Stall processing
    assign SE_i_lm13413_toi1_intcast_add281_sel_x_consumed0 = (~ (i_llvm_fpga_push_i1_memdep_phi19_push11_add285_out_stall_out) & SE_i_lm13413_toi1_intcast_add281_sel_x_wireValid) | SE_i_lm13413_toi1_intcast_add281_sel_x_fromReg0;
    assign SE_i_lm13413_toi1_intcast_add281_sel_x_consumed1 = (~ (i_llvm_fpga_push_i32_push6_add280_out_stall_out) & SE_i_lm13413_toi1_intcast_add281_sel_x_wireValid) | SE_i_lm13413_toi1_intcast_add281_sel_x_fromReg1;
    // Consuming
    assign SE_i_lm13413_toi1_intcast_add281_sel_x_StallValid = SE_i_lm13413_toi1_intcast_add281_sel_x_backStall & SE_i_lm13413_toi1_intcast_add281_sel_x_wireValid;
    assign SE_i_lm13413_toi1_intcast_add281_sel_x_toReg0 = SE_i_lm13413_toi1_intcast_add281_sel_x_StallValid & SE_i_lm13413_toi1_intcast_add281_sel_x_consumed0;
    assign SE_i_lm13413_toi1_intcast_add281_sel_x_toReg1 = SE_i_lm13413_toi1_intcast_add281_sel_x_StallValid & SE_i_lm13413_toi1_intcast_add281_sel_x_consumed1;
    // Backward Stall generation
    assign SE_i_lm13413_toi1_intcast_add281_sel_x_or0 = SE_i_lm13413_toi1_intcast_add281_sel_x_consumed0;
    assign SE_i_lm13413_toi1_intcast_add281_sel_x_wireStall = ~ (SE_i_lm13413_toi1_intcast_add281_sel_x_consumed1 & SE_i_lm13413_toi1_intcast_add281_sel_x_or0);
    assign SE_i_lm13413_toi1_intcast_add281_sel_x_backStall = SE_i_lm13413_toi1_intcast_add281_sel_x_wireStall;
    // Valid signal propagation
    assign SE_i_lm13413_toi1_intcast_add281_sel_x_V0 = SE_i_lm13413_toi1_intcast_add281_sel_x_wireValid & ~ (SE_i_lm13413_toi1_intcast_add281_sel_x_fromReg0);
    assign SE_i_lm13413_toi1_intcast_add281_sel_x_V1 = SE_i_lm13413_toi1_intcast_add281_sel_x_wireValid & ~ (SE_i_lm13413_toi1_intcast_add281_sel_x_fromReg1);
    // Computing multiple Valid(s)
    assign SE_i_lm13413_toi1_intcast_add281_sel_x_and0 = SE_out_i_llvm_fpga_mem_lm13413_add276_V0;
    assign SE_i_lm13413_toi1_intcast_add281_sel_x_wireValid = SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_V2 & SE_i_lm13413_toi1_intcast_add281_sel_x_and0;

    // SE_out_i_llvm_fpga_push_i1_memdep_phi18_push10_add284(STALLENABLE,3451)
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_push_i1_memdep_phi18_push10_add284_backStall = $unsigned(1'b0);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_push_i1_memdep_phi18_push10_add284_wireValid = i_llvm_fpga_push_i1_memdep_phi18_push10_add284_out_valid_out;

    // i_lm13212_toi1_intcast_add278_sel_x(BITSELECT,273)@155
    assign i_lm13212_toi1_intcast_add278_sel_x_b = bubble_select_i_llvm_fpga_mem_lm13212_add275_b[0:0];

    // i_llvm_fpga_push_i1_memdep_phi18_push10_add284(BLACKBOX,463)@155
    // in in_stall_in@20000000
    // out out_data_out@156
    // out out_feedback_out_10@20000000
    // out out_feedback_valid_out_10@20000000
    // out out_stall_out@20000000
    // out out_valid_out@156
    add_i_llvm_fpga_push_i1_memdep_phi18_push10_0 thei_llvm_fpga_push_i1_memdep_phi18_push10_add284 (
        .in_data_in(i_lm13212_toi1_intcast_add278_sel_x_b),
        .in_feedback_stall_in_10(i_llvm_fpga_pop_i1_memdep_phi18_pop10_add51_out_feedback_stall_out_10),
        .in_keep_going126(bubble_select_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_b),
        .in_stall_in(SE_out_i_llvm_fpga_push_i1_memdep_phi18_push10_add284_backStall),
        .in_valid_in(SE_i_lm13212_toi1_intcast_add278_sel_x_V0),
        .out_data_out(),
        .out_feedback_out_10(i_llvm_fpga_push_i1_memdep_phi18_push10_add284_out_feedback_out_10),
        .out_feedback_valid_out_10(i_llvm_fpga_push_i1_memdep_phi18_push10_add284_out_feedback_valid_out_10),
        .out_stall_out(i_llvm_fpga_push_i1_memdep_phi18_push10_add284_out_stall_out),
        .out_valid_out(i_llvm_fpga_push_i1_memdep_phi18_push10_add284_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_i_lm13212_toi1_intcast_add278_sel_x(STALLENABLE,3254)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_lm13212_toi1_intcast_add278_sel_x_fromReg0 <= '0;
            SE_i_lm13212_toi1_intcast_add278_sel_x_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_i_lm13212_toi1_intcast_add278_sel_x_fromReg0 <= SE_i_lm13212_toi1_intcast_add278_sel_x_toReg0;
            // Successor 1
            SE_i_lm13212_toi1_intcast_add278_sel_x_fromReg1 <= SE_i_lm13212_toi1_intcast_add278_sel_x_toReg1;
        end
    end
    // Input Stall processing
    assign SE_i_lm13212_toi1_intcast_add278_sel_x_consumed0 = (~ (i_llvm_fpga_push_i1_memdep_phi18_push10_add284_out_stall_out) & SE_i_lm13212_toi1_intcast_add278_sel_x_wireValid) | SE_i_lm13212_toi1_intcast_add278_sel_x_fromReg0;
    assign SE_i_lm13212_toi1_intcast_add278_sel_x_consumed1 = (~ (i_llvm_fpga_push_i32_push7_add277_out_stall_out) & SE_i_lm13212_toi1_intcast_add278_sel_x_wireValid) | SE_i_lm13212_toi1_intcast_add278_sel_x_fromReg1;
    // Consuming
    assign SE_i_lm13212_toi1_intcast_add278_sel_x_StallValid = SE_i_lm13212_toi1_intcast_add278_sel_x_backStall & SE_i_lm13212_toi1_intcast_add278_sel_x_wireValid;
    assign SE_i_lm13212_toi1_intcast_add278_sel_x_toReg0 = SE_i_lm13212_toi1_intcast_add278_sel_x_StallValid & SE_i_lm13212_toi1_intcast_add278_sel_x_consumed0;
    assign SE_i_lm13212_toi1_intcast_add278_sel_x_toReg1 = SE_i_lm13212_toi1_intcast_add278_sel_x_StallValid & SE_i_lm13212_toi1_intcast_add278_sel_x_consumed1;
    // Backward Stall generation
    assign SE_i_lm13212_toi1_intcast_add278_sel_x_or0 = SE_i_lm13212_toi1_intcast_add278_sel_x_consumed0;
    assign SE_i_lm13212_toi1_intcast_add278_sel_x_wireStall = ~ (SE_i_lm13212_toi1_intcast_add278_sel_x_consumed1 & SE_i_lm13212_toi1_intcast_add278_sel_x_or0);
    assign SE_i_lm13212_toi1_intcast_add278_sel_x_backStall = SE_i_lm13212_toi1_intcast_add278_sel_x_wireStall;
    // Valid signal propagation
    assign SE_i_lm13212_toi1_intcast_add278_sel_x_V0 = SE_i_lm13212_toi1_intcast_add278_sel_x_wireValid & ~ (SE_i_lm13212_toi1_intcast_add278_sel_x_fromReg0);
    assign SE_i_lm13212_toi1_intcast_add278_sel_x_V1 = SE_i_lm13212_toi1_intcast_add278_sel_x_wireValid & ~ (SE_i_lm13212_toi1_intcast_add278_sel_x_fromReg1);
    // Computing multiple Valid(s)
    assign SE_i_lm13212_toi1_intcast_add278_sel_x_and0 = SE_out_i_llvm_fpga_mem_lm13212_add275_V0;
    assign SE_i_lm13212_toi1_intcast_add278_sel_x_wireValid = SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_V1 & SE_i_lm13212_toi1_intcast_add278_sel_x_and0;

    // redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo(STALLFIFO,2655)
    assign redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_valid_in = SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_V1;
    assign redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_stall_in = SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_backStall;
    assign redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_data_in = bubble_select_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_b;
    assign redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_valid_in_bitsignaltemp = redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_valid_in[0];
    assign redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_stall_in_bitsignaltemp = redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_stall_in[0];
    assign redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_valid_out[0] = redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_valid_out_bitsignaltemp;
    assign redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_stall_out[0] = redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(33),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(1),
        .IMPL("ram")
    ) theredist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo (
        .valid_in(redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_valid_in_bitsignaltemp),
        .stall_in(redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_stall_in_bitsignaltemp),
        .data_in(bubble_select_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_b),
        .valid_out(redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_valid_out_bitsignaltemp),
        .stall_out(redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_stall_out_bitsignaltemp),
        .data_out(redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo(STALLENABLE,3792)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg0 <= '0;
            SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg1 <= '0;
            SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg2 <= '0;
            SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg3 <= '0;
            SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg4 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg0 <= SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_toReg0;
            // Successor 1
            SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg1 <= SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_toReg1;
            // Successor 2
            SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg2 <= SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_toReg2;
            // Successor 3
            SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg3 <= SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_toReg3;
            // Successor 4
            SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg4 <= SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_toReg4;
        end
    end
    // Input Stall processing
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_consumed0 = (~ (SE_i_next_initerations125_add56_vt_select_15_backStall) & SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_wireValid) | SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg0;
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_consumed1 = (~ (SE_i_lm13212_toi1_intcast_add278_sel_x_backStall) & SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_wireValid) | SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg1;
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_consumed2 = (~ (SE_i_lm13413_toi1_intcast_add281_sel_x_backStall) & SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_wireValid) | SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg2;
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_consumed3 = (~ (SE_in_i_llvm_fpga_push_i32_inc35145_push14_add226_backStall) & SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_wireValid) | SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg3;
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_consumed4 = (~ (SE_redist62_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_52_0_backStall) & SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_wireValid) | SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg4;
    // Consuming
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_StallValid = SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_backStall & SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_wireValid;
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_toReg0 = SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_StallValid & SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_consumed0;
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_toReg1 = SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_StallValid & SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_consumed1;
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_toReg2 = SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_StallValid & SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_consumed2;
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_toReg3 = SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_StallValid & SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_consumed3;
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_toReg4 = SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_StallValid & SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_consumed4;
    // Backward Stall generation
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_or0 = SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_consumed0;
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_or1 = SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_consumed1 & SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_or0;
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_or2 = SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_consumed2 & SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_or1;
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_or3 = SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_consumed3 & SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_or2;
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_wireStall = ~ (SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_consumed4 & SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_or3);
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_backStall = SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_wireStall;
    // Valid signal propagation
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_V0 = SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_wireValid & ~ (SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg0);
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_V1 = SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_wireValid & ~ (SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg1);
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_V2 = SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_wireValid & ~ (SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg2);
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_V3 = SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_wireValid & ~ (SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg3);
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_V4 = SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_wireValid & ~ (SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_fromReg4);
    // Computing multiple Valid(s)
    assign SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_wireValid = redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_valid_out;

    // SE_i_next_initerations125_add56_vt_select_15(STALLENABLE,3468)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_next_initerations125_add56_vt_select_15_fromReg0 <= '0;
            SE_i_next_initerations125_add56_vt_select_15_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_i_next_initerations125_add56_vt_select_15_fromReg0 <= SE_i_next_initerations125_add56_vt_select_15_toReg0;
            // Successor 1
            SE_i_next_initerations125_add56_vt_select_15_fromReg1 <= SE_i_next_initerations125_add56_vt_select_15_toReg1;
        end
    end
    // Input Stall processing
    assign SE_i_next_initerations125_add56_vt_select_15_consumed0 = (~ (i_llvm_fpga_push_i1_lastiniteration128_add244_out_stall_out) & SE_i_next_initerations125_add56_vt_select_15_wireValid) | SE_i_next_initerations125_add56_vt_select_15_fromReg0;
    assign SE_i_next_initerations125_add56_vt_select_15_consumed1 = (~ (i_llvm_fpga_push_i17_initerations124_push12_add228_out_stall_out) & SE_i_next_initerations125_add56_vt_select_15_wireValid) | SE_i_next_initerations125_add56_vt_select_15_fromReg1;
    // Consuming
    assign SE_i_next_initerations125_add56_vt_select_15_StallValid = SE_i_next_initerations125_add56_vt_select_15_backStall & SE_i_next_initerations125_add56_vt_select_15_wireValid;
    assign SE_i_next_initerations125_add56_vt_select_15_toReg0 = SE_i_next_initerations125_add56_vt_select_15_StallValid & SE_i_next_initerations125_add56_vt_select_15_consumed0;
    assign SE_i_next_initerations125_add56_vt_select_15_toReg1 = SE_i_next_initerations125_add56_vt_select_15_StallValid & SE_i_next_initerations125_add56_vt_select_15_consumed1;
    // Backward Stall generation
    assign SE_i_next_initerations125_add56_vt_select_15_or0 = SE_i_next_initerations125_add56_vt_select_15_consumed0;
    assign SE_i_next_initerations125_add56_vt_select_15_wireStall = ~ (SE_i_next_initerations125_add56_vt_select_15_consumed1 & SE_i_next_initerations125_add56_vt_select_15_or0);
    assign SE_i_next_initerations125_add56_vt_select_15_backStall = SE_i_next_initerations125_add56_vt_select_15_wireStall;
    // Valid signal propagation
    assign SE_i_next_initerations125_add56_vt_select_15_V0 = SE_i_next_initerations125_add56_vt_select_15_wireValid & ~ (SE_i_next_initerations125_add56_vt_select_15_fromReg0);
    assign SE_i_next_initerations125_add56_vt_select_15_V1 = SE_i_next_initerations125_add56_vt_select_15_wireValid & ~ (SE_i_next_initerations125_add56_vt_select_15_fromReg1);
    // Computing multiple Valid(s)
    assign SE_i_next_initerations125_add56_vt_select_15_and0 = SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_V1;
    assign SE_i_next_initerations125_add56_vt_select_15_wireValid = SE_out_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_V0 & SE_i_next_initerations125_add56_vt_select_15_and0;

    // bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg(STALLENABLE,4432)
    // Valid signal propagation
    assign bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_V0 = bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_R_v_0;
    // Stall signal propagation
    assign bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_s_tv_0 = SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_backStall & bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_R_v_0;
    // Backward Enable generation
    assign bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_backEN = ~ (bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_v_s_0 = bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_backEN & SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_V0;
    // Backward Stall generation
    assign bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_backStall = ~ (bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_R_v_0 <= 1'b0;
        end
        else
        begin
            if (bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_backEN == 1'b0)
            begin
                bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_R_v_0 & bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_s_tv_0;
            end
            else
            begin
                bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_R_v_0 <= bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_v_s_0;
            end

        end
    end

    // SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46(STALLENABLE,3427)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_fromReg0 <= '0;
            SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_fromReg0 <= SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_toReg0;
            // Successor 1
            SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_fromReg1 <= SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_toReg1;
        end
    end
    // Input Stall processing
    assign SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_consumed0 = (~ (bubble_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_1_reg_backStall) & SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_wireValid) | SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_fromReg0;
    assign SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_consumed1 = (~ (SE_i_next_initerations125_add56_vt_select_15_backStall) & SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_wireValid) | SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_fromReg1;
    // Consuming
    assign SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_StallValid = SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_backStall & SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_wireValid;
    assign SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_toReg0 = SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_StallValid & SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_consumed0;
    assign SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_toReg1 = SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_StallValid & SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_consumed1;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_or0 = SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_consumed0;
    assign SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_wireStall = ~ (SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_consumed1 & SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_or0);
    assign SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_backStall = SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_wireStall;
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_V0 = SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_wireValid & ~ (SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_fromReg0);
    assign SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_V1 = SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_wireValid & ~ (SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_fromReg1);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_wireValid = i_llvm_fpga_pop_i17_initerations124_pop12_add46_out_valid_out;

    // SE_out_i_llvm_fpga_push_i17_initerations124_push12_add228(STALLENABLE,3445)
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_push_i17_initerations124_push12_add228_backStall = $unsigned(1'b0);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_push_i17_initerations124_push12_add228_wireValid = i_llvm_fpga_push_i17_initerations124_push12_add228_out_valid_out;

    // rightShiftStage0Idx1Rng1_uid909_i_next_initerations125_add0_shift_x(BITSELECT,908)@155
    assign rightShiftStage0Idx1Rng1_uid909_i_next_initerations125_add0_shift_x_b = bubble_select_i_llvm_fpga_pop_i17_initerations124_pop12_add46_b[16:1];

    // rightShiftStage0Idx1_uid911_i_next_initerations125_add0_shift_x(BITJOIN,910)@155
    assign rightShiftStage0Idx1_uid911_i_next_initerations125_add0_shift_x_q = {GND_q, rightShiftStage0Idx1Rng1_uid909_i_next_initerations125_add0_shift_x_b};

    // bubble_join_i_llvm_fpga_pop_i17_initerations124_pop12_add46(BITJOIN,2994)
    assign bubble_join_i_llvm_fpga_pop_i17_initerations124_pop12_add46_q = i_llvm_fpga_pop_i17_initerations124_pop12_add46_out_data_out;

    // bubble_select_i_llvm_fpga_pop_i17_initerations124_pop12_add46(BITSELECT,2995)
    assign bubble_select_i_llvm_fpga_pop_i17_initerations124_pop12_add46_b = $unsigned(bubble_join_i_llvm_fpga_pop_i17_initerations124_pop12_add46_q[16:0]);

    // rightShiftStage0_uid913_i_next_initerations125_add0_shift_x(MUX,912)@155
    assign rightShiftStage0_uid913_i_next_initerations125_add0_shift_x_s = VCC_q;
    always @(rightShiftStage0_uid913_i_next_initerations125_add0_shift_x_s or bubble_select_i_llvm_fpga_pop_i17_initerations124_pop12_add46_b or rightShiftStage0Idx1_uid911_i_next_initerations125_add0_shift_x_q)
    begin
        unique case (rightShiftStage0_uid913_i_next_initerations125_add0_shift_x_s)
            1'b0 : rightShiftStage0_uid913_i_next_initerations125_add0_shift_x_q = bubble_select_i_llvm_fpga_pop_i17_initerations124_pop12_add46_b;
            1'b1 : rightShiftStage0_uid913_i_next_initerations125_add0_shift_x_q = rightShiftStage0Idx1_uid911_i_next_initerations125_add0_shift_x_q;
            default : rightShiftStage0_uid913_i_next_initerations125_add0_shift_x_q = 17'b0;
        endcase
    end

    // i_next_initerations125_add56_vt_select_15(BITSELECT,477)@155
    assign i_next_initerations125_add56_vt_select_15_b = rightShiftStage0_uid913_i_next_initerations125_add0_shift_x_q[15:0];

    // i_next_initerations125_add56_vt_join(BITJOIN,476)@155
    assign i_next_initerations125_add56_vt_join_q = {GND_q, i_next_initerations125_add56_vt_select_15_b};

    // i_llvm_fpga_push_i17_initerations124_push12_add228(BLACKBOX,460)@155
    // in in_stall_in@20000000
    // out out_data_out@156
    // out out_feedback_out_12@20000000
    // out out_feedback_valid_out_12@20000000
    // out out_stall_out@20000000
    // out out_valid_out@156
    add_i_llvm_fpga_push_i17_initerations124_push12_0 thei_llvm_fpga_push_i17_initerations124_push12_add228 (
        .in_data_in(i_next_initerations125_add56_vt_join_q),
        .in_feedback_stall_in_12(i_llvm_fpga_pop_i17_initerations124_pop12_add46_out_feedback_stall_out_12),
        .in_keep_going126(bubble_select_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_b),
        .in_stall_in(SE_out_i_llvm_fpga_push_i17_initerations124_push12_add228_backStall),
        .in_valid_in(SE_i_next_initerations125_add56_vt_select_15_V1),
        .out_data_out(),
        .out_feedback_out_12(i_llvm_fpga_push_i17_initerations124_push12_add228_out_feedback_out_12),
        .out_feedback_valid_out_12(i_llvm_fpga_push_i17_initerations124_push12_add228_out_feedback_valid_out_12),
        .out_stall_out(i_llvm_fpga_push_i17_initerations124_push12_add228_out_stall_out),
        .out_valid_out(i_llvm_fpga_push_i17_initerations124_push12_add228_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo(BITJOIN,3090)
    assign bubble_join_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_q = redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_data_out;

    // bubble_select_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo(BITSELECT,3091)
    assign bubble_select_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_b = $unsigned(bubble_join_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_q[0:0]);

    // c_i17_65535294(CONSTANT,319)
    assign c_i17_65535294_q = $unsigned(17'b01111111111111111);

    // i_llvm_fpga_pop_i17_initerations124_pop12_add46(BLACKBOX,451)@154
    // in in_stall_in@20000000
    // out out_data_out@155
    // out out_feedback_stall_out_12@20000000
    // out out_stall_out@20000000
    // out out_valid_out@155
    add_i_llvm_fpga_pop_i17_initerations124_pop12_0 thei_llvm_fpga_pop_i17_initerations124_pop12_add46 (
        .in_data_in(c_i17_65535294_q),
        .in_dir(bubble_select_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_b),
        .in_feedback_in_12(i_llvm_fpga_push_i17_initerations124_push12_add228_out_feedback_out_12),
        .in_feedback_valid_in_12(i_llvm_fpga_push_i17_initerations124_push12_add228_out_feedback_valid_out_12),
        .in_predicate(GND_q),
        .in_stall_in(SE_out_i_llvm_fpga_pop_i17_initerations124_pop12_add46_backStall),
        .in_valid_in(SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_V1),
        .out_data_out(i_llvm_fpga_pop_i17_initerations124_pop12_add46_out_data_out),
        .out_feedback_stall_out_12(i_llvm_fpga_pop_i17_initerations124_pop12_add46_out_feedback_stall_out_12),
        .out_stall_out(i_llvm_fpga_pop_i17_initerations124_pop12_add46_out_stall_out),
        .out_valid_out(i_llvm_fpga_pop_i17_initerations124_pop12_add46_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo(BITJOIN,3093)
    assign bubble_join_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_q = redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_data_out;

    // bubble_select_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo(BITSELECT,3094)
    assign bubble_select_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_b = $unsigned(bubble_join_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_q[31:0]);

    // SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo(STALLREG,4435)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_r_valid <= 1'b0;
            SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_r_data0 <= 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
            SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_r_data1 <= 1'bx;
        end
        else
        begin
            // Valid
            SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_r_valid <= SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_backStall & (SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_r_valid | SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_i_valid);

            if (SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_r_valid == 1'b0)
            begin
                // Data(s)
                SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_r_data0 <= $unsigned(bubble_select_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_b);
                SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_r_data1 <= $unsigned(bubble_select_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_b);
            end

        end
    end
    // Computing multiple Valid(s)
    assign SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_and0 = redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_valid_out;
    assign SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_i_valid = SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_V0 & SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_and0;
    // Stall signal propagation
    assign SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_backStall = SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_r_valid | ~ (SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_i_valid);

    // Valid
    assign SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_V = SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_r_valid == 1'b1 ? SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_r_valid : SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_i_valid;

    // Data0
    assign SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_D0 = SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_r_valid == 1'b1 ? SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_r_data0 : bubble_select_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_b;
    // Data1
    assign SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_D1 = SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_r_valid == 1'b1 ? SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_r_data1 : bubble_select_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_b;

    // SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo(STALLENABLE,3944)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_fromReg0 <= '0;
            SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_fromReg0 <= SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_toReg0;
            // Successor 1
            SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_fromReg1 <= SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_toReg1;
        end
    end
    // Input Stall processing
    assign SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_consumed0 = (~ (SR_SE_out_redist194_add_B8_merge_reg_aunroll_x_out_data_out_1_tpl_153_fifo_backStall) & SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_wireValid) | SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_fromReg0;
    assign SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_consumed1 = (~ (i_llvm_fpga_pop_i17_initerations124_pop12_add46_out_stall_out) & SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_wireValid) | SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_fromReg1;
    // Consuming
    assign SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_StallValid = SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_backStall & SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_wireValid;
    assign SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_toReg0 = SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_StallValid & SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_consumed0;
    assign SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_toReg1 = SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_StallValid & SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_consumed1;
    // Backward Stall generation
    assign SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_or0 = SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_consumed0;
    assign SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_wireStall = ~ (SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_consumed1 & SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_or0);
    assign SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_backStall = SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_wireStall;
    // Valid signal propagation
    assign SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_V0 = SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_wireValid & ~ (SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_fromReg0);
    assign SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_V1 = SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_wireValid & ~ (SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_fromReg1);
    // Computing multiple Valid(s)
    assign SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_wireValid = redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_valid_out;

    // redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo(STALLFIFO,2793)
    assign redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_valid_in = SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_V1;
    assign redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_stall_in = SE_out_redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_backStall;
    assign redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_data_in = bubble_select_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_b;
    assign redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_valid_in_bitsignaltemp = redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_valid_in[0];
    assign redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_stall_in_bitsignaltemp = redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_stall_in[0];
    assign redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_valid_out[0] = redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_valid_out_bitsignaltemp;
    assign redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_stall_out[0] = redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(52),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(1),
        .IMPL("ram")
    ) theredist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo (
        .valid_in(redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_valid_in_bitsignaltemp),
        .stall_in(redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_stall_in_bitsignaltemp),
        .data_in(bubble_select_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_b),
        .valid_out(redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_valid_out_bitsignaltemp),
        .stall_out(redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_stall_out_bitsignaltemp),
        .data_out(redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo(STALLFIFO,2792)
    assign redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_valid_in = SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_V3;
    assign redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_stall_in = SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_backStall;
    assign redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_data_in = bubble_select_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_b;
    assign redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_valid_in_bitsignaltemp = redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_valid_in[0];
    assign redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_stall_in_bitsignaltemp = redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_stall_in[0];
    assign redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_valid_out[0] = redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_valid_out_bitsignaltemp;
    assign redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_stall_out[0] = redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(13),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(1),
        .IMPL("ram")
    ) theredist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo (
        .valid_in(redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_valid_in_bitsignaltemp),
        .stall_in(redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_stall_in_bitsignaltemp),
        .data_in(bubble_select_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_b),
        .valid_out(redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_valid_out_bitsignaltemp),
        .stall_out(redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_stall_out_bitsignaltemp),
        .data_out(redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo(STALLENABLE,3942)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_fromReg0 <= '0;
            SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_fromReg0 <= SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_toReg0;
            // Successor 1
            SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_fromReg1 <= SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_toReg1;
        end
    end
    // Input Stall processing
    assign SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_consumed0 = (~ (i_llvm_fpga_pipeline_keep_going126_add45_out_stall_out) & SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_wireValid) | SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_fromReg0;
    assign SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_consumed1 = (~ (redist193_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_153_fifo_stall_out) & SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_wireValid) | SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_fromReg1;
    // Consuming
    assign SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_StallValid = SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_backStall & SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_wireValid;
    assign SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_toReg0 = SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_StallValid & SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_consumed0;
    assign SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_toReg1 = SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_StallValid & SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_consumed1;
    // Backward Stall generation
    assign SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_or0 = SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_consumed0;
    assign SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_wireStall = ~ (SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_consumed1 & SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_or0);
    assign SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_backStall = SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_wireStall;
    // Valid signal propagation
    assign SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_V0 = SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_wireValid & ~ (SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_fromReg0);
    assign SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_V1 = SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_wireValid & ~ (SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_fromReg1);
    // Computing multiple Valid(s)
    assign SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_wireValid = redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_valid_out;

    // SE_out_i_llvm_fpga_push_i1_notexitcond136_add289(STALLENABLE,3455)
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_push_i1_notexitcond136_add289_backStall = $unsigned(1'b0);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_push_i1_notexitcond136_add289_wireValid = i_llvm_fpga_push_i1_notexitcond136_add289_out_valid_out;

    // i_llvm_fpga_push_i1_notexitcond136_add289(BLACKBOX,465)@155
    // in in_stall_in@20000000
    // out out_data_out@156
    // out out_feedback_out_5@20000000
    // out out_feedback_valid_out_5@20000000
    // out out_stall_out@20000000
    // out out_valid_out@156
    add_i_llvm_fpga_push_i1_notexitcond136_0 thei_llvm_fpga_push_i1_notexitcond136_add289 (
        .in_data_in(SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_D0),
        .in_feedback_stall_in_5(i_llvm_fpga_pipeline_keep_going126_add45_out_not_exitcond_stall_out),
        .in_first_cleanup131(SR_SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_D1),
        .in_stall_in(SE_out_i_llvm_fpga_push_i1_notexitcond136_add289_backStall),
        .in_valid_in(SE_in_i_llvm_fpga_push_i1_notexitcond136_add289_V0),
        .out_data_out(),
        .out_feedback_out_5(i_llvm_fpga_push_i1_notexitcond136_add289_out_feedback_out_5),
        .out_feedback_valid_out_5(i_llvm_fpga_push_i1_notexitcond136_add289_out_feedback_valid_out_5),
        .out_stall_out(i_llvm_fpga_push_i1_notexitcond136_add289_out_stall_out),
        .out_valid_out(i_llvm_fpga_push_i1_notexitcond136_add289_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_push_i1_lastiniteration128_add244(STALLENABLE,3447)
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_push_i1_lastiniteration128_add244_backStall = $unsigned(1'b0);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_push_i1_lastiniteration128_add244_wireValid = i_llvm_fpga_push_i1_lastiniteration128_add244_out_valid_out;

    // i_last_initeration127_add229_sel_x(BITSELECT,179)@155
    assign i_last_initeration127_add229_sel_x_b = i_next_initerations125_add56_vt_join_q[0:0];

    // i_llvm_fpga_push_i1_lastiniteration128_add244(BLACKBOX,461)@155
    // in in_stall_in@20000000
    // out out_data_out@156
    // out out_feedback_out_4@20000000
    // out out_feedback_valid_out_4@20000000
    // out out_stall_out@20000000
    // out out_valid_out@156
    add_i_llvm_fpga_push_i1_lastiniteration128_0 thei_llvm_fpga_push_i1_lastiniteration128_add244 (
        .in_data_in(i_last_initeration127_add229_sel_x_b),
        .in_feedback_stall_in_4(i_llvm_fpga_pipeline_keep_going126_add45_out_initeration_stall_out),
        .in_keep_going126(bubble_select_redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_b),
        .in_stall_in(SE_out_i_llvm_fpga_push_i1_lastiniteration128_add244_backStall),
        .in_valid_in(SE_i_next_initerations125_add56_vt_select_15_V0),
        .out_data_out(),
        .out_feedback_out_4(i_llvm_fpga_push_i1_lastiniteration128_add244_out_feedback_out_4),
        .out_feedback_valid_out_4(i_llvm_fpga_push_i1_lastiniteration128_add244_out_feedback_valid_out_4),
        .out_stall_out(i_llvm_fpga_push_i1_lastiniteration128_add244_out_stall_out),
        .out_valid_out(i_llvm_fpga_push_i1_lastiniteration128_add244_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo(BITJOIN,3087)
    assign bubble_join_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_q = redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_data_out;

    // bubble_select_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo(BITSELECT,3088)
    assign bubble_select_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_b = $unsigned(bubble_join_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_q[0:0]);

    // i_llvm_fpga_pipeline_keep_going126_add45(BLACKBOX,449)@103
    // in in_stall_in@20000000
    // out out_data_out@104
    // out out_exiting_stall_out@20000000
    // out out_exiting_valid_out@20000000
    // out out_initeration_stall_out@20000000
    // out out_not_exitcond_stall_out@20000000
    // out out_pipeline_valid_out@20000000
    // out out_stall_out@20000000
    // out out_valid_out@104
    add_i_llvm_fpga_pipeline_keep_going126_0 thei_llvm_fpga_pipeline_keep_going126_add45 (
        .in_data_in(bubble_select_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_b),
        .in_initeration_in(i_llvm_fpga_push_i1_lastiniteration128_add244_out_feedback_out_4),
        .in_initeration_valid_in(i_llvm_fpga_push_i1_lastiniteration128_add244_out_feedback_valid_out_4),
        .in_not_exitcond_in(i_llvm_fpga_push_i1_notexitcond136_add289_out_feedback_out_5),
        .in_not_exitcond_valid_in(i_llvm_fpga_push_i1_notexitcond136_add289_out_feedback_valid_out_5),
        .in_pipeline_stall_in(in_pipeline_stall_in),
        .in_stall_in(SE_out_i_llvm_fpga_pipeline_keep_going126_add45_backStall),
        .in_valid_in(SE_out_redist192_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_102_fifo_V0),
        .out_data_out(i_llvm_fpga_pipeline_keep_going126_add45_out_data_out),
        .out_exiting_stall_out(i_llvm_fpga_pipeline_keep_going126_add45_out_exiting_stall_out),
        .out_exiting_valid_out(i_llvm_fpga_pipeline_keep_going126_add45_out_exiting_valid_out),
        .out_initeration_stall_out(i_llvm_fpga_pipeline_keep_going126_add45_out_initeration_stall_out),
        .out_not_exitcond_stall_out(i_llvm_fpga_pipeline_keep_going126_add45_out_not_exitcond_stall_out),
        .out_pipeline_valid_out(i_llvm_fpga_pipeline_keep_going126_add45_out_pipeline_valid_out),
        .out_stall_out(i_llvm_fpga_pipeline_keep_going126_add45_out_stall_out),
        .out_valid_out(i_llvm_fpga_pipeline_keep_going126_add45_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_i_llvm_fpga_pipeline_keep_going126_add45(BITJOIN,2987)
    assign bubble_join_i_llvm_fpga_pipeline_keep_going126_add45_q = i_llvm_fpga_pipeline_keep_going126_add45_out_data_out;

    // bubble_select_i_llvm_fpga_pipeline_keep_going126_add45(BITSELECT,2988)
    assign bubble_select_i_llvm_fpga_pipeline_keep_going126_add45_b = $unsigned(bubble_join_i_llvm_fpga_pipeline_keep_going126_add45_q[0:0]);

    // SE_out_i_llvm_fpga_pipeline_keep_going126_add45(STALLENABLE,3423)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_i_llvm_fpga_pipeline_keep_going126_add45_fromReg0 <= '0;
            SE_out_i_llvm_fpga_pipeline_keep_going126_add45_fromReg1 <= '0;
            SE_out_i_llvm_fpga_pipeline_keep_going126_add45_fromReg2 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_i_llvm_fpga_pipeline_keep_going126_add45_fromReg0 <= SE_out_i_llvm_fpga_pipeline_keep_going126_add45_toReg0;
            // Successor 1
            SE_out_i_llvm_fpga_pipeline_keep_going126_add45_fromReg1 <= SE_out_i_llvm_fpga_pipeline_keep_going126_add45_toReg1;
            // Successor 2
            SE_out_i_llvm_fpga_pipeline_keep_going126_add45_fromReg2 <= SE_out_i_llvm_fpga_pipeline_keep_going126_add45_toReg2;
        end
    end
    // Input Stall processing
    assign SE_out_i_llvm_fpga_pipeline_keep_going126_add45_consumed0 = (~ (bubble_out_i_llvm_fpga_pipeline_keep_going126_add45_1_reg_stall_out) & SE_out_i_llvm_fpga_pipeline_keep_going126_add45_wireValid) | SE_out_i_llvm_fpga_pipeline_keep_going126_add45_fromReg0;
    assign SE_out_i_llvm_fpga_pipeline_keep_going126_add45_consumed1 = (~ (SE_in_i_llvm_fpga_push_i32_j_0440_push8_add240_backStall) & SE_out_i_llvm_fpga_pipeline_keep_going126_add45_wireValid) | SE_out_i_llvm_fpga_pipeline_keep_going126_add45_fromReg1;
    assign SE_out_i_llvm_fpga_pipeline_keep_going126_add45_consumed2 = (~ (redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_stall_out) & SE_out_i_llvm_fpga_pipeline_keep_going126_add45_wireValid) | SE_out_i_llvm_fpga_pipeline_keep_going126_add45_fromReg2;
    // Consuming
    assign SE_out_i_llvm_fpga_pipeline_keep_going126_add45_StallValid = SE_out_i_llvm_fpga_pipeline_keep_going126_add45_backStall & SE_out_i_llvm_fpga_pipeline_keep_going126_add45_wireValid;
    assign SE_out_i_llvm_fpga_pipeline_keep_going126_add45_toReg0 = SE_out_i_llvm_fpga_pipeline_keep_going126_add45_StallValid & SE_out_i_llvm_fpga_pipeline_keep_going126_add45_consumed0;
    assign SE_out_i_llvm_fpga_pipeline_keep_going126_add45_toReg1 = SE_out_i_llvm_fpga_pipeline_keep_going126_add45_StallValid & SE_out_i_llvm_fpga_pipeline_keep_going126_add45_consumed1;
    assign SE_out_i_llvm_fpga_pipeline_keep_going126_add45_toReg2 = SE_out_i_llvm_fpga_pipeline_keep_going126_add45_StallValid & SE_out_i_llvm_fpga_pipeline_keep_going126_add45_consumed2;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_pipeline_keep_going126_add45_or0 = SE_out_i_llvm_fpga_pipeline_keep_going126_add45_consumed0;
    assign SE_out_i_llvm_fpga_pipeline_keep_going126_add45_or1 = SE_out_i_llvm_fpga_pipeline_keep_going126_add45_consumed1 & SE_out_i_llvm_fpga_pipeline_keep_going126_add45_or0;
    assign SE_out_i_llvm_fpga_pipeline_keep_going126_add45_wireStall = ~ (SE_out_i_llvm_fpga_pipeline_keep_going126_add45_consumed2 & SE_out_i_llvm_fpga_pipeline_keep_going126_add45_or1);
    assign SE_out_i_llvm_fpga_pipeline_keep_going126_add45_backStall = SE_out_i_llvm_fpga_pipeline_keep_going126_add45_wireStall;
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_pipeline_keep_going126_add45_V0 = SE_out_i_llvm_fpga_pipeline_keep_going126_add45_wireValid & ~ (SE_out_i_llvm_fpga_pipeline_keep_going126_add45_fromReg0);
    assign SE_out_i_llvm_fpga_pipeline_keep_going126_add45_V1 = SE_out_i_llvm_fpga_pipeline_keep_going126_add45_wireValid & ~ (SE_out_i_llvm_fpga_pipeline_keep_going126_add45_fromReg1);
    assign SE_out_i_llvm_fpga_pipeline_keep_going126_add45_V2 = SE_out_i_llvm_fpga_pipeline_keep_going126_add45_wireValid & ~ (SE_out_i_llvm_fpga_pipeline_keep_going126_add45_fromReg2);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_pipeline_keep_going126_add45_wireValid = i_llvm_fpga_pipeline_keep_going126_add45_out_valid_out;

    // redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo(STALLFIFO,2654)
    assign redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_valid_in = SE_out_i_llvm_fpga_pipeline_keep_going126_add45_V2;
    assign redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_stall_in = SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_backStall;
    assign redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_data_in = bubble_select_i_llvm_fpga_pipeline_keep_going126_add45_b;
    assign redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_valid_in_bitsignaltemp = redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_valid_in[0];
    assign redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_stall_in_bitsignaltemp = redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_stall_in[0];
    assign redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_valid_out[0] = redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_valid_out_bitsignaltemp;
    assign redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_stall_out[0] = redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(20),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(1),
        .IMPL("ram")
    ) theredist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo (
        .valid_in(redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_valid_in_bitsignaltemp),
        .stall_in(redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_stall_in_bitsignaltemp),
        .data_in(bubble_select_i_llvm_fpga_pipeline_keep_going126_add45_b),
        .valid_out(redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_valid_out_bitsignaltemp),
        .stall_out(redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_stall_out_bitsignaltemp),
        .data_out(redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // bubble_join_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo(BITJOIN,3045)
    assign bubble_join_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_q = redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_data_out;

    // bubble_select_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo(BITSELECT,3046)
    assign bubble_select_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_b = $unsigned(bubble_join_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_q[0:0]);

    // bubble_join_i_llvm_fpga_mem_memdep_16_add273(BITJOIN,2978)
    assign bubble_join_i_llvm_fpga_mem_memdep_16_add273_q = i_llvm_fpga_mem_memdep_16_add273_out_o_writeack;

    // bubble_select_i_llvm_fpga_mem_memdep_16_add273(BITSELECT,2979)
    assign bubble_select_i_llvm_fpga_mem_memdep_16_add273_b = $unsigned(bubble_join_i_llvm_fpga_mem_memdep_16_add273_q[0:0]);

    // i_llvm_fpga_push_i1_memdep_phi17_push9_add274(BLACKBOX,462)@123
    // in in_stall_in@20000000
    // out out_data_out@124
    // out out_feedback_out_9@20000000
    // out out_feedback_valid_out_9@20000000
    // out out_stall_out@20000000
    // out out_valid_out@124
    add_i_llvm_fpga_push_i1_memdep_phi17_push9_0 thei_llvm_fpga_push_i1_memdep_phi17_push9_add274 (
        .in_data_in(bubble_select_i_llvm_fpga_mem_memdep_16_add273_b),
        .in_feedback_stall_in_9(i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_feedback_stall_out_9),
        .in_keep_going126(bubble_select_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_b),
        .in_stall_in(SE_out_i_llvm_fpga_push_i1_memdep_phi17_push9_add274_backStall),
        .in_valid_in(SE_in_i_llvm_fpga_push_i1_memdep_phi17_push9_add274_V0),
        .out_data_out(),
        .out_feedback_out_9(i_llvm_fpga_push_i1_memdep_phi17_push9_add274_out_feedback_out_9),
        .out_feedback_valid_out_9(i_llvm_fpga_push_i1_memdep_phi17_push9_add274_out_feedback_valid_out_9),
        .out_stall_out(i_llvm_fpga_push_i1_memdep_phi17_push9_add274_out_stall_out),
        .out_valid_out(i_llvm_fpga_push_i1_memdep_phi17_push9_add274_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo(STALLENABLE,3790)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_fromReg0 <= '0;
            SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_fromReg0 <= SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_toReg0;
            // Successor 1
            SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_fromReg1 <= SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_toReg1;
        end
    end
    // Input Stall processing
    assign SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_consumed0 = (~ (SE_in_i_llvm_fpga_push_i1_memdep_phi17_push9_add274_backStall) & SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_wireValid) | SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_fromReg0;
    assign SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_consumed1 = (~ (redist61_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_51_fifo_stall_out) & SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_wireValid) | SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_fromReg1;
    // Consuming
    assign SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_StallValid = SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_backStall & SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_wireValid;
    assign SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_toReg0 = SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_StallValid & SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_consumed0;
    assign SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_toReg1 = SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_StallValid & SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_consumed1;
    // Backward Stall generation
    assign SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_or0 = SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_consumed0;
    assign SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_wireStall = ~ (SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_consumed1 & SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_or0);
    assign SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_backStall = SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_wireStall;
    // Valid signal propagation
    assign SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_V0 = SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_wireValid & ~ (SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_fromReg0);
    assign SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_V1 = SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_wireValid & ~ (SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_fromReg1);
    // Computing multiple Valid(s)
    assign SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_wireValid = redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_valid_out;

    // SE_in_i_llvm_fpga_push_i1_memdep_phi17_push9_add274(STALLENABLE,3448)
    // Valid signal propagation
    assign SE_in_i_llvm_fpga_push_i1_memdep_phi17_push9_add274_V0 = SE_in_i_llvm_fpga_push_i1_memdep_phi17_push9_add274_wireValid;
    // Backward Stall generation
    assign SE_in_i_llvm_fpga_push_i1_memdep_phi17_push9_add274_backStall = i_llvm_fpga_push_i1_memdep_phi17_push9_add274_out_stall_out | ~ (SE_in_i_llvm_fpga_push_i1_memdep_phi17_push9_add274_wireValid);
    // Computing multiple Valid(s)
    assign SE_in_i_llvm_fpga_push_i1_memdep_phi17_push9_add274_and0 = SE_out_i_llvm_fpga_mem_memdep_16_add273_V2;
    assign SE_in_i_llvm_fpga_push_i1_memdep_phi17_push9_add274_wireValid = SE_out_redist60_i_llvm_fpga_pipeline_keep_going126_add45_out_data_out_19_fifo_V0 & SE_in_i_llvm_fpga_push_i1_memdep_phi17_push9_add274_and0;

    // SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40(STALLENABLE,3387)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_V0 = SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_backStall = i_llvm_fpga_mem_lm13413_add276_out_o_stall | ~ (SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_and0 = i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_out_valid_out;
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_wireValid = SE_out_i_llvm_fpga_mem_memdep_16_add273_V1 & SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_and0;

    // SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38(STALLENABLE,3391)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_V0 = SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_backStall = i_llvm_fpga_mem_lm13212_add275_out_o_stall | ~ (SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_and0 = i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_out_valid_out;
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_wireValid = SE_out_i_llvm_fpga_mem_memdep_16_add273_V0 & SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_and0;

    // SE_out_i_llvm_fpga_mem_memdep_16_add273(STALLENABLE,3417)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_i_llvm_fpga_mem_memdep_16_add273_fromReg0 <= '0;
            SE_out_i_llvm_fpga_mem_memdep_16_add273_fromReg1 <= '0;
            SE_out_i_llvm_fpga_mem_memdep_16_add273_fromReg2 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_i_llvm_fpga_mem_memdep_16_add273_fromReg0 <= SE_out_i_llvm_fpga_mem_memdep_16_add273_toReg0;
            // Successor 1
            SE_out_i_llvm_fpga_mem_memdep_16_add273_fromReg1 <= SE_out_i_llvm_fpga_mem_memdep_16_add273_toReg1;
            // Successor 2
            SE_out_i_llvm_fpga_mem_memdep_16_add273_fromReg2 <= SE_out_i_llvm_fpga_mem_memdep_16_add273_toReg2;
        end
    end
    // Input Stall processing
    assign SE_out_i_llvm_fpga_mem_memdep_16_add273_consumed0 = (~ (SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i_i49_add38_backStall) & SE_out_i_llvm_fpga_mem_memdep_16_add273_wireValid) | SE_out_i_llvm_fpga_mem_memdep_16_add273_fromReg0;
    assign SE_out_i_llvm_fpga_mem_memdep_16_add273_consumed1 = (~ (SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i_i44_add40_backStall) & SE_out_i_llvm_fpga_mem_memdep_16_add273_wireValid) | SE_out_i_llvm_fpga_mem_memdep_16_add273_fromReg1;
    assign SE_out_i_llvm_fpga_mem_memdep_16_add273_consumed2 = (~ (SE_in_i_llvm_fpga_push_i1_memdep_phi17_push9_add274_backStall) & SE_out_i_llvm_fpga_mem_memdep_16_add273_wireValid) | SE_out_i_llvm_fpga_mem_memdep_16_add273_fromReg2;
    // Consuming
    assign SE_out_i_llvm_fpga_mem_memdep_16_add273_StallValid = SE_out_i_llvm_fpga_mem_memdep_16_add273_backStall & SE_out_i_llvm_fpga_mem_memdep_16_add273_wireValid;
    assign SE_out_i_llvm_fpga_mem_memdep_16_add273_toReg0 = SE_out_i_llvm_fpga_mem_memdep_16_add273_StallValid & SE_out_i_llvm_fpga_mem_memdep_16_add273_consumed0;
    assign SE_out_i_llvm_fpga_mem_memdep_16_add273_toReg1 = SE_out_i_llvm_fpga_mem_memdep_16_add273_StallValid & SE_out_i_llvm_fpga_mem_memdep_16_add273_consumed1;
    assign SE_out_i_llvm_fpga_mem_memdep_16_add273_toReg2 = SE_out_i_llvm_fpga_mem_memdep_16_add273_StallValid & SE_out_i_llvm_fpga_mem_memdep_16_add273_consumed2;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_mem_memdep_16_add273_or0 = SE_out_i_llvm_fpga_mem_memdep_16_add273_consumed0;
    assign SE_out_i_llvm_fpga_mem_memdep_16_add273_or1 = SE_out_i_llvm_fpga_mem_memdep_16_add273_consumed1 & SE_out_i_llvm_fpga_mem_memdep_16_add273_or0;
    assign SE_out_i_llvm_fpga_mem_memdep_16_add273_wireStall = ~ (SE_out_i_llvm_fpga_mem_memdep_16_add273_consumed2 & SE_out_i_llvm_fpga_mem_memdep_16_add273_or1);
    assign SE_out_i_llvm_fpga_mem_memdep_16_add273_backStall = SE_out_i_llvm_fpga_mem_memdep_16_add273_wireStall;
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_mem_memdep_16_add273_V0 = SE_out_i_llvm_fpga_mem_memdep_16_add273_wireValid & ~ (SE_out_i_llvm_fpga_mem_memdep_16_add273_fromReg0);
    assign SE_out_i_llvm_fpga_mem_memdep_16_add273_V1 = SE_out_i_llvm_fpga_mem_memdep_16_add273_wireValid & ~ (SE_out_i_llvm_fpga_mem_memdep_16_add273_fromReg1);
    assign SE_out_i_llvm_fpga_mem_memdep_16_add273_V2 = SE_out_i_llvm_fpga_mem_memdep_16_add273_wireValid & ~ (SE_out_i_llvm_fpga_mem_memdep_16_add273_fromReg2);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_mem_memdep_16_add273_wireValid = i_llvm_fpga_mem_memdep_16_add273_out_o_valid;

    // bubble_join_redist20_i_unnamed_add263_q_89_fifo(BITJOIN,3027)
    assign bubble_join_redist20_i_unnamed_add263_q_89_fifo_q = redist20_i_unnamed_add263_q_89_fifo_data_out;

    // bubble_select_redist20_i_unnamed_add263_q_89_fifo(BITSELECT,3028)
    assign bubble_select_redist20_i_unnamed_add263_q_89_fifo_b = $unsigned(bubble_join_redist20_i_unnamed_add263_q_89_fifo_q[0:0]);

    // i_first_cleanup_xor132_or141_add266(LOGICAL,385)@92
    assign i_first_cleanup_xor132_or141_add266_q = bubble_select_redist20_i_unnamed_add263_q_89_fifo_b | i_first_cleanup_xor132_add227_q;

    // bubble_join_i_llvm_fpga_pop_i1_memdep_phi19_pop11_add52(BITJOIN,3004)
    assign bubble_join_i_llvm_fpga_pop_i1_memdep_phi19_pop11_add52_q = i_llvm_fpga_pop_i1_memdep_phi19_pop11_add52_out_data_out;

    // bubble_select_i_llvm_fpga_pop_i1_memdep_phi19_pop11_add52(BITSELECT,3005)
    assign bubble_select_i_llvm_fpga_pop_i1_memdep_phi19_pop11_add52_b = $unsigned(bubble_join_i_llvm_fpga_pop_i1_memdep_phi19_pop11_add52_q[0:0]);

    // bubble_join_i_llvm_fpga_pop_i1_memdep_phi18_pop10_add51(BITJOIN,3001)
    assign bubble_join_i_llvm_fpga_pop_i1_memdep_phi18_pop10_add51_q = i_llvm_fpga_pop_i1_memdep_phi18_pop10_add51_out_data_out;

    // bubble_select_i_llvm_fpga_pop_i1_memdep_phi18_pop10_add51(BITSELECT,3002)
    assign bubble_select_i_llvm_fpga_pop_i1_memdep_phi18_pop10_add51_b = $unsigned(bubble_join_i_llvm_fpga_pop_i1_memdep_phi18_pop10_add51_q[0:0]);

    // i_memdep_phi19_or_add225(LOGICAL,473)@92
    assign i_memdep_phi19_or_add225_q = bubble_select_i_llvm_fpga_pop_i1_memdep_phi18_pop10_add51_b | bubble_select_i_llvm_fpga_pop_i1_memdep_phi19_pop11_add52_b;

    // bubble_join_redist116_i_addr_add253_q_38_fifo(BITJOIN,3066)
    assign bubble_join_redist116_i_addr_add253_q_38_fifo_q = redist116_i_addr_add253_q_38_fifo_data_out;

    // bubble_select_redist116_i_addr_add253_q_38_fifo(BITSELECT,3067)
    assign bubble_select_redist116_i_addr_add253_q_38_fifo_b = $unsigned(bubble_join_redist116_i_addr_add253_q_38_fifo_q[63:0]);

    // i_llvm_fpga_mem_memdep_16_add273(BLACKBOX,446)@92
    // in in_i_stall@20000000
    // out out_lsu_memdep_16_o_active@20000000
    // out out_memdep_16_add_avm_address@20000000
    // out out_memdep_16_add_avm_burstcount@20000000
    // out out_memdep_16_add_avm_byteenable@20000000
    // out out_memdep_16_add_avm_enable@20000000
    // out out_memdep_16_add_avm_read@20000000
    // out out_memdep_16_add_avm_write@20000000
    // out out_memdep_16_add_avm_writedata@20000000
    // out out_o_stall@20000000
    // out out_o_valid@123
    // out out_o_writeack@123
    add_i_llvm_fpga_mem_memdep_16_0 thei_llvm_fpga_mem_memdep_16_add273 (
        .in_flush(in_flush),
        .in_i_address(bubble_select_redist116_i_addr_add253_q_38_fifo_b),
        .in_i_dependence(i_memdep_phi19_or_add225_q),
        .in_i_predicate(i_first_cleanup_xor132_or141_add266_q),
        .in_i_stall(SE_out_i_llvm_fpga_mem_memdep_16_add273_backStall),
        .in_i_valid(SE_out_redist116_i_addr_add253_q_38_fifo_V0),
        .in_i_writedata(bubble_select_i_sfc_s_c0_in_for_body28_adds_c0_enter1594_add271_aunroll_x_b),
        .in_memdep_16_add_avm_readdata(in_memdep_16_add_avm_readdata),
        .in_memdep_16_add_avm_readdatavalid(in_memdep_16_add_avm_readdatavalid),
        .in_memdep_16_add_avm_waitrequest(in_memdep_16_add_avm_waitrequest),
        .in_memdep_16_add_avm_writeack(in_memdep_16_add_avm_writeack),
        .out_lsu_memdep_16_o_active(i_llvm_fpga_mem_memdep_16_add273_out_lsu_memdep_16_o_active),
        .out_memdep_16_add_avm_address(i_llvm_fpga_mem_memdep_16_add273_out_memdep_16_add_avm_address),
        .out_memdep_16_add_avm_burstcount(i_llvm_fpga_mem_memdep_16_add273_out_memdep_16_add_avm_burstcount),
        .out_memdep_16_add_avm_byteenable(i_llvm_fpga_mem_memdep_16_add273_out_memdep_16_add_avm_byteenable),
        .out_memdep_16_add_avm_enable(i_llvm_fpga_mem_memdep_16_add273_out_memdep_16_add_avm_enable),
        .out_memdep_16_add_avm_read(i_llvm_fpga_mem_memdep_16_add273_out_memdep_16_add_avm_read),
        .out_memdep_16_add_avm_write(i_llvm_fpga_mem_memdep_16_add273_out_memdep_16_add_avm_write),
        .out_memdep_16_add_avm_writedata(i_llvm_fpga_mem_memdep_16_add273_out_memdep_16_add_avm_writedata),
        .out_o_stall(i_llvm_fpga_mem_memdep_16_add273_out_o_stall),
        .out_o_valid(i_llvm_fpga_mem_memdep_16_add273_out_o_valid),
        .out_o_writeack(i_llvm_fpga_mem_memdep_16_add273_out_o_writeack),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_pop_i1_memdep_phi18_pop10_add51(BLACKBOX,453)@91
    // in in_stall_in@20000000
    // out out_data_out@92
    // out out_feedback_stall_out_10@20000000
    // out out_stall_out@20000000
    // out out_valid_out@92
    add_i_llvm_fpga_pop_i1_memdep_phi18_pop10_0 thei_llvm_fpga_pop_i1_memdep_phi18_pop10_add51 (
        .in_data_in(GND_q),
        .in_dir(bubble_select_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_b),
        .in_feedback_in_10(i_llvm_fpga_push_i1_memdep_phi18_push10_add284_out_feedback_out_10),
        .in_feedback_valid_in_10(i_llvm_fpga_push_i1_memdep_phi18_push10_add284_out_feedback_valid_out_10),
        .in_predicate(GND_q),
        .in_stall_in(SE_out_redist116_i_addr_add253_q_38_fifo_backStall),
        .in_valid_in(SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_V1),
        .out_data_out(i_llvm_fpga_pop_i1_memdep_phi18_pop10_add51_out_data_out),
        .out_feedback_stall_out_10(i_llvm_fpga_pop_i1_memdep_phi18_pop10_add51_out_feedback_stall_out_10),
        .out_stall_out(i_llvm_fpga_pop_i1_memdep_phi18_pop10_add51_out_stall_out),
        .out_valid_out(i_llvm_fpga_pop_i1_memdep_phi18_pop10_add51_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_pop_i1_memdep_phi19_pop11_add52(BLACKBOX,454)@91
    // in in_stall_in@20000000
    // out out_data_out@92
    // out out_feedback_stall_out_11@20000000
    // out out_stall_out@20000000
    // out out_valid_out@92
    add_i_llvm_fpga_pop_i1_memdep_phi19_pop11_0 thei_llvm_fpga_pop_i1_memdep_phi19_pop11_add52 (
        .in_data_in(GND_q),
        .in_dir(bubble_select_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_b),
        .in_feedback_in_11(i_llvm_fpga_push_i1_memdep_phi19_push11_add285_out_feedback_out_11),
        .in_feedback_valid_in_11(i_llvm_fpga_push_i1_memdep_phi19_push11_add285_out_feedback_valid_out_11),
        .in_predicate(GND_q),
        .in_stall_in(SE_out_redist116_i_addr_add253_q_38_fifo_backStall),
        .in_valid_in(SE_out_redist191_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_90_fifo_V2),
        .out_data_out(i_llvm_fpga_pop_i1_memdep_phi19_pop11_add52_out_data_out),
        .out_feedback_stall_out_11(i_llvm_fpga_pop_i1_memdep_phi19_pop11_add52_out_feedback_stall_out_11),
        .out_stall_out(i_llvm_fpga_pop_i1_memdep_phi19_pop11_add52_out_stall_out),
        .out_valid_out(i_llvm_fpga_pop_i1_memdep_phi19_pop11_add52_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44(STALLENABLE,3425)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_fromReg0 <= '0;
            SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_fromReg1 <= '0;
            SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_fromReg2 <= '0;
            SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_fromReg3 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_fromReg0 <= SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_toReg0;
            // Successor 1
            SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_fromReg1 <= SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_toReg1;
            // Successor 2
            SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_fromReg2 <= SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_toReg2;
            // Successor 3
            SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_fromReg3 <= SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_toReg3;
        end
    end
    // Input Stall processing
    assign SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_consumed0 = (~ (redist59_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_data_out_64_fifo_stall_out) & SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_wireValid) | SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_fromReg0;
    assign SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_consumed1 = (~ (SE_out_redist116_i_addr_add253_q_38_fifo_backStall) & SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_wireValid) | SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_fromReg1;
    assign SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_consumed2 = (~ (redist163_i_first_cleanup131_add54_sel_x_b_63_fifo_stall_out) & SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_wireValid) | SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_fromReg2;
    assign SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_consumed3 = (~ (redist115_i_first_cleanup_xor132_add227_q_63_fifo_stall_out) & SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_wireValid) | SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_fromReg3;
    // Consuming
    assign SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_StallValid = SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_backStall & SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_wireValid;
    assign SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_toReg0 = SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_StallValid & SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_consumed0;
    assign SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_toReg1 = SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_StallValid & SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_consumed1;
    assign SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_toReg2 = SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_StallValid & SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_consumed2;
    assign SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_toReg3 = SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_StallValid & SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_consumed3;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_or0 = SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_consumed0;
    assign SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_or1 = SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_consumed1 & SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_or0;
    assign SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_or2 = SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_consumed2 & SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_or1;
    assign SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_wireStall = ~ (SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_consumed3 & SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_or2);
    assign SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_backStall = SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_wireStall;
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_V0 = SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_wireValid & ~ (SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_fromReg0);
    assign SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_V1 = SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_wireValid & ~ (SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_fromReg1);
    assign SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_V2 = SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_wireValid & ~ (SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_fromReg2);
    assign SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_V3 = SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_wireValid & ~ (SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_fromReg3);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_wireValid = i_llvm_fpga_pop_i17_cleanups129_pop13_add44_out_valid_out;

    // bubble_join_i_llvm_fpga_ffwd_dest_i1_cmp_i65108_add30(BITJOIN,2846)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i1_cmp_i65108_add30_q = i_llvm_fpga_ffwd_dest_i1_cmp_i65108_add30_out_dest_data_out_39_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i1_cmp_i65108_add30(BITSELECT,2847)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i1_cmp_i65108_add30_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i1_cmp_i65108_add30_q[0:0]);

    // bubble_join_i_llvm_fpga_ffwd_dest_i32_lm72267_add29(BITJOIN,2898)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_q = i_llvm_fpga_ffwd_dest_i32_lm72267_add29_out_dest_data_out_16_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i32_lm72267_add29(BITSELECT,2899)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_q[31:0]);

    // i_cmp11_i_add221(COMPARE,344)@2
    assign i_cmp11_i_add221_a = {2'b00, bubble_select_i_llvm_fpga_pop_i32_j_0440_pop8_add49_b};
    assign i_cmp11_i_add221_b = {2'b00, bubble_select_i_llvm_fpga_ffwd_dest_i32_lm72267_add29_b};
    assign i_cmp11_i_add221_o = $unsigned(i_cmp11_i_add221_a) - $unsigned(i_cmp11_i_add221_b);
    assign i_cmp11_i_add221_c[0] = i_cmp11_i_add221_o[33];

    // i_or_cond437_add239(LOGICAL,485)@2
    assign i_or_cond437_add239_q = i_cmp11_i_add221_c & bubble_select_i_llvm_fpga_ffwd_dest_i1_cmp_i65108_add30_b;

    // i_or_cond437_not_add249(LOGICAL,486)@2
    assign i_or_cond437_not_add249_q = i_or_cond437_add239_q ^ VCC_q;

    // bubble_join_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36(BITJOIN,2852)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_q = i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_out_dest_data_out_15_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36(BITSELECT,2853)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_q[0:0]);

    // i_unnamed_add254(LOGICAL,551)@2 + 1
    assign i_unnamed_add254_qi = bubble_select_i_llvm_fpga_ffwd_dest_i1_lm_i0_cast_i064_add36_b | i_or_cond437_not_add249_q;
    dspba_delay_ver #( .width(1), .depth(1), .reset_kind("ASYNC"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_unnamed_add254_delay ( .xin(i_unnamed_add254_qi), .xout(i_unnamed_add254_q), .ena(SE_i_unnamed_add254_backEN[0]), .clk(clock), .aclr(resetn) );

    // i_pred_sel29_add259(LOGICAL,487)@3
    assign i_pred_sel29_add259_q = i_acl_26_add248_q ^ i_unnamed_add254_q;

    // bubble_join_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37(BITJOIN,2890)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_q = i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37(BITSELECT,2891)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_q[0:0]);

    // redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0(REG,2704)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_q <= $unsigned(1'b0);
        end
        else if (SE_redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_backEN == 1'b1)
        begin
            redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_q <= $unsigned(bubble_select_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_b);
        end
    end

    // i_unnamed_add263(LOGICAL,554)@3 + 1
    assign i_unnamed_add263_qi = redist110_i_llvm_fpga_ffwd_dest_i1_unnamed_add71_add37_out_dest_data_out_35_0_1_0_q | i_pred_sel29_add259_q;
    dspba_delay_ver #( .width(1), .depth(1), .reset_kind("ASYNC"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_unnamed_add263_delay ( .xin(i_unnamed_add263_qi), .xout(i_unnamed_add263_q), .ena(SE_i_unnamed_add263_backEN[0]), .clk(clock), .aclr(resetn) );

    // redist20_i_unnamed_add263_q_89_fifo(STALLFIFO,2596)
    assign redist20_i_unnamed_add263_q_89_fifo_valid_in = SE_i_unnamed_add263_V0;
    assign redist20_i_unnamed_add263_q_89_fifo_stall_in = SE_out_redist116_i_addr_add253_q_38_fifo_backStall;
    assign redist20_i_unnamed_add263_q_89_fifo_data_in = i_unnamed_add263_q;
    assign redist20_i_unnamed_add263_q_89_fifo_valid_in_bitsignaltemp = redist20_i_unnamed_add263_q_89_fifo_valid_in[0];
    assign redist20_i_unnamed_add263_q_89_fifo_stall_in_bitsignaltemp = redist20_i_unnamed_add263_q_89_fifo_stall_in[0];
    assign redist20_i_unnamed_add263_q_89_fifo_valid_out[0] = redist20_i_unnamed_add263_q_89_fifo_valid_out_bitsignaltemp;
    assign redist20_i_unnamed_add263_q_89_fifo_stall_out[0] = redist20_i_unnamed_add263_q_89_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(89),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(1),
        .IMPL("ram")
    ) theredist20_i_unnamed_add263_q_89_fifo (
        .valid_in(redist20_i_unnamed_add263_q_89_fifo_valid_in_bitsignaltemp),
        .stall_in(redist20_i_unnamed_add263_q_89_fifo_stall_in_bitsignaltemp),
        .data_in(i_unnamed_add263_q),
        .valid_out(redist20_i_unnamed_add263_q_89_fifo_valid_out_bitsignaltemp),
        .stall_out(redist20_i_unnamed_add263_q_89_fifo_stall_out_bitsignaltemp),
        .data_out(redist20_i_unnamed_add263_q_89_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // i_addr_add253(MUX,338)@54 + 1
    assign i_addr_add253_s = SR_SE_i_addr_add253_D0;
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_addr_add253_q <= 64'b0;
        end
        else if (SE_i_addr_add253_backEN == 1'b1)
        begin
            unique case (i_addr_add253_s)
                1'b0 : i_addr_add253_q <= SR_SE_i_addr_add253_D1;
                1'b1 : i_addr_add253_q <= SR_SE_i_addr_add253_D2;
                default : i_addr_add253_q <= 64'b0;
            endcase
        end
    end

    // redist116_i_addr_add253_q_38_fifo(STALLFIFO,2710)
    assign redist116_i_addr_add253_q_38_fifo_valid_in = SE_i_addr_add253_V0;
    assign redist116_i_addr_add253_q_38_fifo_stall_in = SE_out_redist116_i_addr_add253_q_38_fifo_backStall;
    assign redist116_i_addr_add253_q_38_fifo_data_in = i_addr_add253_q;
    assign redist116_i_addr_add253_q_38_fifo_valid_in_bitsignaltemp = redist116_i_addr_add253_q_38_fifo_valid_in[0];
    assign redist116_i_addr_add253_q_38_fifo_stall_in_bitsignaltemp = redist116_i_addr_add253_q_38_fifo_stall_in[0];
    assign redist116_i_addr_add253_q_38_fifo_valid_out[0] = redist116_i_addr_add253_q_38_fifo_valid_out_bitsignaltemp;
    assign redist116_i_addr_add253_q_38_fifo_stall_out[0] = redist116_i_addr_add253_q_38_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(38),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(64),
        .IMPL("ram")
    ) theredist116_i_addr_add253_q_38_fifo (
        .valid_in(redist116_i_addr_add253_q_38_fifo_valid_in_bitsignaltemp),
        .stall_in(redist116_i_addr_add253_q_38_fifo_stall_in_bitsignaltemp),
        .data_in(i_addr_add253_q),
        .valid_out(redist116_i_addr_add253_q_38_fifo_valid_out_bitsignaltemp),
        .stall_out(redist116_i_addr_add253_q_38_fifo_stall_out_bitsignaltemp),
        .data_out(redist116_i_addr_add253_q_38_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_redist116_i_addr_add253_q_38_fifo(STALLENABLE,3853)
    // Valid signal propagation
    assign SE_out_redist116_i_addr_add253_q_38_fifo_V0 = SE_out_redist116_i_addr_add253_q_38_fifo_wireValid;
    // Backward Stall generation
    assign SE_out_redist116_i_addr_add253_q_38_fifo_backStall = i_llvm_fpga_mem_memdep_16_add273_out_o_stall | ~ (SE_out_redist116_i_addr_add253_q_38_fifo_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_redist116_i_addr_add253_q_38_fifo_and0 = redist116_i_addr_add253_q_38_fifo_valid_out;
    assign SE_out_redist116_i_addr_add253_q_38_fifo_and1 = redist20_i_unnamed_add263_q_89_fifo_valid_out & SE_out_redist116_i_addr_add253_q_38_fifo_and0;
    assign SE_out_redist116_i_addr_add253_q_38_fifo_and2 = SE_out_i_llvm_fpga_pop_i17_cleanups129_pop13_add44_V1 & SE_out_redist116_i_addr_add253_q_38_fifo_and1;
    assign SE_out_redist116_i_addr_add253_q_38_fifo_and3 = i_llvm_fpga_pop_i1_memdep_phi19_pop11_add52_out_valid_out & SE_out_redist116_i_addr_add253_q_38_fifo_and2;
    assign SE_out_redist116_i_addr_add253_q_38_fifo_and4 = i_llvm_fpga_pop_i1_memdep_phi18_pop10_add51_out_valid_out & SE_out_redist116_i_addr_add253_q_38_fifo_and3;
    assign SE_out_redist116_i_addr_add253_q_38_fifo_wireValid = i_sfc_s_c0_in_for_body28_adds_c0_enter1594_add271_aunroll_x_out_o_valid & SE_out_redist116_i_addr_add253_q_38_fifo_and4;

    // bubble_join_i_llvm_fpga_mem_ml3211_add267(BITJOIN,2981)
    assign bubble_join_i_llvm_fpga_mem_ml3211_add267_q = i_llvm_fpga_mem_ml3211_add267_out_o_readdata;

    // bubble_select_i_llvm_fpga_mem_ml3211_add267(BITSELECT,2982)
    assign bubble_select_i_llvm_fpga_mem_ml3211_add267_b = $unsigned(bubble_join_i_llvm_fpga_mem_ml3211_add267_q[31:0]);

    // c_float_0_000000e_00304(FLOATCONSTANT,317)
    assign c_float_0_000000e_00304_q = $unsigned(32'b00000000000000000000000000000000);

    // bubble_join_redist21_i_unnamed_add261_q_33_fifo(BITJOIN,3030)
    assign bubble_join_redist21_i_unnamed_add261_q_33_fifo_q = redist21_i_unnamed_add261_q_33_fifo_data_out;

    // bubble_select_redist21_i_unnamed_add261_q_33_fifo(BITSELECT,3031)
    assign bubble_select_redist21_i_unnamed_add261_q_33_fifo_b = $unsigned(bubble_join_redist21_i_unnamed_add261_q_33_fifo_q[0:0]);

    // i_acl_14_add269(MUX,332)@86
    assign i_acl_14_add269_s = bubble_select_redist21_i_unnamed_add261_q_33_fifo_b;
    always @(i_acl_14_add269_s or c_float_0_000000e_00304_q or bubble_select_i_llvm_fpga_mem_ml3211_add267_b)
    begin
        unique case (i_acl_14_add269_s)
            1'b0 : i_acl_14_add269_q = c_float_0_000000e_00304_q;
            1'b1 : i_acl_14_add269_q = bubble_select_i_llvm_fpga_mem_ml3211_add267_b;
            default : i_acl_14_add269_q = 32'b0;
        endcase
    end

    // bubble_join_i_llvm_fpga_mem_ml358_add265(BITJOIN,2984)
    assign bubble_join_i_llvm_fpga_mem_ml358_add265_q = i_llvm_fpga_mem_ml358_add265_out_o_readdata;

    // bubble_select_i_llvm_fpga_mem_ml358_add265(BITSELECT,2985)
    assign bubble_select_i_llvm_fpga_mem_ml358_add265_b = $unsigned(bubble_join_i_llvm_fpga_mem_ml358_add265_q[31:0]);

    // bubble_join_redist22_i_unnamed_add258_q_32_fifo(BITJOIN,3033)
    assign bubble_join_redist22_i_unnamed_add258_q_32_fifo_q = redist22_i_unnamed_add258_q_32_fifo_data_out;

    // bubble_select_redist22_i_unnamed_add258_q_32_fifo(BITSELECT,3034)
    assign bubble_select_redist22_i_unnamed_add258_q_32_fifo_b = $unsigned(bubble_join_redist22_i_unnamed_add258_q_32_fifo_q[0:0]);

    // i_acl_10_add268(MUX,331)@86
    assign i_acl_10_add268_s = bubble_select_redist22_i_unnamed_add258_q_32_fifo_b;
    always @(i_acl_10_add268_s or c_float_0_000000e_00304_q or bubble_select_i_llvm_fpga_mem_ml358_add265_b)
    begin
        unique case (i_acl_10_add268_s)
            1'b0 : i_acl_10_add268_q = c_float_0_000000e_00304_q;
            1'b1 : i_acl_10_add268_q = bubble_select_i_llvm_fpga_mem_ml358_add265_b;
            default : i_acl_10_add268_q = 32'b0;
        endcase
    end

    // i_sfc_s_c0_in_for_body28_adds_c0_enter1594_add271_aunroll_x(BLACKBOX,279)@86
    // in in_i_stall@20000000
    // out out_c0_exit163_0_tpl@92
    // out out_c0_exit163_1_tpl@92
    // out out_o_stall@20000000
    // out out_o_valid@92
    add_i_sfc_s_c0_in_for_body28_s_c0_enter1594_add271 thei_sfc_s_c0_in_for_body28_adds_c0_enter1594_add271_aunroll_x (
        .in_c0_eni2158_0_tpl(GND_q),
        .in_c0_eni2158_1_tpl(i_acl_10_add268_q),
        .in_c0_eni2158_2_tpl(i_acl_14_add269_q),
        .in_i_stall(SE_out_redist116_i_addr_add253_q_38_fifo_backStall),
        .in_i_valid(SE_out_redist22_i_unnamed_add258_q_32_fifo_V0),
        .out_c0_exit163_0_tpl(),
        .out_c0_exit163_1_tpl(i_sfc_s_c0_in_for_body28_adds_c0_enter1594_add271_aunroll_x_out_c0_exit163_1_tpl),
        .out_o_stall(i_sfc_s_c0_in_for_body28_adds_c0_enter1594_add271_aunroll_x_out_o_stall),
        .out_o_valid(i_sfc_s_c0_in_for_body28_adds_c0_enter1594_add271_aunroll_x_out_o_valid),
        .clock(clock),
        .resetn(resetn)
    );

    // redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0(REG,2762)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_q <= $unsigned(64'b0000000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_backEN == 1'b1)
        begin
            redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_q <= $unsigned(SR_SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_D0);
        end
    end

    // i_arrayidx5_i93_add0_dupName_1_add_x(ADD,138)@54
    assign i_arrayidx5_i93_add0_dupName_1_add_x_a = {1'b0, redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_q};
    assign i_arrayidx5_i93_add0_dupName_1_add_x_b = {1'b0, i_arrayidx17_i104_add0_c_i64_123_x_q};
    assign i_arrayidx5_i93_add0_dupName_1_add_x_o = $unsigned(i_arrayidx5_i93_add0_dupName_1_add_x_a) + $unsigned(i_arrayidx5_i93_add0_dupName_1_add_x_b);
    assign i_arrayidx5_i93_add0_dupName_1_add_x_q = i_arrayidx5_i93_add0_dupName_1_add_x_o[64:0];

    // i_arrayidx5_i93_add0_dupName_3_trunc_sel_x(BITSELECT,134)@54
    assign i_arrayidx5_i93_add0_dupName_3_trunc_sel_x_b = i_arrayidx5_i93_add0_dupName_1_add_x_q[63:0];

    // redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2(REG,2780)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_q <= $unsigned(64'b0000000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_backEN == 1'b1)
        begin
            redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_q <= $unsigned(SR_SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_D0);
        end
    end

    // i_arrayidx17_i104_add0_dupName_1_add_x(ADD,58)@54
    assign i_arrayidx17_i104_add0_dupName_1_add_x_a = {1'b0, redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_q};
    assign i_arrayidx17_i104_add0_dupName_1_add_x_b = {1'b0, i_arrayidx17_i104_add0_c_i64_123_x_q};
    assign i_arrayidx17_i104_add0_dupName_1_add_x_o = $unsigned(i_arrayidx17_i104_add0_dupName_1_add_x_a) + $unsigned(i_arrayidx17_i104_add0_dupName_1_add_x_b);
    assign i_arrayidx17_i104_add0_dupName_1_add_x_q = i_arrayidx17_i104_add0_dupName_1_add_x_o[64:0];

    // i_arrayidx17_i104_add0_dupName_3_trunc_sel_x(BITSELECT,54)@54
    assign i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_b = i_arrayidx17_i104_add0_dupName_1_add_x_q[63:0];

    // i_acl_20_add260(LOGICAL,334)@53 + 1
    assign i_acl_20_add260_qi = SR_SE_i_acl_20_add260_D0 & SR_SE_i_acl_20_add260_D1;
    dspba_delay_ver #( .width(1), .depth(1), .reset_kind("ASYNC"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_acl_20_add260_delay ( .xin(i_acl_20_add260_qi), .xout(i_acl_20_add260_q), .ena(SE_i_acl_20_add260_backEN[0]), .clk(clock), .aclr(resetn) );

    // i_acl_31_v_add264(MUX,336)@54
    assign i_acl_31_v_add264_s = i_acl_20_add260_q;
    always @(i_acl_31_v_add264_s or i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_b or i_arrayidx5_i93_add0_dupName_3_trunc_sel_x_b)
    begin
        unique case (i_acl_31_v_add264_s)
            1'b0 : i_acl_31_v_add264_q = i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_b;
            1'b1 : i_acl_31_v_add264_q = i_arrayidx5_i93_add0_dupName_3_trunc_sel_x_b;
            default : i_acl_31_v_add264_q = 64'b0;
        endcase
    end

    // i_llvm_fpga_mem_ml3211_add267(BLACKBOX,447)@54
    // in in_i_stall@20000000
    // out out_ml3211_add_avm_address@20000000
    // out out_ml3211_add_avm_burstcount@20000000
    // out out_ml3211_add_avm_byteenable@20000000
    // out out_ml3211_add_avm_enable@20000000
    // out out_ml3211_add_avm_read@20000000
    // out out_ml3211_add_avm_write@20000000
    // out out_ml3211_add_avm_writedata@20000000
    // out out_o_readdata@86
    // out out_o_stall@20000000
    // out out_o_valid@86
    add_i_llvm_fpga_mem_ml3211_0 thei_llvm_fpga_mem_ml3211_add267 (
        .in_flush(in_flush),
        .in_i_address(i_acl_31_v_add264_q),
        .in_i_dependence(bubble_select_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_b),
        .in_i_predicate(GND_q),
        .in_i_stall(SE_out_redist22_i_unnamed_add258_q_32_fifo_backStall),
        .in_i_valid(SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_V0),
        .in_ml3211_add_avm_readdata(in_ml3211_add_avm_readdata),
        .in_ml3211_add_avm_readdatavalid(in_ml3211_add_avm_readdatavalid),
        .in_ml3211_add_avm_waitrequest(in_ml3211_add_avm_waitrequest),
        .in_ml3211_add_avm_writeack(in_ml3211_add_avm_writeack),
        .out_ml3211_add_avm_address(i_llvm_fpga_mem_ml3211_add267_out_ml3211_add_avm_address),
        .out_ml3211_add_avm_burstcount(i_llvm_fpga_mem_ml3211_add267_out_ml3211_add_avm_burstcount),
        .out_ml3211_add_avm_byteenable(i_llvm_fpga_mem_ml3211_add267_out_ml3211_add_avm_byteenable),
        .out_ml3211_add_avm_enable(i_llvm_fpga_mem_ml3211_add267_out_ml3211_add_avm_enable),
        .out_ml3211_add_avm_read(i_llvm_fpga_mem_ml3211_add267_out_ml3211_add_avm_read),
        .out_ml3211_add_avm_write(i_llvm_fpga_mem_ml3211_add267_out_ml3211_add_avm_write),
        .out_ml3211_add_avm_writedata(i_llvm_fpga_mem_ml3211_add267_out_ml3211_add_avm_writedata),
        .out_o_readdata(i_llvm_fpga_mem_ml3211_add267_out_o_readdata),
        .out_o_stall(i_llvm_fpga_mem_ml3211_add267_out_o_stall),
        .out_o_valid(i_llvm_fpga_mem_ml3211_add267_out_o_valid),
        .clock(clock),
        .resetn(resetn)
    );

    // i_unnamed_add261(MUX,553)@53 + 1
    assign i_unnamed_add261_s = SR_SE_i_unnamed_add261_D0;
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_unnamed_add261_q <= 1'b0;
        end
        else if (SE_i_unnamed_add261_backEN == 1'b1)
        begin
            unique case (i_unnamed_add261_s)
                1'b0 : i_unnamed_add261_q <= SR_SE_i_unnamed_add261_D1;
                1'b1 : i_unnamed_add261_q <= SR_SE_i_unnamed_add261_D2;
                default : i_unnamed_add261_q <= 1'b0;
            endcase
        end
    end

    // redist21_i_unnamed_add261_q_33_fifo(STALLFIFO,2597)
    assign redist21_i_unnamed_add261_q_33_fifo_valid_in = SE_i_unnamed_add261_V0;
    assign redist21_i_unnamed_add261_q_33_fifo_stall_in = SE_out_redist22_i_unnamed_add258_q_32_fifo_backStall;
    assign redist21_i_unnamed_add261_q_33_fifo_data_in = i_unnamed_add261_q;
    assign redist21_i_unnamed_add261_q_33_fifo_valid_in_bitsignaltemp = redist21_i_unnamed_add261_q_33_fifo_valid_in[0];
    assign redist21_i_unnamed_add261_q_33_fifo_stall_in_bitsignaltemp = redist21_i_unnamed_add261_q_33_fifo_stall_in[0];
    assign redist21_i_unnamed_add261_q_33_fifo_valid_out[0] = redist21_i_unnamed_add261_q_33_fifo_valid_out_bitsignaltemp;
    assign redist21_i_unnamed_add261_q_33_fifo_stall_out[0] = redist21_i_unnamed_add261_q_33_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(33),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(1),
        .IMPL("ram")
    ) theredist21_i_unnamed_add261_q_33_fifo (
        .valid_in(redist21_i_unnamed_add261_q_33_fifo_valid_in_bitsignaltemp),
        .stall_in(redist21_i_unnamed_add261_q_33_fifo_stall_in_bitsignaltemp),
        .data_in(i_unnamed_add261_q),
        .valid_out(redist21_i_unnamed_add261_q_33_fifo_valid_out_bitsignaltemp),
        .stall_out(redist21_i_unnamed_add261_q_33_fifo_stall_out_bitsignaltemp),
        .data_out(redist21_i_unnamed_add261_q_33_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // i_unnamed_add258(MUX,552)@54 + 1
    assign i_unnamed_add258_s = SR_SE_i_unnamed_add258_D0;
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            i_unnamed_add258_q <= 1'b0;
        end
        else if (SE_i_unnamed_add258_backEN == 1'b1)
        begin
            unique case (i_unnamed_add258_s)
                1'b0 : i_unnamed_add258_q <= SR_SE_i_unnamed_add258_D1;
                1'b1 : i_unnamed_add258_q <= SR_SE_i_unnamed_add258_D2;
                default : i_unnamed_add258_q <= 1'b0;
            endcase
        end
    end

    // redist22_i_unnamed_add258_q_32_fifo(STALLFIFO,2598)
    assign redist22_i_unnamed_add258_q_32_fifo_valid_in = SE_i_unnamed_add258_V0;
    assign redist22_i_unnamed_add258_q_32_fifo_stall_in = SE_out_redist22_i_unnamed_add258_q_32_fifo_backStall;
    assign redist22_i_unnamed_add258_q_32_fifo_data_in = i_unnamed_add258_q;
    assign redist22_i_unnamed_add258_q_32_fifo_valid_in_bitsignaltemp = redist22_i_unnamed_add258_q_32_fifo_valid_in[0];
    assign redist22_i_unnamed_add258_q_32_fifo_stall_in_bitsignaltemp = redist22_i_unnamed_add258_q_32_fifo_stall_in[0];
    assign redist22_i_unnamed_add258_q_32_fifo_valid_out[0] = redist22_i_unnamed_add258_q_32_fifo_valid_out_bitsignaltemp;
    assign redist22_i_unnamed_add258_q_32_fifo_stall_out[0] = redist22_i_unnamed_add258_q_32_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(32),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(1),
        .IMPL("ram")
    ) theredist22_i_unnamed_add258_q_32_fifo (
        .valid_in(redist22_i_unnamed_add258_q_32_fifo_valid_in_bitsignaltemp),
        .stall_in(redist22_i_unnamed_add258_q_32_fifo_stall_in_bitsignaltemp),
        .data_in(i_unnamed_add258_q),
        .valid_out(redist22_i_unnamed_add258_q_32_fifo_valid_out_bitsignaltemp),
        .stall_out(redist22_i_unnamed_add258_q_32_fifo_stall_out_bitsignaltemp),
        .data_out(redist22_i_unnamed_add258_q_32_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_redist22_i_unnamed_add258_q_32_fifo(STALLENABLE,3730)
    // Valid signal propagation
    assign SE_out_redist22_i_unnamed_add258_q_32_fifo_V0 = SE_out_redist22_i_unnamed_add258_q_32_fifo_wireValid;
    // Backward Stall generation
    assign SE_out_redist22_i_unnamed_add258_q_32_fifo_backStall = i_sfc_s_c0_in_for_body28_adds_c0_enter1594_add271_aunroll_x_out_o_stall | ~ (SE_out_redist22_i_unnamed_add258_q_32_fifo_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_redist22_i_unnamed_add258_q_32_fifo_and0 = redist22_i_unnamed_add258_q_32_fifo_valid_out;
    assign SE_out_redist22_i_unnamed_add258_q_32_fifo_and1 = redist21_i_unnamed_add261_q_33_fifo_valid_out & SE_out_redist22_i_unnamed_add258_q_32_fifo_and0;
    assign SE_out_redist22_i_unnamed_add258_q_32_fifo_and2 = i_llvm_fpga_mem_ml358_add265_out_o_valid & SE_out_redist22_i_unnamed_add258_q_32_fifo_and1;
    assign SE_out_redist22_i_unnamed_add258_q_32_fifo_wireValid = i_llvm_fpga_mem_ml3211_add267_out_o_valid & SE_out_redist22_i_unnamed_add258_q_32_fifo_and2;

    // bubble_join_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo(BITJOIN,3039)
    assign bubble_join_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_q = redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_data_out;

    // bubble_select_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo(BITSELECT,3040)
    assign bubble_select_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_b = $unsigned(bubble_join_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_q[0:0]);

    // bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5(BITJOIN,2931)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_q = i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_out_dest_data_out_36_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5(BITSELECT,2932)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_q[63:0]);

    // i_arrayidx5_i132_add0_narrow_x(BITSELECT,129)@53
    assign i_arrayidx5_i132_add0_narrow_x_b = bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_b[61:0];

    // i_arrayidx5_i132_add0_shift_join_x(BITJOIN,130)@53
    assign i_arrayidx5_i132_add0_shift_join_x_q = {i_arrayidx5_i132_add0_narrow_x_b, i_arrayidx17_i104_add0_c_i2_02_x_q};

    // redist170_i_arrayidx5_i132_add0_trunc_sel_x_b_1_0(REG,2764)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist170_i_arrayidx5_i132_add0_trunc_sel_x_b_1_0_q <= $unsigned(64'b0000000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_backEN == 1'b1)
        begin
            redist170_i_arrayidx5_i132_add0_trunc_sel_x_b_1_0_q <= $unsigned(SR_SE_redist56_i_llvm_fpga_pop_i32_j_0440_pop8_add49_out_data_out_51_1_D3);
        end
    end

    // bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4(BITJOIN,2949)
    assign bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_q = i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_out_dest_data_out_0_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4(BITSELECT,2950)
    assign bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_q[63:0]);

    // i_arrayidx5_i132_add0_add_x(ADD,124)@52
    assign i_arrayidx5_i132_add0_add_x_a = {1'b0, bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46621_add4_b};
    assign i_arrayidx5_i132_add0_add_x_b = {1'b0, redist170_i_arrayidx5_i132_add0_trunc_sel_x_b_1_0_q};
    assign i_arrayidx5_i132_add0_add_x_o = $unsigned(i_arrayidx5_i132_add0_add_x_a) + $unsigned(i_arrayidx5_i132_add0_add_x_b);
    assign i_arrayidx5_i132_add0_add_x_q = i_arrayidx5_i132_add0_add_x_o[64:0];

    // i_arrayidx5_i132_add0_dupName_0_trunc_sel_x(BITSELECT,112)@52
    assign i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b = i_arrayidx5_i132_add0_add_x_q[63:0];

    // redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0(REG,2766)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_q <= $unsigned(64'b0000000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_backEN == 1'b1)
        begin
            redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_q <= $unsigned(i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b);
        end
    end

    // i_arrayidx5_i132_add0_dupName_0_add_x(ADD,116)@53
    assign i_arrayidx5_i132_add0_dupName_0_add_x_a = {1'b0, redist172_i_arrayidx5_i132_add0_dupName_0_trunc_sel_x_b_1_0_q};
    assign i_arrayidx5_i132_add0_dupName_0_add_x_b = {1'b0, i_arrayidx5_i132_add0_shift_join_x_q};
    assign i_arrayidx5_i132_add0_dupName_0_add_x_o = $unsigned(i_arrayidx5_i132_add0_dupName_0_add_x_a) + $unsigned(i_arrayidx5_i132_add0_dupName_0_add_x_b);
    assign i_arrayidx5_i132_add0_dupName_0_add_x_q = i_arrayidx5_i132_add0_dupName_0_add_x_o[64:0];

    // i_arrayidx5_i132_add0_dupName_2_trunc_sel_x(BITSELECT,113)@53
    assign i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b = i_arrayidx5_i132_add0_dupName_0_add_x_q[63:0];

    // redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0(REG,2765)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_q <= $unsigned(64'b0000000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_backEN == 1'b1)
        begin
            redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_q <= $unsigned(i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b);
        end
    end

    // i_arrayidx5_i132_add0_dupName_1_add_x(ADD,118)@54
    assign i_arrayidx5_i132_add0_dupName_1_add_x_a = {1'b0, redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_q};
    assign i_arrayidx5_i132_add0_dupName_1_add_x_b = {1'b0, i_arrayidx17_i104_add0_c_i64_123_x_q};
    assign i_arrayidx5_i132_add0_dupName_1_add_x_o = $unsigned(i_arrayidx5_i132_add0_dupName_1_add_x_a) + $unsigned(i_arrayidx5_i132_add0_dupName_1_add_x_b);
    assign i_arrayidx5_i132_add0_dupName_1_add_x_q = i_arrayidx5_i132_add0_dupName_1_add_x_o[64:0];

    // i_arrayidx5_i132_add0_dupName_3_trunc_sel_x(BITSELECT,114)@54
    assign i_arrayidx5_i132_add0_dupName_3_trunc_sel_x_b = i_arrayidx5_i132_add0_dupName_1_add_x_q[63:0];

    // lowRangeB_uid1372_i_arrayidx17_i159_add0_mult_x_im9_merged_bit_select(BITSELECT,2380)@50
    assign lowRangeB_uid1372_i_arrayidx17_i159_add0_mult_x_im9_merged_bit_select_b = i_arrayidx17_i159_add0_mult_x_bs1_merged_bit_select_e[0:0];
    assign lowRangeB_uid1372_i_arrayidx17_i159_add0_mult_x_im9_merged_bit_select_c = i_arrayidx17_i159_add0_mult_x_bs1_merged_bit_select_e[9:1];

    // bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8(BITJOIN,2928)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_q = i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_out_dest_data_out_36_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8(BITSELECT,2929)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_q[63:0]);

    // i_arrayidx17_i159_add0_mult_x_bs1_merged_bit_select(BITSELECT,2360)@50
    assign i_arrayidx17_i159_add0_mult_x_bs1_merged_bit_select_b = bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_b[17:0];
    assign i_arrayidx17_i159_add0_mult_x_bs1_merged_bit_select_c = bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_b[35:18];
    assign i_arrayidx17_i159_add0_mult_x_bs1_merged_bit_select_d = bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_b[53:36];
    assign i_arrayidx17_i159_add0_mult_x_bs1_merged_bit_select_e = bubble_select_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156103_add8_b[63:54];

    // lev1_a0sumAHighB_uid1374_i_arrayidx17_i159_add0_mult_x_im9(ADD,1373)@50 + 1
    assign lev1_a0sumAHighB_uid1374_i_arrayidx17_i159_add0_mult_x_im9_a = {1'b0, i_arrayidx17_i159_add0_mult_x_bs1_merged_bit_select_e};
    assign lev1_a0sumAHighB_uid1374_i_arrayidx17_i159_add0_mult_x_im9_b = {2'b00, lowRangeB_uid1372_i_arrayidx17_i159_add0_mult_x_im9_merged_bit_select_c};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            lev1_a0sumAHighB_uid1374_i_arrayidx17_i159_add0_mult_x_im9_o <= 11'b0;
        end
        else if (SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_backEN == 1'b1)
        begin
            lev1_a0sumAHighB_uid1374_i_arrayidx17_i159_add0_mult_x_im9_o <= $unsigned(lev1_a0sumAHighB_uid1374_i_arrayidx17_i159_add0_mult_x_im9_a) + $unsigned(lev1_a0sumAHighB_uid1374_i_arrayidx17_i159_add0_mult_x_im9_b);
        end
    end
    assign lev1_a0sumAHighB_uid1374_i_arrayidx17_i159_add0_mult_x_im9_q = lev1_a0sumAHighB_uid1374_i_arrayidx17_i159_add0_mult_x_im9_o[10:0];

    // redist0_lowRangeB_uid1372_i_arrayidx17_i159_add0_mult_x_im9_merged_bit_select_b_1_0(REG,2576)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist0_lowRangeB_uid1372_i_arrayidx17_i159_add0_mult_x_im9_merged_bit_select_b_1_0_q <= $unsigned(1'b0);
        end
        else if (SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist0_lowRangeB_uid1372_i_arrayidx17_i159_add0_mult_x_im9_merged_bit_select_b_1_0_q <= $unsigned(lowRangeB_uid1372_i_arrayidx17_i159_add0_mult_x_im9_merged_bit_select_b);
        end
    end

    // lev1_a0_uid1375_i_arrayidx17_i159_add0_mult_x_im9(BITJOIN,1374)@51
    assign lev1_a0_uid1375_i_arrayidx17_i159_add0_mult_x_im9_q = {lev1_a0sumAHighB_uid1374_i_arrayidx17_i159_add0_mult_x_im9_q, redist0_lowRangeB_uid1372_i_arrayidx17_i159_add0_mult_x_im9_merged_bit_select_b_1_0_q};

    // sR_mergedSignalTM_uid1380_i_arrayidx17_i159_add0_mult_x_im9(BITJOIN,1379)@51
    assign sR_mergedSignalTM_uid1380_i_arrayidx17_i159_add0_mult_x_im9_q = {lev1_a0_uid1375_i_arrayidx17_i159_add0_mult_x_im9_q, sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q};

    // i_arrayidx17_i159_add0_mult_x_sums_align_3(BITSHIFT,823)@51
    assign i_arrayidx17_i159_add0_mult_x_sums_align_3_qint = { sR_mergedSignalTM_uid1380_i_arrayidx17_i159_add0_mult_x_im9_q, 4'b0000 };
    assign i_arrayidx17_i159_add0_mult_x_sums_align_3_q = i_arrayidx17_i159_add0_mult_x_sums_align_3_qint[27:0];

    // lowRangeB_uid1248_i_arrayidx17_i159_add0_mult_x_im3_merged_bit_select(BITSELECT,2378)@50
    assign lowRangeB_uid1248_i_arrayidx17_i159_add0_mult_x_im3_merged_bit_select_b = i_arrayidx17_i159_add0_mult_x_bs1_merged_bit_select_c[0:0];
    assign lowRangeB_uid1248_i_arrayidx17_i159_add0_mult_x_im3_merged_bit_select_c = i_arrayidx17_i159_add0_mult_x_bs1_merged_bit_select_c[17:1];

    // lev1_a0sumAHighB_uid1250_i_arrayidx17_i159_add0_mult_x_im3(ADD,1249)@50 + 1
    assign lev1_a0sumAHighB_uid1250_i_arrayidx17_i159_add0_mult_x_im3_a = {1'b0, i_arrayidx17_i159_add0_mult_x_bs1_merged_bit_select_c};
    assign lev1_a0sumAHighB_uid1250_i_arrayidx17_i159_add0_mult_x_im3_b = {2'b00, lowRangeB_uid1248_i_arrayidx17_i159_add0_mult_x_im3_merged_bit_select_c};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            lev1_a0sumAHighB_uid1250_i_arrayidx17_i159_add0_mult_x_im3_o <= 19'b0;
        end
        else if (SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_backEN == 1'b1)
        begin
            lev1_a0sumAHighB_uid1250_i_arrayidx17_i159_add0_mult_x_im3_o <= $unsigned(lev1_a0sumAHighB_uid1250_i_arrayidx17_i159_add0_mult_x_im3_a) + $unsigned(lev1_a0sumAHighB_uid1250_i_arrayidx17_i159_add0_mult_x_im3_b);
        end
    end
    assign lev1_a0sumAHighB_uid1250_i_arrayidx17_i159_add0_mult_x_im3_q = lev1_a0sumAHighB_uid1250_i_arrayidx17_i159_add0_mult_x_im3_o[18:0];

    // redist2_lowRangeB_uid1248_i_arrayidx17_i159_add0_mult_x_im3_merged_bit_select_b_1_0(REG,2578)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist2_lowRangeB_uid1248_i_arrayidx17_i159_add0_mult_x_im3_merged_bit_select_b_1_0_q <= $unsigned(1'b0);
        end
        else if (SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist2_lowRangeB_uid1248_i_arrayidx17_i159_add0_mult_x_im3_merged_bit_select_b_1_0_q <= $unsigned(lowRangeB_uid1248_i_arrayidx17_i159_add0_mult_x_im3_merged_bit_select_b);
        end
    end

    // lev1_a0_uid1251_i_arrayidx17_i159_add0_mult_x_im3(BITJOIN,1250)@51
    assign lev1_a0_uid1251_i_arrayidx17_i159_add0_mult_x_im3_q = {lev1_a0sumAHighB_uid1250_i_arrayidx17_i159_add0_mult_x_im3_q, redist2_lowRangeB_uid1248_i_arrayidx17_i159_add0_mult_x_im3_merged_bit_select_b_1_0_q};

    // sR_mergedSignalTM_uid1256_i_arrayidx17_i159_add0_mult_x_im3(BITJOIN,1255)@51
    assign sR_mergedSignalTM_uid1256_i_arrayidx17_i159_add0_mult_x_im3_q = {lev1_a0_uid1251_i_arrayidx17_i159_add0_mult_x_im3_q, sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q};

    // i_arrayidx17_i159_add0_mult_x_sums_align_2(BITSHIFT,822)@51
    assign i_arrayidx17_i159_add0_mult_x_sums_align_2_qint = { sR_mergedSignalTM_uid1256_i_arrayidx17_i159_add0_mult_x_im3_q, 18'b000000000000000000 };
    assign i_arrayidx17_i159_add0_mult_x_sums_align_2_q = i_arrayidx17_i159_add0_mult_x_sums_align_2_qint[49:0];

    // i_arrayidx17_i159_add0_mult_x_sums_join_4(BITJOIN,824)@51
    assign i_arrayidx17_i159_add0_mult_x_sums_join_4_q = {i_arrayidx17_i159_add0_mult_x_sums_align_3_q, i_arrayidx17_i159_add0_mult_x_sums_align_2_q};

    // lowRangeB_uid1310_i_arrayidx17_i159_add0_mult_x_im6_merged_bit_select(BITSELECT,2379)@50
    assign lowRangeB_uid1310_i_arrayidx17_i159_add0_mult_x_im6_merged_bit_select_b = i_arrayidx17_i159_add0_mult_x_bs1_merged_bit_select_d[0:0];
    assign lowRangeB_uid1310_i_arrayidx17_i159_add0_mult_x_im6_merged_bit_select_c = i_arrayidx17_i159_add0_mult_x_bs1_merged_bit_select_d[17:1];

    // lev1_a0sumAHighB_uid1312_i_arrayidx17_i159_add0_mult_x_im6(ADD,1311)@50 + 1
    assign lev1_a0sumAHighB_uid1312_i_arrayidx17_i159_add0_mult_x_im6_a = {1'b0, i_arrayidx17_i159_add0_mult_x_bs1_merged_bit_select_d};
    assign lev1_a0sumAHighB_uid1312_i_arrayidx17_i159_add0_mult_x_im6_b = {2'b00, lowRangeB_uid1310_i_arrayidx17_i159_add0_mult_x_im6_merged_bit_select_c};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            lev1_a0sumAHighB_uid1312_i_arrayidx17_i159_add0_mult_x_im6_o <= 19'b0;
        end
        else if (SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_backEN == 1'b1)
        begin
            lev1_a0sumAHighB_uid1312_i_arrayidx17_i159_add0_mult_x_im6_o <= $unsigned(lev1_a0sumAHighB_uid1312_i_arrayidx17_i159_add0_mult_x_im6_a) + $unsigned(lev1_a0sumAHighB_uid1312_i_arrayidx17_i159_add0_mult_x_im6_b);
        end
    end
    assign lev1_a0sumAHighB_uid1312_i_arrayidx17_i159_add0_mult_x_im6_q = lev1_a0sumAHighB_uid1312_i_arrayidx17_i159_add0_mult_x_im6_o[18:0];

    // redist1_lowRangeB_uid1310_i_arrayidx17_i159_add0_mult_x_im6_merged_bit_select_b_1_0(REG,2577)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist1_lowRangeB_uid1310_i_arrayidx17_i159_add0_mult_x_im6_merged_bit_select_b_1_0_q <= $unsigned(1'b0);
        end
        else if (SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist1_lowRangeB_uid1310_i_arrayidx17_i159_add0_mult_x_im6_merged_bit_select_b_1_0_q <= $unsigned(lowRangeB_uid1310_i_arrayidx17_i159_add0_mult_x_im6_merged_bit_select_b);
        end
    end

    // lev1_a0_uid1313_i_arrayidx17_i159_add0_mult_x_im6(BITJOIN,1312)@51
    assign lev1_a0_uid1313_i_arrayidx17_i159_add0_mult_x_im6_q = {lev1_a0sumAHighB_uid1312_i_arrayidx17_i159_add0_mult_x_im6_q, redist1_lowRangeB_uid1310_i_arrayidx17_i159_add0_mult_x_im6_merged_bit_select_b_1_0_q};

    // sR_mergedSignalTM_uid1318_i_arrayidx17_i159_add0_mult_x_im6(BITJOIN,1317)@51
    assign sR_mergedSignalTM_uid1318_i_arrayidx17_i159_add0_mult_x_im6_q = {lev1_a0_uid1313_i_arrayidx17_i159_add0_mult_x_im6_q, sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q};

    // i_arrayidx17_i159_add0_mult_x_sums_align_0(BITSHIFT,820)@51
    assign i_arrayidx17_i159_add0_mult_x_sums_align_0_qint = { sR_mergedSignalTM_uid1318_i_arrayidx17_i159_add0_mult_x_im6_q, 4'b0000 };
    assign i_arrayidx17_i159_add0_mult_x_sums_align_0_q = i_arrayidx17_i159_add0_mult_x_sums_align_0_qint[35:0];

    // lowRangeB_uid1186_i_arrayidx17_i159_add0_mult_x_im0_merged_bit_select(BITSELECT,2377)@50
    assign lowRangeB_uid1186_i_arrayidx17_i159_add0_mult_x_im0_merged_bit_select_b = i_arrayidx17_i159_add0_mult_x_bs1_merged_bit_select_b[0:0];
    assign lowRangeB_uid1186_i_arrayidx17_i159_add0_mult_x_im0_merged_bit_select_c = i_arrayidx17_i159_add0_mult_x_bs1_merged_bit_select_b[17:1];

    // lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0(ADD,1187)@50 + 1
    assign lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_a = {1'b0, i_arrayidx17_i159_add0_mult_x_bs1_merged_bit_select_b};
    assign lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_b = {2'b00, lowRangeB_uid1186_i_arrayidx17_i159_add0_mult_x_im0_merged_bit_select_c};
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_o <= 19'b0;
        end
        else if (SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_backEN == 1'b1)
        begin
            lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_o <= $unsigned(lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_a) + $unsigned(lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_b);
        end
    end
    assign lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_q = lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_o[18:0];

    // redist3_lowRangeB_uid1186_i_arrayidx17_i159_add0_mult_x_im0_merged_bit_select_b_1_0(REG,2579)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist3_lowRangeB_uid1186_i_arrayidx17_i159_add0_mult_x_im0_merged_bit_select_b_1_0_q <= $unsigned(1'b0);
        end
        else if (SE_lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_backEN == 1'b1)
        begin
            redist3_lowRangeB_uid1186_i_arrayidx17_i159_add0_mult_x_im0_merged_bit_select_b_1_0_q <= $unsigned(lowRangeB_uid1186_i_arrayidx17_i159_add0_mult_x_im0_merged_bit_select_b);
        end
    end

    // lev1_a0_uid1189_i_arrayidx17_i159_add0_mult_x_im0(BITJOIN,1188)@51
    assign lev1_a0_uid1189_i_arrayidx17_i159_add0_mult_x_im0_q = {lev1_a0sumAHighB_uid1188_i_arrayidx17_i159_add0_mult_x_im0_q, redist3_lowRangeB_uid1186_i_arrayidx17_i159_add0_mult_x_im0_merged_bit_select_b_1_0_q};

    // sR_mergedSignalTM_uid1194_i_arrayidx17_i159_add0_mult_x_im0(BITJOIN,1193)@51
    assign sR_mergedSignalTM_uid1194_i_arrayidx17_i159_add0_mult_x_im0_q = {lev1_a0_uid1189_i_arrayidx17_i159_add0_mult_x_im0_q, sR_bottomExtension_uid956_i_arrayidx17_i104_add0_mult_x_im0_q};

    // i_arrayidx17_i159_add0_mult_x_sums_join_1(BITJOIN,821)@51
    assign i_arrayidx17_i159_add0_mult_x_sums_join_1_q = {i_arrayidx17_i159_add0_mult_x_sums_align_0_q, sR_mergedSignalTM_uid1194_i_arrayidx17_i159_add0_mult_x_im0_q};

    // i_arrayidx17_i159_add0_mult_x_sums_result_add_0_0(ADD,825)@51
    assign i_arrayidx17_i159_add0_mult_x_sums_result_add_0_0_a = {11'b00000000000, i_arrayidx17_i159_add0_mult_x_sums_join_1_q};
    assign i_arrayidx17_i159_add0_mult_x_sums_result_add_0_0_b = {1'b0, i_arrayidx17_i159_add0_mult_x_sums_join_4_q};
    assign i_arrayidx17_i159_add0_mult_x_sums_result_add_0_0_o = $unsigned(i_arrayidx17_i159_add0_mult_x_sums_result_add_0_0_a) + $unsigned(i_arrayidx17_i159_add0_mult_x_sums_result_add_0_0_b);
    assign i_arrayidx17_i159_add0_mult_x_sums_result_add_0_0_q = i_arrayidx17_i159_add0_mult_x_sums_result_add_0_0_o[78:0];

    // i_arrayidx17_i159_add0_mult_extender_x(BITJOIN,81)@51
    assign i_arrayidx17_i159_add0_mult_extender_x_q = {i_arrayidx17_i104_add0_mult_multconst_x_q, i_arrayidx17_i159_add0_mult_x_sums_result_add_0_0_q[77:0]};

    // i_arrayidx17_i159_add0_trunc_sel_x(BITSELECT,83)@51
    assign i_arrayidx17_i159_add0_trunc_sel_x_b = i_arrayidx17_i159_add0_mult_extender_x_q[63:0];

    // redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0(REG,2773)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_q <= $unsigned(64'b0000000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_backEN == 1'b1)
        begin
            redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_q <= $unsigned(i_arrayidx17_i159_add0_trunc_sel_x_b);
        end
    end

    // bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7(BITJOIN,2946)
    assign bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_q = i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_out_dest_data_out_0_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7(BITSELECT,2947)
    assign bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_q[63:0]);

    // i_arrayidx17_i159_add0_add_x(ADD,84)@52
    assign i_arrayidx17_i159_add0_add_x_a = {1'b0, bubble_select_i_llvm_fpga_ffwd_dest_p1024s_class_tensorxls_a46620_add7_b};
    assign i_arrayidx17_i159_add0_add_x_b = {1'b0, redist177_i_arrayidx17_i159_add0_trunc_sel_x_b_1_0_q};
    assign i_arrayidx17_i159_add0_add_x_o = $unsigned(i_arrayidx17_i159_add0_add_x_a) + $unsigned(i_arrayidx17_i159_add0_add_x_b);
    assign i_arrayidx17_i159_add0_add_x_q = i_arrayidx17_i159_add0_add_x_o[64:0];

    // i_arrayidx17_i159_add0_dupName_0_trunc_sel_x(BITSELECT,72)@52
    assign i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b = i_arrayidx17_i159_add0_add_x_q[63:0];

    // redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0(REG,2775)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_q <= $unsigned(64'b0000000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_backEN == 1'b1)
        begin
            redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_q <= $unsigned(i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b);
        end
    end

    // i_arrayidx17_i159_add0_dupName_0_add_x(ADD,76)@53
    assign i_arrayidx17_i159_add0_dupName_0_add_x_a = {1'b0, redist179_i_arrayidx17_i159_add0_dupName_0_trunc_sel_x_b_1_0_q};
    assign i_arrayidx17_i159_add0_dupName_0_add_x_b = {1'b0, i_arrayidx17_i159_add0_shift_join_x_q};
    assign i_arrayidx17_i159_add0_dupName_0_add_x_o = $unsigned(i_arrayidx17_i159_add0_dupName_0_add_x_a) + $unsigned(i_arrayidx17_i159_add0_dupName_0_add_x_b);
    assign i_arrayidx17_i159_add0_dupName_0_add_x_q = i_arrayidx17_i159_add0_dupName_0_add_x_o[64:0];

    // i_arrayidx17_i159_add0_dupName_2_trunc_sel_x(BITSELECT,73)@53
    assign i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b = i_arrayidx17_i159_add0_dupName_0_add_x_q[63:0];

    // redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0(REG,2774)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_q <= $unsigned(64'b0000000000000000000000000000000000000000000000000000000000000000);
        end
        else if (SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_backEN == 1'b1)
        begin
            redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_q <= $unsigned(i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b);
        end
    end

    // i_arrayidx17_i159_add0_dupName_1_add_x(ADD,78)@54
    assign i_arrayidx17_i159_add0_dupName_1_add_x_a = {1'b0, redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_q};
    assign i_arrayidx17_i159_add0_dupName_1_add_x_b = {1'b0, i_arrayidx17_i104_add0_c_i64_123_x_q};
    assign i_arrayidx17_i159_add0_dupName_1_add_x_o = $unsigned(i_arrayidx17_i159_add0_dupName_1_add_x_a) + $unsigned(i_arrayidx17_i159_add0_dupName_1_add_x_b);
    assign i_arrayidx17_i159_add0_dupName_1_add_x_q = i_arrayidx17_i159_add0_dupName_1_add_x_o[64:0];

    // i_arrayidx17_i159_add0_dupName_3_trunc_sel_x(BITSELECT,74)@54
    assign i_arrayidx17_i159_add0_dupName_3_trunc_sel_x_b = i_arrayidx17_i159_add0_dupName_1_add_x_q[63:0];

    // bubble_join_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo(BITJOIN,3054)
    assign bubble_join_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_q = redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_data_out;

    // bubble_select_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo(BITSELECT,3055)
    assign bubble_select_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_b = $unsigned(bubble_join_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_q[0:0]);

    // i_acl_15_add257(LOGICAL,333)@54
    assign i_acl_15_add257_q = i_or_cond432_add251_q & bubble_select_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_b;

    // i_acl_34_v_add262(MUX,337)@54
    assign i_acl_34_v_add262_s = i_acl_15_add257_q;
    always @(i_acl_34_v_add262_s or i_arrayidx17_i159_add0_dupName_3_trunc_sel_x_b or i_arrayidx5_i132_add0_dupName_3_trunc_sel_x_b)
    begin
        unique case (i_acl_34_v_add262_s)
            1'b0 : i_acl_34_v_add262_q = i_arrayidx17_i159_add0_dupName_3_trunc_sel_x_b;
            1'b1 : i_acl_34_v_add262_q = i_arrayidx5_i132_add0_dupName_3_trunc_sel_x_b;
            default : i_acl_34_v_add262_q = 64'b0;
        endcase
    end

    // i_llvm_fpga_mem_ml358_add265(BLACKBOX,448)@54
    // in in_i_stall@20000000
    // out out_ml358_add_avm_address@20000000
    // out out_ml358_add_avm_burstcount@20000000
    // out out_ml358_add_avm_byteenable@20000000
    // out out_ml358_add_avm_enable@20000000
    // out out_ml358_add_avm_read@20000000
    // out out_ml358_add_avm_write@20000000
    // out out_ml358_add_avm_writedata@20000000
    // out out_o_readdata@86
    // out out_o_stall@20000000
    // out out_o_valid@86
    add_i_llvm_fpga_mem_ml358_0 thei_llvm_fpga_mem_ml358_add265 (
        .in_flush(in_flush),
        .in_i_address(i_acl_34_v_add262_q),
        .in_i_dependence(bubble_select_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_b),
        .in_i_predicate(GND_q),
        .in_i_stall(SE_out_redist22_i_unnamed_add258_q_32_fifo_backStall),
        .in_i_valid(SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_V0),
        .in_ml358_add_avm_readdata(in_ml358_add_avm_readdata),
        .in_ml358_add_avm_readdatavalid(in_ml358_add_avm_readdatavalid),
        .in_ml358_add_avm_waitrequest(in_ml358_add_avm_waitrequest),
        .in_ml358_add_avm_writeack(in_ml358_add_avm_writeack),
        .out_ml358_add_avm_address(i_llvm_fpga_mem_ml358_add265_out_ml358_add_avm_address),
        .out_ml358_add_avm_burstcount(i_llvm_fpga_mem_ml358_add265_out_ml358_add_avm_burstcount),
        .out_ml358_add_avm_byteenable(i_llvm_fpga_mem_ml358_add265_out_ml358_add_avm_byteenable),
        .out_ml358_add_avm_enable(i_llvm_fpga_mem_ml358_add265_out_ml358_add_avm_enable),
        .out_ml358_add_avm_read(i_llvm_fpga_mem_ml358_add265_out_ml358_add_avm_read),
        .out_ml358_add_avm_write(i_llvm_fpga_mem_ml358_add265_out_ml358_add_avm_write),
        .out_ml358_add_avm_writedata(i_llvm_fpga_mem_ml358_add265_out_ml358_add_avm_writedata),
        .out_o_readdata(i_llvm_fpga_mem_ml358_add265_out_o_readdata),
        .out_o_stall(i_llvm_fpga_mem_ml358_add265_out_o_stall),
        .out_o_valid(i_llvm_fpga_mem_ml358_add265_out_o_valid),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0(STALLENABLE,3910)
    // Valid signal propagation
    assign SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_V0 = SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_s_tv_0 = SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_backStall & SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_backEN = ~ (SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_v_s_0 = SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_backEN & SE_out_i_llvm_fpga_ffwd_dest_i64_idxprom14_i156104_add5_V0;
    // Backward Stall generation
    assign SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_backStall = ~ (SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_backEN == 1'b0)
            begin
                SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0 <= SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0 & SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_s_tv_0;
            end
            else
            begin
                SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0 <= SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_v_s_0;
            end

        end
    end

    // SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0(STALLENABLE,3919)
    // Valid signal propagation
    assign SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_V0 = SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0;
    // Stall signal propagation
    assign SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_s_tv_0 = SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_backStall & SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0;
    // Backward Enable generation
    assign SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_backEN = ~ (SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_s_tv_0);
    // Determine whether to write valid data into the first register stage
    assign SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_v_s_0 = SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_backEN & SE_i_arrayidx17_i159_add0_dupName_0_add_x_V0;
    // Backward Stall generation
    assign SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_backStall = ~ (SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0 <= 1'b0;
        end
        else
        begin
            if (SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_backEN == 1'b0)
            begin
                SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0 <= SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0 & SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_s_tv_0;
            end
            else
            begin
                SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_R_v_0 <= SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_v_s_0;
            end

        end
    end

    // SE_i_or_cond432_add251(STALLENABLE,3471)
    // Valid signal propagation
    assign SE_i_or_cond432_add251_V0 = SE_i_or_cond432_add251_R_v_0;
    assign SE_i_or_cond432_add251_V1 = SE_i_or_cond432_add251_R_v_1;
    // Stall signal propagation
    assign SE_i_or_cond432_add251_s_tv_0 = SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_backStall & SE_i_or_cond432_add251_R_v_0;
    assign SE_i_or_cond432_add251_s_tv_1 = SR_SE_i_unnamed_add258_backStall & SE_i_or_cond432_add251_R_v_1;
    // Backward Enable generation
    assign SE_i_or_cond432_add251_or0 = SE_i_or_cond432_add251_s_tv_0;
    assign SE_i_or_cond432_add251_backEN = ~ (SE_i_or_cond432_add251_s_tv_1 | SE_i_or_cond432_add251_or0);
    // Determine whether to write valid data into the first register stage
    assign SE_i_or_cond432_add251_and0 = SE_i_cmp2_i126_add232_V0 & SE_i_or_cond432_add251_backEN;
    assign SE_i_or_cond432_add251_v_s_0 = SE_out_redist111_i_llvm_fpga_ffwd_dest_i1_tobool_i_i35_add2_out_dest_data_out_3_0_51_fifo_V0 & SE_i_or_cond432_add251_and0;
    // Backward Stall generation
    assign SE_i_or_cond432_add251_backStall = ~ (SE_i_or_cond432_add251_v_s_0);
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_i_or_cond432_add251_R_v_0 <= 1'b0;
            SE_i_or_cond432_add251_R_v_1 <= 1'b0;
        end
        else
        begin
            if (SE_i_or_cond432_add251_backEN == 1'b0)
            begin
                SE_i_or_cond432_add251_R_v_0 <= SE_i_or_cond432_add251_R_v_0 & SE_i_or_cond432_add251_s_tv_0;
            end
            else
            begin
                SE_i_or_cond432_add251_R_v_0 <= SE_i_or_cond432_add251_v_s_0;
            end

            if (SE_i_or_cond432_add251_backEN == 1'b0)
            begin
                SE_i_or_cond432_add251_R_v_1 <= SE_i_or_cond432_add251_R_v_1 & SE_i_or_cond432_add251_s_tv_1;
            end
            else
            begin
                SE_i_or_cond432_add251_R_v_1 <= SE_i_or_cond432_add251_v_s_0;
            end

        end
    end

    // bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6(BITJOIN,2880)
    assign bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_q = i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6(BITSELECT,2881)
    assign bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_q[0:0]);

    // redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo(STALLFIFO,2706)
    assign redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_valid_in = SE_out_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_V0;
    assign redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_stall_in = SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_backStall;
    assign redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_data_in = bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_b;
    assign redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_valid_in_bitsignaltemp = redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_valid_in[0];
    assign redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_stall_in_bitsignaltemp = redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_stall_in[0];
    assign redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_valid_out[0] = redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_valid_out_bitsignaltemp;
    assign redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_stall_out[0] = redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(53),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(1),
        .IMPL("ram")
    ) theredist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo (
        .valid_in(redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_valid_in_bitsignaltemp),
        .stall_in(redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_stall_in_bitsignaltemp),
        .data_in(bubble_select_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_b),
        .valid_out(redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_valid_out_bitsignaltemp),
        .stall_out(redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_stall_out_bitsignaltemp),
        .data_out(redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo(STALLENABLE,3845)
    // Valid signal propagation
    assign SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_V0 = SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_wireValid;
    // Backward Stall generation
    assign SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_backStall = i_llvm_fpga_mem_ml358_add265_out_o_stall | ~ (SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_and0 = redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_valid_out;
    assign SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_and1 = SE_i_or_cond432_add251_V0 & SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_and0;
    assign SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_and2 = SE_redist178_i_arrayidx17_i159_add0_dupName_2_trunc_sel_x_b_1_0_V0 & SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_and1;
    assign SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_and3 = SE_redist171_i_arrayidx5_i132_add0_dupName_2_trunc_sel_x_b_1_0_V0 & SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_and2;
    assign SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_wireValid = SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_V1 & SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_and3;

    // SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x(STALLENABLE,3132)
    // Valid signal propagation
    assign SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_V0 = SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_wireValid;
    // Backward Stall generation
    assign SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_backStall = i_llvm_fpga_mem_ml3211_add267_out_o_stall | ~ (SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_wireValid);
    // Computing multiple Valid(s)
    assign SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_and0 = SE_redist182_i_arrayidx17_i104_add0_dupName_2_trunc_sel_x_b_3_2_V0;
    assign SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_and1 = SE_redist168_i_arrayidx5_i93_add0_dupName_2_trunc_sel_x_b_1_0_V0 & SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_and0;
    assign SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_and2 = SE_i_acl_20_add260_V0 & SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_and1;
    assign SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_wireValid = SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_V0 & SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_and2;

    // SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo(STALLENABLE,3786)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_fromReg0 <= '0;
            SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_fromReg0 <= SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_toReg0;
            // Successor 1
            SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_fromReg1 <= SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_toReg1;
        end
    end
    // Input Stall processing
    assign SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_consumed0 = (~ (SE_i_arrayidx17_i104_add0_dupName_3_trunc_sel_x_backStall) & SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_wireValid) | SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_fromReg0;
    assign SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_consumed1 = (~ (SE_out_redist112_i_llvm_fpga_ffwd_dest_i1_tobool_i_i34_add6_out_dest_data_out_3_0_52_fifo_backStall) & SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_wireValid) | SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_fromReg1;
    // Consuming
    assign SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_StallValid = SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_backStall & SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_wireValid;
    assign SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_toReg0 = SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_StallValid & SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_consumed0;
    assign SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_toReg1 = SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_StallValid & SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_consumed1;
    // Backward Stall generation
    assign SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_or0 = SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_consumed0;
    assign SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_wireStall = ~ (SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_consumed1 & SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_or0);
    assign SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_backStall = SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_wireStall;
    // Valid signal propagation
    assign SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_V0 = SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_wireValid & ~ (SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_fromReg0);
    assign SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_V1 = SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_wireValid & ~ (SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_fromReg1);
    // Computing multiple Valid(s)
    assign SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_wireValid = redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_valid_out;

    // redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo(STALLFIFO,2652)
    assign redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_valid_in = SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_V2;
    assign redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_stall_in = SE_out_redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_backStall;
    assign redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_data_in = bubble_select_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_b;
    assign redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_valid_in_bitsignaltemp = redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_valid_in[0];
    assign redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_stall_in_bitsignaltemp = redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_stall_in[0];
    assign redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_valid_out[0] = redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_valid_out_bitsignaltemp;
    assign redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_stall_out[0] = redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_stall_out_bitsignaltemp;
    acl_data_fifo #(
        .DEPTH(34),
        .STRICT_DEPTH(0),
        .ALLOW_FULL_WRITE(0),
        .DATA_WIDTH(1),
        .IMPL("ram")
    ) theredist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo (
        .valid_in(redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_valid_in_bitsignaltemp),
        .stall_in(redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_stall_in_bitsignaltemp),
        .data_in(bubble_select_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_b),
        .valid_out(redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_valid_out_bitsignaltemp),
        .stall_out(redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_stall_out_bitsignaltemp),
        .data_out(redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_data_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15(STALLENABLE,3389)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_V0 = SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_backStall = i_llvm_fpga_mem_lm12810_add224_out_o_stall | ~ (SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_and0 = i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_out_valid_out;
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_wireValid = SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_V1 & SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_and0;

    // i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50(BLACKBOX,452)@20
    // in in_stall_in@20000000
    // out out_data_out@21
    // out out_feedback_stall_out_9@20000000
    // out out_stall_out@20000000
    // out out_valid_out@21
    add_i_llvm_fpga_pop_i1_memdep_phi17_pop9_0 thei_llvm_fpga_pop_i1_memdep_phi17_pop9_add50 (
        .in_data_in(GND_q),
        .in_dir(bubble_select_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_b),
        .in_feedback_in_9(i_llvm_fpga_push_i1_memdep_phi17_push9_add274_out_feedback_out_9),
        .in_feedback_valid_in_9(i_llvm_fpga_push_i1_memdep_phi17_push9_add274_out_feedback_valid_out_9),
        .in_predicate(GND_q),
        .in_stall_in(SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_backStall),
        .in_valid_in(SE_out_redist188_add_B8_merge_reg_aunroll_x_out_data_out_0_tpl_19_fifo_V0),
        .out_data_out(i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out),
        .out_feedback_stall_out_9(i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_feedback_stall_out_9),
        .out_stall_out(i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_stall_out),
        .out_valid_out(i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50(STALLENABLE,3429)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_fromReg0 <= '0;
            SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_fromReg1 <= '0;
            SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_fromReg2 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_fromReg0 <= SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_toReg0;
            // Successor 1
            SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_fromReg1 <= SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_toReg1;
            // Successor 2
            SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_fromReg2 <= SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_toReg2;
        end
    end
    // Input Stall processing
    assign SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_consumed0 = (~ (SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_backStall) & SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_wireValid) | SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_fromReg0;
    assign SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_consumed1 = (~ (SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numrows_i31_i57_add15_backStall) & SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_wireValid) | SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_fromReg1;
    assign SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_consumed2 = (~ (redist58_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out_33_fifo_stall_out) & SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_wireValid) | SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_fromReg2;
    // Consuming
    assign SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_StallValid = SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_backStall & SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_wireValid;
    assign SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_toReg0 = SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_StallValid & SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_consumed0;
    assign SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_toReg1 = SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_StallValid & SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_consumed1;
    assign SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_toReg2 = SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_StallValid & SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_consumed2;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_or0 = SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_consumed0;
    assign SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_or1 = SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_consumed1 & SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_or0;
    assign SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_wireStall = ~ (SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_consumed2 & SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_or1);
    assign SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_backStall = SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_wireStall;
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_V0 = SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_wireValid & ~ (SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_fromReg0);
    assign SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_V1 = SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_wireValid & ~ (SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_fromReg1);
    assign SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_V2 = SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_wireValid & ~ (SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_fromReg2);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_wireValid = i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_valid_out;

    // i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13(BLACKBOX,430)@20
    // in in_stall_in@20000000
    // out out_dest_data_out_9_0@21
    // out out_stall_out@20000000
    // out out_valid_out@21
    add_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_0 thei_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13 (
        .in_intel_reserved_ffwd_9_0(in_intel_reserved_ffwd_9_0),
        .in_stall_in(SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_backStall),
        .in_valid_in(SE_out_bubble_out_add_B8_merge_reg_aunroll_x_14_V0),
        .out_dest_data_out_9_0(i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_out_dest_data_out_9_0),
        .out_stall_out(i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_out_stall_out),
        .out_valid_out(i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_out_valid_out),
        .clock(clock),
        .resetn(resetn)
    );

    // SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13(STALLENABLE,3385)
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_V0 = SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_wireValid;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_backStall = i_llvm_fpga_mem_lm1269_add223_out_o_stall | ~ (SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_wireValid);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_and0 = i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_out_valid_out;
    assign SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_wireValid = SE_out_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_V0 & SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_and0;

    // SE_out_i_llvm_fpga_mem_lm1269_add223(STALLENABLE,3409)
    always @ (posedge clock or negedge resetn)
    begin
        if (!resetn)
        begin
            SE_out_i_llvm_fpga_mem_lm1269_add223_fromReg0 <= '0;
            SE_out_i_llvm_fpga_mem_lm1269_add223_fromReg1 <= '0;
        end
        else
        begin
            // Successor 0
            SE_out_i_llvm_fpga_mem_lm1269_add223_fromReg0 <= SE_out_i_llvm_fpga_mem_lm1269_add223_toReg0;
            // Successor 1
            SE_out_i_llvm_fpga_mem_lm1269_add223_fromReg1 <= SE_out_i_llvm_fpga_mem_lm1269_add223_toReg1;
        end
    end
    // Input Stall processing
    assign SE_out_i_llvm_fpga_mem_lm1269_add223_consumed0 = (~ (SE_i_cmp11_i98_add241_backStall) & SE_out_i_llvm_fpga_mem_lm1269_add223_wireValid) | SE_out_i_llvm_fpga_mem_lm1269_add223_fromReg0;
    assign SE_out_i_llvm_fpga_mem_lm1269_add223_consumed1 = (~ (SE_out_redist113_i_llvm_fpga_ffwd_dest_i1_tobool_i30_i55_add17_out_dest_data_out_8_0_51_fifo_backStall) & SE_out_i_llvm_fpga_mem_lm1269_add223_wireValid) | SE_out_i_llvm_fpga_mem_lm1269_add223_fromReg1;
    // Consuming
    assign SE_out_i_llvm_fpga_mem_lm1269_add223_StallValid = SE_out_i_llvm_fpga_mem_lm1269_add223_backStall & SE_out_i_llvm_fpga_mem_lm1269_add223_wireValid;
    assign SE_out_i_llvm_fpga_mem_lm1269_add223_toReg0 = SE_out_i_llvm_fpga_mem_lm1269_add223_StallValid & SE_out_i_llvm_fpga_mem_lm1269_add223_consumed0;
    assign SE_out_i_llvm_fpga_mem_lm1269_add223_toReg1 = SE_out_i_llvm_fpga_mem_lm1269_add223_StallValid & SE_out_i_llvm_fpga_mem_lm1269_add223_consumed1;
    // Backward Stall generation
    assign SE_out_i_llvm_fpga_mem_lm1269_add223_or0 = SE_out_i_llvm_fpga_mem_lm1269_add223_consumed0;
    assign SE_out_i_llvm_fpga_mem_lm1269_add223_wireStall = ~ (SE_out_i_llvm_fpga_mem_lm1269_add223_consumed1 & SE_out_i_llvm_fpga_mem_lm1269_add223_or0);
    assign SE_out_i_llvm_fpga_mem_lm1269_add223_backStall = SE_out_i_llvm_fpga_mem_lm1269_add223_wireStall;
    // Valid signal propagation
    assign SE_out_i_llvm_fpga_mem_lm1269_add223_V0 = SE_out_i_llvm_fpga_mem_lm1269_add223_wireValid & ~ (SE_out_i_llvm_fpga_mem_lm1269_add223_fromReg0);
    assign SE_out_i_llvm_fpga_mem_lm1269_add223_V1 = SE_out_i_llvm_fpga_mem_lm1269_add223_wireValid & ~ (SE_out_i_llvm_fpga_mem_lm1269_add223_fromReg1);
    // Computing multiple Valid(s)
    assign SE_out_i_llvm_fpga_mem_lm1269_add223_wireValid = i_llvm_fpga_mem_lm1269_add223_out_o_valid;

    // GND(CONSTANT,0)
    assign GND_q = $unsigned(1'b0);

    // bubble_join_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50(BITJOIN,2998)
    assign bubble_join_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_q = i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_out_data_out;

    // bubble_select_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50(BITSELECT,2999)
    assign bubble_select_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_b = $unsigned(bubble_join_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_q[0:0]);

    // bubble_join_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13(BITJOIN,2934)
    assign bubble_join_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_q = i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_out_dest_data_out_9_0;

    // bubble_select_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13(BITSELECT,2935)
    assign bubble_select_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_b = $unsigned(bubble_join_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_q[63:0]);

    // i_llvm_fpga_mem_lm1269_add223(BLACKBOX,442)@21
    // in in_i_stall@20000000
    // out out_lm1269_add_avm_address@20000000
    // out out_lm1269_add_avm_burstcount@20000000
    // out out_lm1269_add_avm_byteenable@20000000
    // out out_lm1269_add_avm_enable@20000000
    // out out_lm1269_add_avm_read@20000000
    // out out_lm1269_add_avm_write@20000000
    // out out_lm1269_add_avm_writedata@20000000
    // out out_o_readdata@53
    // out out_o_stall@20000000
    // out out_o_valid@53
    add_i_llvm_fpga_mem_lm1269_0 thei_llvm_fpga_mem_lm1269_add223 (
        .in_flush(in_flush),
        .in_i_address(bubble_select_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_b),
        .in_i_dependence(bubble_select_i_llvm_fpga_pop_i1_memdep_phi17_pop9_add50_b),
        .in_i_predicate(GND_q),
        .in_i_stall(SE_out_i_llvm_fpga_mem_lm1269_add223_backStall),
        .in_i_valid(SE_out_i_llvm_fpga_ffwd_dest_p1024i32_t_numcols_i33_i56_add13_V0),
        .in_lm1269_add_avm_readdata(in_lm1269_add_avm_readdata),
        .in_lm1269_add_avm_readdatavalid(in_lm1269_add_avm_readdatavalid),
        .in_lm1269_add_avm_waitrequest(in_lm1269_add_avm_waitrequest),
        .in_lm1269_add_avm_writeack(in_lm1269_add_avm_writeack),
        .out_lm1269_add_avm_address(i_llvm_fpga_mem_lm1269_add223_out_lm1269_add_avm_address),
        .out_lm1269_add_avm_burstcount(i_llvm_fpga_mem_lm1269_add223_out_lm1269_add_avm_burstcount),
        .out_lm1269_add_avm_byteenable(i_llvm_fpga_mem_lm1269_add223_out_lm1269_add_avm_byteenable),
        .out_lm1269_add_avm_enable(i_llvm_fpga_mem_lm1269_add223_out_lm1269_add_avm_enable),
        .out_lm1269_add_avm_read(i_llvm_fpga_mem_lm1269_add223_out_lm1269_add_avm_read),
        .out_lm1269_add_avm_write(i_llvm_fpga_mem_lm1269_add223_out_lm1269_add_avm_write),
        .out_lm1269_add_avm_writedata(i_llvm_fpga_mem_lm1269_add223_out_lm1269_add_avm_writedata),
        .out_o_readdata(i_llvm_fpga_mem_lm1269_add223_out_o_readdata),
        .out_o_stall(i_llvm_fpga_mem_lm1269_add223_out_o_stall),
        .out_o_valid(i_llvm_fpga_mem_lm1269_add223_out_o_valid),
        .clock(clock),
        .resetn(resetn)
    );

    // dupName_0_ext_sig_sync_out_x(GPOUT,37)
    assign out_lm1269_add_avm_address = i_llvm_fpga_mem_lm1269_add223_out_lm1269_add_avm_address;
    assign out_lm1269_add_avm_enable = i_llvm_fpga_mem_lm1269_add223_out_lm1269_add_avm_enable;
    assign out_lm1269_add_avm_read = i_llvm_fpga_mem_lm1269_add223_out_lm1269_add_avm_read;
    assign out_lm1269_add_avm_write = i_llvm_fpga_mem_lm1269_add223_out_lm1269_add_avm_write;
    assign out_lm1269_add_avm_writedata = i_llvm_fpga_mem_lm1269_add223_out_lm1269_add_avm_writedata;
    assign out_lm1269_add_avm_byteenable = i_llvm_fpga_mem_lm1269_add223_out_lm1269_add_avm_byteenable;
    assign out_lm1269_add_avm_burstcount = i_llvm_fpga_mem_lm1269_add223_out_lm1269_add_avm_burstcount;

    // dupName_0_regfree_osync_x(GPOUT,38)
    assign out_intel_reserved_ffwd_43_0 = i_llvm_fpga_ffwd_source_i32_unnamed_add75_add283_out_intel_reserved_ffwd_43_0;

    // i_masked135_add291(LOGICAL,472)@155 + 1
    assign i_masked135_add291_qi = SR_SE_i_masked135_add291_D0 & SR_SE_i_masked135_add291_D1;
    dspba_delay_ver #( .width(1), .depth(1), .reset_kind("ASYNC"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_masked135_add291_delay ( .xin(i_masked135_add291_qi), .xout(i_masked135_add291_q), .ena(SE_i_masked135_add291_backEN[0]), .clk(clock), .aclr(resetn) );

    // bubble_join_i_llvm_fpga_push_i32_inc35145_push14_add226(BITJOIN,3020)
    assign bubble_join_i_llvm_fpga_push_i32_inc35145_push14_add226_q = i_llvm_fpga_push_i32_inc35145_push14_add226_out_data_out;

    // bubble_select_i_llvm_fpga_push_i32_inc35145_push14_add226(BITSELECT,3021)
    assign bubble_select_i_llvm_fpga_push_i32_inc35145_push14_add226_b = $unsigned(bubble_join_i_llvm_fpga_push_i32_inc35145_push14_add226_q[31:0]);

    // dupName_0_sync_out_x(GPOUT,39)@156
    assign out_inc35145_push14 = bubble_select_i_llvm_fpga_push_i32_inc35145_push14_add226_b;
    assign out_masked135 = i_masked135_add291_q;
    assign out_valid_out = SE_out_bubble_out_i_llvm_fpga_pop_i32_inc35145_pop14_add53_1_V0;

    // dupName_1_ext_sig_sync_out_x(GPOUT,41)
    assign out_lm12810_add_avm_address = i_llvm_fpga_mem_lm12810_add224_out_lm12810_add_avm_address;
    assign out_lm12810_add_avm_enable = i_llvm_fpga_mem_lm12810_add224_out_lm12810_add_avm_enable;
    assign out_lm12810_add_avm_read = i_llvm_fpga_mem_lm12810_add224_out_lm12810_add_avm_read;
    assign out_lm12810_add_avm_write = i_llvm_fpga_mem_lm12810_add224_out_lm12810_add_avm_write;
    assign out_lm12810_add_avm_writedata = i_llvm_fpga_mem_lm12810_add224_out_lm12810_add_avm_writedata;
    assign out_lm12810_add_avm_byteenable = i_llvm_fpga_mem_lm12810_add224_out_lm12810_add_avm_byteenable;
    assign out_lm12810_add_avm_burstcount = i_llvm_fpga_mem_lm12810_add224_out_lm12810_add_avm_burstcount;

    // dupName_2_ext_sig_sync_out_x(GPOUT,43)
    assign out_ml358_add_avm_address = i_llvm_fpga_mem_ml358_add265_out_ml358_add_avm_address;
    assign out_ml358_add_avm_enable = i_llvm_fpga_mem_ml358_add265_out_ml358_add_avm_enable;
    assign out_ml358_add_avm_read = i_llvm_fpga_mem_ml358_add265_out_ml358_add_avm_read;
    assign out_ml358_add_avm_write = i_llvm_fpga_mem_ml358_add265_out_ml358_add_avm_write;
    assign out_ml358_add_avm_writedata = i_llvm_fpga_mem_ml358_add265_out_ml358_add_avm_writedata;
    assign out_ml358_add_avm_byteenable = i_llvm_fpga_mem_ml358_add265_out_ml358_add_avm_byteenable;
    assign out_ml358_add_avm_burstcount = i_llvm_fpga_mem_ml358_add265_out_ml358_add_avm_burstcount;

    // dupName_3_ext_sig_sync_out_x(GPOUT,45)
    assign out_ml3211_add_avm_address = i_llvm_fpga_mem_ml3211_add267_out_ml3211_add_avm_address;
    assign out_ml3211_add_avm_enable = i_llvm_fpga_mem_ml3211_add267_out_ml3211_add_avm_enable;
    assign out_ml3211_add_avm_read = i_llvm_fpga_mem_ml3211_add267_out_ml3211_add_avm_read;
    assign out_ml3211_add_avm_write = i_llvm_fpga_mem_ml3211_add267_out_ml3211_add_avm_write;
    assign out_ml3211_add_avm_writedata = i_llvm_fpga_mem_ml3211_add267_out_ml3211_add_avm_writedata;
    assign out_ml3211_add_avm_byteenable = i_llvm_fpga_mem_ml3211_add267_out_ml3211_add_avm_byteenable;
    assign out_ml3211_add_avm_burstcount = i_llvm_fpga_mem_ml3211_add267_out_ml3211_add_avm_burstcount;

    // dupName_4_ext_sig_sync_out_x(GPOUT,47)
    assign out_memdep_16_add_avm_address = i_llvm_fpga_mem_memdep_16_add273_out_memdep_16_add_avm_address;
    assign out_memdep_16_add_avm_enable = i_llvm_fpga_mem_memdep_16_add273_out_memdep_16_add_avm_enable;
    assign out_memdep_16_add_avm_read = i_llvm_fpga_mem_memdep_16_add273_out_memdep_16_add_avm_read;
    assign out_memdep_16_add_avm_write = i_llvm_fpga_mem_memdep_16_add273_out_memdep_16_add_avm_write;
    assign out_memdep_16_add_avm_writedata = i_llvm_fpga_mem_memdep_16_add273_out_memdep_16_add_avm_writedata;
    assign out_memdep_16_add_avm_byteenable = i_llvm_fpga_mem_memdep_16_add273_out_memdep_16_add_avm_byteenable;
    assign out_memdep_16_add_avm_burstcount = i_llvm_fpga_mem_memdep_16_add273_out_memdep_16_add_avm_burstcount;

    // dupName_5_ext_sig_sync_out_x(GPOUT,49)
    assign out_lsu_memdep_16_o_active = i_llvm_fpga_mem_memdep_16_add273_out_lsu_memdep_16_o_active;

    // dupName_6_ext_sig_sync_out_x(GPOUT,50)
    assign out_lm13212_add_avm_address = i_llvm_fpga_mem_lm13212_add275_out_lm13212_add_avm_address;
    assign out_lm13212_add_avm_enable = i_llvm_fpga_mem_lm13212_add275_out_lm13212_add_avm_enable;
    assign out_lm13212_add_avm_read = i_llvm_fpga_mem_lm13212_add275_out_lm13212_add_avm_read;
    assign out_lm13212_add_avm_write = i_llvm_fpga_mem_lm13212_add275_out_lm13212_add_avm_write;
    assign out_lm13212_add_avm_writedata = i_llvm_fpga_mem_lm13212_add275_out_lm13212_add_avm_writedata;
    assign out_lm13212_add_avm_byteenable = i_llvm_fpga_mem_lm13212_add275_out_lm13212_add_avm_byteenable;
    assign out_lm13212_add_avm_burstcount = i_llvm_fpga_mem_lm13212_add275_out_lm13212_add_avm_burstcount;

    // dupName_7_ext_sig_sync_out_x(GPOUT,51)
    assign out_lm13413_add_avm_address = i_llvm_fpga_mem_lm13413_add276_out_lm13413_add_avm_address;
    assign out_lm13413_add_avm_enable = i_llvm_fpga_mem_lm13413_add276_out_lm13413_add_avm_enable;
    assign out_lm13413_add_avm_read = i_llvm_fpga_mem_lm13413_add276_out_lm13413_add_avm_read;
    assign out_lm13413_add_avm_write = i_llvm_fpga_mem_lm13413_add276_out_lm13413_add_avm_write;
    assign out_lm13413_add_avm_writedata = i_llvm_fpga_mem_lm13413_add276_out_lm13413_add_avm_writedata;
    assign out_lm13413_add_avm_byteenable = i_llvm_fpga_mem_lm13413_add276_out_lm13413_add_avm_byteenable;
    assign out_lm13413_add_avm_burstcount = i_llvm_fpga_mem_lm13413_add276_out_lm13413_add_avm_burstcount;

    // ext_sig_sync_out(GPOUT,330)
    assign out_aclp_to_limiter_i_llvm_fpga_pipeline_keep_going126_add45_exiting_valid_out = i_llvm_fpga_pipeline_keep_going126_add45_out_exiting_valid_out;
    assign out_aclp_to_limiter_i_llvm_fpga_pipeline_keep_going126_add45_exiting_stall_out = i_llvm_fpga_pipeline_keep_going126_add45_out_exiting_stall_out;

    // pipeline_valid_out_sync(GPOUT,718)
    assign out_pipeline_valid_out = i_llvm_fpga_pipeline_keep_going126_add45_out_pipeline_valid_out;

    // regfree_osync(GPOUT,742)
    assign out_intel_reserved_ffwd_42_0 = i_llvm_fpga_ffwd_source_i32_unnamed_add74_add279_out_intel_reserved_ffwd_42_0;

    // sync_out(GPOUT,746)@0
    assign out_stall_out = SE_stall_entry_backStall;

endmodule
